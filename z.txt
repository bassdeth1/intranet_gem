Listado del proyecto en: /workspaces/intranet_gem
Generado el: 2025-05-15 19:42:43
============================================

├── README.md
│   📄 CONTENIDO DEL ARCHIVO (README.md):
│     # intranet_gem
│   --- FIN CONTENIDO (README.md) ---

├── intranet_core
│   ├── __init__.py
│   │   📄 (Archivo vacío)

│   ├── admin.py
│   │   📄 CONTENIDO DEL ARCHIVO (admin.py):
│   │     # Ubicación: /workspaces/intranet_gem/intranet_core/admin.py
│   │     from django.contrib import admin
│   │     from .models import Archivo, Carpeta, ArticuloWiki, Notificacion # Añadir ArticuloWiki y Notificacion
│   │     
│   │     @admin.register(Archivo)
│   │     class ArchivoAdmin(admin.ModelAdmin):
│   │         list_display = ('nombre_descriptivo', 'nombre_original_archivo', 'fecha_subida', 'subido_por', 'carpeta')
│   │         list_filter = ('fecha_subida', 'subido_por', 'carpeta')
│   │         search_fields = ('nombre_descriptivo', 'nombre_original_archivo', 'subido_por__username', 'carpeta__nombre')
│   │         readonly_fields = ('fecha_subida',) # 'nombre_original_archivo' si se setea siempre en save
│   │     
│   │         def save_model(self, request, obj, form, change):
│   │             if not obj.subido_por_id:
│   │                 obj.subido_por = request.user
│   │             # Para setear nombre_original_archivo si no se hizo en la vista/form al crear/editar
│   │             if obj.archivo_subido and not obj.nombre_original_archivo:
│   │                  obj.nombre_original_archivo = obj.archivo_subido.name
│   │             super().save_model(request, obj, form, change)
│   │     
│   │     @admin.register(Carpeta)
│   │     class CarpetaAdmin(admin.ModelAdmin):
│   │         list_display = ('nombre', 'subido_por', 'fecha_creacion')
│   │         list_filter = ('fecha_creacion', 'subido_por')
│   │         search_fields = ('nombre', 'subido_por__username')
│   │         readonly_fields = ('fecha_creacion',)
│   │     
│   │     @admin.register(ArticuloWiki)
│   │     class ArticuloWikiAdmin(admin.ModelAdmin):
│   │         list_display = ('titulo', 'autor', 'actualizado_el', 'creado_el', 'slug')
│   │         search_fields = ('titulo', 'contenido', 'autor__username')
│   │         prepopulated_fields = {'slug': ('titulo',)}
│   │         list_filter = ('actualizado_el', 'creado_el', 'autor')
│   │         readonly_fields = ('creado_el', 'actualizado_el')
│   │     
│   │         def save_model(self, request, obj, form, change):
│   │             if not change and not obj.autor_id and request.user.is_authenticated: # Solo al crear y si no tiene autor
│   │                 obj.autor = request.user
│   │             super().save_model(request, obj, form, change)
│   │     
│   │     @admin.register(Notificacion)
│   │     class NotificacionAdmin(admin.ModelAdmin):
│   │         list_display = ('destinatario', 'mensaje_corto', 'leida', 'fecha_creacion', 'url_destino')
│   │         list_filter = ('leida', 'fecha_creacion', 'destinatario')
│   │         search_fields = ('destinatario__username', 'mensaje')
│   │         readonly_fields = ('fecha_creacion',)
│   │         actions = ['marcar_como_leida', 'marcar_como_no_leida']
│   │     
│   │         def mensaje_corto(self, obj):
│   │             return (obj.mensaje[:75] + '...') if len(obj.mensaje) > 75 else obj.mensaje
│   │         mensaje_corto.short_description = 'Mensaje'
│   │     
│   │         def marcar_como_leida(self, request, queryset):
│   │             queryset.update(leida=True)
│   │         marcar_como_leida.short_description = "Marcar seleccionadas como leídas"
│   │     
│   │         def marcar_como_no_leida(self, request, queryset):
│   │             queryset.update(leida=False)
│   │         marcar_como_no_leida.short_description = "Marcar seleccionadas como no leídas"
│   │   --- FIN CONTENIDO (admin.py) ---

│   ├── apps.py
│   │   📄 (Archivo vacío)

│   ├── forms.py
│   │   📄 CONTENIDO DEL ARCHIVO (forms.py):
│   │     # intranet_core/forms.py
│   │     from django import forms
│   │     from django.contrib.auth.models import User, Group
│   │     from django.contrib.auth.forms import PasswordChangeForm
│   │     
│   │     from .models import (
│   │         Archivo, Carpeta, ArticuloWiki,
│   │         Formulario, CampoFormulario, # Modelos de Formularios
│   │         EventoCalendario, # Modelo de Calendario
│   │         Tarea, # Modelo de Tareas/Responsabilidades
│   │         PerfilUsuario, # Modelo de Perfil
│   │         TipoRecurso, Recurso, Reserva # Modelos de Reservas
│   │     )
│   │     
│   │     # Clases CSS comunes para los widgets de formulario para mantener la consistencia
│   │     COMMON_TEXT_INPUT_CLASSES = 'mt-1 block w-full rounded-md border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-200 shadow-sm focus:border-main-primary focus:ring-main-primary sm:text-sm'
│   │     COMMON_TEXTAREA_CLASSES = COMMON_TEXT_INPUT_CLASSES + ' min-h-[100px]' # Añadir altura mínima
│   │     COMMON_SELECT_CLASSES = COMMON_TEXT_INPUT_CLASSES
│   │     COMMON_FILE_INPUT_CLASSES = 'mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-main-primary file:text-main-white hover:file:bg-main-primary-dark dark:file:bg-main-primary-dark dark:hover:file:bg-main-primary'
│   │     COMMON_CHECKBOX_CLASSES = 'h-4 w-4 text-main-primary border-gray-300 dark:border-gray-600 rounded focus:ring-main-primary'
│   │     
│   │     
│   │     # --- Formularios Existentes ---
│   │     
│   │     class CarpetaForm(forms.ModelForm):
│   │         class Meta:
│   │             model = Carpeta
│   │             fields = ['nombre']
│   │             widgets = {
│   │                 'nombre': forms.TextInput(attrs={
│   │                     'class': COMMON_TEXT_INPUT_CLASSES,
│   │                     'placeholder': 'Nombre de la nueva carpeta'
│   │                 })
│   │             }
│   │             labels = {
│   │                 'nombre': 'Nombre de la Carpeta'
│   │             }
│   │     
│   │     class ArchivoForm(forms.ModelForm):
│   │         def __init__(self, *args, **kwargs):
│   │             user = kwargs.pop('user', None)
│   │             super().__init__(*args, **kwargs)
│   │             if user:
│   │                 # Solo mostrar carpetas creadas por el usuario actual
│   │                 self.fields['carpeta'].queryset = Carpeta.objects.filter(subido_por=user).order_by('nombre')
│   │                 self.fields['carpeta'].empty_label = "Raíz (sin carpeta)" # Opcional: o "Seleccione una carpeta..."
│   │     
│   │         class Meta:
│   │             model = Archivo
│   │             fields = ['nombre_descriptivo', 'archivo_subido', 'carpeta']
│   │             widgets = {
│   │                 'nombre_descriptivo': forms.TextInput(attrs={
│   │                     'class': COMMON_TEXT_INPUT_CLASSES,
│   │                     'placeholder': 'Título o descripción breve del archivo'
│   │                 }),
│   │                 'archivo_subido': forms.ClearableFileInput(attrs={
│   │                     'class': COMMON_FILE_INPUT_CLASSES
│   │                 }),
│   │                 'carpeta': forms.Select(attrs={
│   │                     'class': COMMON_SELECT_CLASSES,
│   │                 })
│   │             }
│   │             labels = {
│   │                 'nombre_descriptivo': 'Nombre Descriptivo',
│   │                 'archivo_subido': 'Archivo',
│   │                 'carpeta': 'Guardar en Carpeta'
│   │             }
│   │     
│   │     class ArchivoEditForm(forms.ModelForm):
│   │         def __init__(self, *args, **kwargs):
│   │             user = kwargs.pop('user', None)
│   │             super().__init__(*args, **kwargs)
│   │             if user:
│   │                 self.fields['carpeta'].queryset = Carpeta.objects.filter(subido_por=user).order_by('nombre')
│   │                 self.fields['carpeta'].empty_label = "Raíz (sin carpeta)"
│   │             # Hacer el campo de archivo no obligatorio para la edición (se puede editar solo el nombre/carpeta)
│   │             self.fields['archivo_subido'].required = False
│   │     
│   │         class Meta:
│   │             model = Archivo
│   │             fields = ['nombre_descriptivo', 'carpeta', 'archivo_subido'] # El orden puede ser importante
│   │             widgets = {
│   │                 'nombre_descriptivo': forms.TextInput(attrs={
│   │                     'class': COMMON_TEXT_INPUT_CLASSES,
│   │                 }),
│   │                 'carpeta': forms.Select(attrs={
│   │                     'class': COMMON_SELECT_CLASSES,
│   │                 }),
│   │                 'archivo_subido': forms.ClearableFileInput(attrs={ # Permite limpiar el archivo actual o subir uno nuevo
│   │                     'class': COMMON_FILE_INPUT_CLASSES
│   │                 }),
│   │             }
│   │             labels = {
│   │                 'nombre_descriptivo': 'Nombre Descriptivo',
│   │                 'carpeta': 'Carpeta',
│   │                 'archivo_subido': 'Reemplazar Archivo (opcional)'
│   │             }
│   │     
│   │     class ArticuloWikiForm(forms.ModelForm):
│   │         class Meta:
│   │             model = ArticuloWiki
│   │             fields = ['titulo', 'contenido', 'slug'] # Autor se setea en la vista
│   │             widgets = {
│   │                 'titulo': forms.TextInput(attrs={
│   │                     'class': COMMON_TEXT_INPUT_CLASSES,
│   │                     'placeholder': 'Título del artículo'
│   │                 }),
│   │                 'contenido': forms.Textarea(attrs={
│   │                     'class': COMMON_TEXTAREA_CLASSES,
│   │                     'rows': 15,
│   │                     'placeholder': 'Escribe el contenido del artículo aquí. Se recomienda usar Markdown.'
│   │                 }),
│   │                 'slug': forms.TextInput(attrs={
│   │                     'class': COMMON_TEXT_INPUT_CLASSES,
│   │                     'placeholder': 'URL amigable (ej: como-usar-la-wiki)'
│   │                 }),
│   │             }
│   │             help_texts = {
│   │                 'slug': 'Dejar en blanco para autogenerar basado en el título. Usa solo letras, números, guiones o guiones bajos. Si lo modificas, asegúrate que sea único.',
│   │                 'contenido': 'Puedes usar sintaxis Markdown para dar formato al texto (encabezados, listas, negritas, etc.). Se recomienda instalar Pygments (`pip install Pygments`) para el resaltado de código.'
│   │             }
│   │             labels = {
│   │                 'titulo': 'Título del Artículo',
│   │                 'contenido': 'Contenido (Markdown)',
│   │                 'slug': 'Fragmento de URL (Slug)'
│   │             }
│   │     
│   │         def clean_slug(self):
│   │             slug = self.cleaned_data.get('slug')
│   │             if slug:
│   │                 from django.utils.text import slugify as django_slugify
│   │                 if not django_slugify(slug) == slug:
│   │                     raise forms.ValidationError("El slug solo puede contener letras, números, guiones y guiones bajos.")
│   │             return slug
│   │     
│   │     # --- Nuevos Formularios ---
│   │     
│   │     # 1. Formularios para el Módulo de "Formularios Dinámicos"
│   │     class FormularioModelForm(forms.ModelForm): # Para crear la metadata del formulario
│   │         class Meta:
│   │             model = Formulario
│   │             fields = ['titulo', 'descripcion', 'activo', 'fecha_limite']
│   │             widgets = {
│   │                 'titulo': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'placeholder': 'Título principal del formulario'}),
│   │                 'descripcion': forms.Textarea(attrs={'class': COMMON_TEXTAREA_CLASSES, 'rows': 3, 'placeholder': 'Descripción o instrucciones (opcional)'}),
│   │                 'activo': forms.CheckboxInput(attrs={'class': COMMON_CHECKBOX_CLASSES + ' ml-2'}),
│   │                 'fecha_limite': forms.DateTimeInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'type': 'datetime-local'}),
│   │             }
│   │             labels = {
│   │                 'titulo': 'Título del Formulario',
│   │                 'descripcion': 'Descripción',
│   │                 'activo': '¿Formulario activo para recibir respuestas?',
│   │                 'fecha_limite': 'Fecha Límite para Responder (opcional)'
│   │             }
│   │     
│   │     class CampoFormularioModelForm(forms.ModelForm): # Para añadir campos a un formulario (usado en formsets)
│   │         class Meta:
│   │             model = CampoFormulario
│   │             fields = ['etiqueta', 'tipo_campo', 'ayuda_texto', 'es_obligatorio', 'opciones_choices', 'orden'] # 'orden' se manejará en la vista o con JS
│   │             widgets = {
│   │                 'etiqueta': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'placeholder': 'Pregunta o etiqueta del campo'}),
│   │                 'tipo_campo': forms.Select(attrs={'class': COMMON_SELECT_CLASSES}),
│   │                 'ayuda_texto': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'placeholder': 'Ayuda adicional (opcional)'}),
│   │                 'es_obligatorio': forms.CheckboxInput(attrs={'class': COMMON_CHECKBOX_CLASSES}),
│   │                 'opciones_choices': forms.Textarea(attrs={'class': COMMON_TEXTAREA_CLASSES, 'rows': 3, 'placeholder': 'Una opción por línea (para opción múltiple, casillas, desplegable)'}),
│   │                 'orden': forms.HiddenInput(), # El orden se gestionará dinámicamente
│   │             }
│   │             labels = {
│   │                 'etiqueta': 'Etiqueta/Pregunta',
│   │                 'tipo_campo': 'Tipo de Campo',
│   │                 'ayuda_texto': 'Texto de Ayuda',
│   │                 'es_obligatorio': '¿Campo Obligatorio?',
│   │                 'opciones_choices': 'Opciones (si aplica)',
│   │             }
│   │     
│   │     # Nota: El formulario para *llenar* un 'Formulario' dinámico se construye en la vista o el template,
│   │     # no como una clase estática aquí, ya que sus campos dependen de las instancias de 'CampoFormulario'.
│   │     
│   │     # 2. Formulario para el Módulo de Calendario
│   │     class EventoCalendarioModelForm(forms.ModelForm):
│   │         class Meta:
│   │             model = EventoCalendario
│   │             fields = ['titulo', 'descripcion', 'fecha_inicio', 'fecha_fin'] # Añadir 'participantes', 'color_evento' si los usas
│   │             widgets = {
│   │                 'titulo': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'placeholder': 'Título del evento'}),
│   │                 'descripcion': forms.Textarea(attrs={'class': COMMON_TEXTAREA_CLASSES, 'rows': 4, 'placeholder': 'Descripción detallada (opcional)'}),
│   │                 'fecha_inicio': forms.DateTimeInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'type': 'datetime-local'}),
│   │                 'fecha_fin': forms.DateTimeInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'type': 'datetime-local'}),
│   │                 # 'color_evento': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'type': 'color'}), # Si usas color_evento
│   │             }
│   │             labels = {
│   │                 'titulo': 'Título',
│   │                 'descripcion': 'Descripción',
│   │                 'fecha_inicio': 'Fecha y Hora de Inicio',
│   │                 'fecha_fin': 'Fecha y Hora de Fin (opcional)',
│   │             }
│   │     
│   │         def clean(self):
│   │             cleaned_data = super().clean()
│   │             fecha_inicio = cleaned_data.get("fecha_inicio")
│   │             fecha_fin = cleaned_data.get("fecha_fin")
│   │     
│   │             if fecha_inicio and fecha_fin and fecha_fin < fecha_inicio:
│   │                 raise forms.ValidationError("La fecha de fin no puede ser anterior a la fecha de inicio.")
│   │             return cleaned_data
│   │     
│   │     # 3. Formulario para el Módulo de Tareas/Responsabilidades
│   │     class TareaModelForm(forms.ModelForm):
│   │         class Meta:
│   │             model = Tarea
│   │             fields = ['titulo', 'descripcion', 'asignado_a', 'fecha_limite', 'estado', 'prioridad']
│   │             widgets = {
│   │                 'titulo': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'placeholder': 'Título de la tarea'}),
│   │                 'descripcion': forms.Textarea(attrs={'class': COMMON_TEXTAREA_CLASSES, 'rows': 4, 'placeholder': 'Descripción detallada (opcional)'}),
│   │                 'asignado_a': forms.Select(attrs={'class': COMMON_SELECT_CLASSES}),
│   │                 'fecha_limite': forms.DateTimeInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'type': 'datetime-local'}),
│   │                 'estado': forms.Select(attrs={'class': COMMON_SELECT_CLASSES}),
│   │                 'prioridad': forms.Select(attrs={'class': COMMON_SELECT_CLASSES}),
│   │             }
│   │             labels = {
│   │                 'titulo': 'Título',
│   │                 'descripcion': 'Descripción',
│   │                 'asignado_a': 'Asignar a',
│   │                 'fecha_limite': 'Fecha Límite (opcional)',
│   │                 'estado': 'Estado Actual',
│   │                 'prioridad': 'Prioridad',
│   │             }
│   │         
│   │         def __init__(self, *args, **kwargs):
│   │             super().__init__(*args, **kwargs)
│   │             # Limitar el queryset de 'asignado_a' a usuarios activos, por ejemplo
│   │             self.fields['asignado_a'].queryset = User.objects.filter(is_active=True).order_by('username')
│   │             self.fields['asignado_a'].empty_label = "Sin asignar"
│   │             self.fields['asignado_a'].required = False # Hacer opcional la asignación directa
│   │     
│   │     # 4. Formularios para Perfil de Usuario
│   │     class UserUpdateForm(forms.ModelForm): # Para campos del modelo User
│   │         email = forms.EmailField(required=True, widget=forms.EmailInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}))
│   │         class Meta:
│   │             model = User
│   │             fields = ['first_name', 'last_name', 'email']
│   │             widgets = {
│   │                 'first_name': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │                 'last_name': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │             }
│   │             labels = {
│   │                 'first_name': 'Nombres',
│   │                 'last_name': 'Apellidos',
│   │                 'email': 'Correo Electrónico Institucional',
│   │             }
│   │     
│   │     class PerfilUsuarioModelForm(forms.ModelForm): # Para campos del modelo PerfilUsuario
│   │         class Meta:
│   │             model = PerfilUsuario
│   │             fields = ['departamento', 'cargo', 'telefono_extension', 'foto_perfil', 'fecha_nacimiento', 'biografia_corta']
│   │             widgets = {
│   │                 'departamento': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │                 'cargo': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │                 'telefono_extension': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │                 'foto_perfil': forms.ClearableFileInput(attrs={'class': COMMON_FILE_INPUT_CLASSES}),
│   │                 'fecha_nacimiento': forms.DateInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'type': 'date'}),
│   │                 'biografia_corta': forms.Textarea(attrs={'class': COMMON_TEXTAREA_CLASSES, 'rows': 3}),
│   │             }
│   │             labels = {
│   │                 'departamento': 'Departamento o Unidad',
│   │                 'cargo': 'Cargo / Puesto',
│   │                 'telefono_extension': 'Teléfono / Extensión',
│   │                 'foto_perfil': 'Foto de Perfil',
│   │                 'fecha_nacimiento': 'Fecha de Nacimiento',
│   │                 'biografia_corta': 'Sobre mí (breve)',
│   │             }
│   │     
│   │     # 5. Formularios para Reserva de Recursos
│   │     class TipoRecursoModelForm(forms.ModelForm):
│   │         class Meta:
│   │             model = TipoRecurso
│   │             fields = ['nombre', 'icono_fa']
│   │             widgets = {
│   │                 'nombre': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │                 'icono_fa': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'placeholder': 'ej: fas fa-projector'}),
│   │             }
│   │     
│   │     class RecursoModelForm(forms.ModelForm):
│   │         class Meta:
│   │             model = Recurso
│   │             fields = ['nombre', 'tipo_recurso', 'descripcion', 'ubicacion', 'capacidad', 'esta_activo'] # 'responsable', 'requiere_aprobacion'
│   │             widgets = {
│   │                 'nombre': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │                 'tipo_recurso': forms.Select(attrs={'class': COMMON_SELECT_CLASSES}),
│   │                 'descripcion': forms.Textarea(attrs={'class': COMMON_TEXTAREA_CLASSES, 'rows': 3}),
│   │                 'ubicacion': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │                 'capacidad': forms.NumberInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │                 'esta_activo': forms.CheckboxInput(attrs={'class': COMMON_CHECKBOX_CLASSES + ' ml-2'}),
│   │             }
│   │     
│   │     class ReservaModelForm(forms.ModelForm):
│   │         class Meta:
│   │             model = Reserva
│   │             fields = ['recurso', 'fecha_inicio', 'fecha_fin', 'motivo'] # 'estado' se maneja en la vista
│   │             widgets = {
│   │                 'recurso': forms.Select(attrs={'class': COMMON_SELECT_CLASSES}),
│   │                 'fecha_inicio': forms.DateTimeInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'type': 'datetime-local'}),
│   │                 'fecha_fin': forms.DateTimeInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES, 'type': 'datetime-local'}),
│   │                 'motivo': forms.Textarea(attrs={'class': COMMON_TEXTAREA_CLASSES, 'rows': 3, 'placeholder': 'Motivo de la reserva (opcional)'}),
│   │             }
│   │             labels = {
│   │                 'recurso': 'Recurso a Reservar',
│   │                 'fecha_inicio': 'Inicio de la Reserva',
│   │                 'fecha_fin': 'Fin de la Reserva',
│   │                 'motivo': 'Motivo',
│   │             }
│   │         
│   │         def __init__(self, *args, **kwargs):
│   │             super().__init__(*args, **kwargs)
│   │             # Mostrar solo recursos activos
│   │             self.fields['recurso'].queryset = Recurso.objects.filter(esta_activo=True)
│   │     
│   │         def clean(self):
│   │             cleaned_data = super().clean()
│   │             fecha_inicio = cleaned_data.get("fecha_inicio")
│   │             fecha_fin = cleaned_data.get("fecha_fin")
│   │             recurso = cleaned_data.get("recurso")
│   │     
│   │             if fecha_inicio and fecha_fin:
│   │                 if fecha_fin <= fecha_inicio:
│   │                     self.add_error('fecha_fin', "La fecha de fin debe ser posterior a la fecha de inicio.")
│   │                 
│   │                 if recurso:
│   │                     # Validar solapamientos (versión simplificada, puede ser más robusta)
│   │                     solapamientos = Reserva.objects.filter(
│   │                         recurso=recurso,
│   │                         estado=Reserva.EstadoReserva.APROBADA, # Solo contra aprobadas
│   │                         fecha_inicio__lt=fecha_fin, # La nueva reserva no puede empezar antes de que termine una existente
│   │                         fecha_fin__gt=fecha_inicio  # Y no puede terminar después de que empiece una existente
│   │                     )
│   │                     if self.instance and self.instance.pk: # Excluir la propia reserva si se está editando
│   │                         solapamientos = solapamientos.exclude(pk=self.instance.pk)
│   │                     
│   │                     if solapamientos.exists():
│   │                         self.add_error(None, f"El recurso '{recurso.nombre}' ya está reservado o se solapa con otra reserva en el horario solicitado.")
│   │             return cleaned_data
│   │     
│   │     # 6. Formularios para Gestión de Usuarios (Staff)
│   │     class UserEditStaffForm(forms.ModelForm): # Para que el staff edite usuarios
│   │         grupos = forms.ModelMultipleChoiceField(
│   │             queryset=Group.objects.all(), # ESTA ES LA LÍNEA PROBLEMÁTICA
│   │             widget=forms.CheckboxSelectMultiple,
│   │             required=False,
│   │             label="Grupos de Permisos"
│   │         )
│   │         class Meta:
│   │             model = User
│   │             fields = ['username', 'first_name', 'last_name', 'email', 'is_active', 'is_staff', 'grupos']
│   │             widgets = {
│   │                 'username': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │                 'first_name': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │                 'last_name': forms.TextInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │                 'email': forms.EmailInput(attrs={'class': COMMON_TEXT_INPUT_CLASSES}),
│   │                 'is_active': forms.CheckboxInput(attrs={'class': COMMON_CHECKBOX_CLASSES + ' ml-2'}),
│   │                 'is_staff': forms.CheckboxInput(attrs={'class': COMMON_CHECKBOX_CLASSES + ' ml-2'}),
│   │             }
│   │             help_texts = {
│   │                 'username': 'Requerido. 150 caracteres o menos. Letras, dígitos y @/./+/-/_ solamente.',
│   │                 'is_staff': 'Designa si el usuario puede iniciar sesión en el sitio de administración (Django Admin).',
│   │                 'is_active': 'Designa si este usuario debe ser tratado como activo. Desmarcar esto en lugar de borrar cuentas.'
│   │             }
│   │     
│   │         def __init__(self, *args, **kwargs):
│   │             super().__init__(*args, **kwargs)
│   │             if self.instance and self.instance.pk:
│   │                 self.fields['grupos'].initial = self.instance.groups.all()
│   │     
│   │         def save(self, commit=True):
│   │             user = super().save(commit=False)
│   │             if commit:
│   │                 user.save()
│   │                 if hasattr(self, 'cleaned_data'): # Asegurarse de que cleaned_data existe
│   │                     user.groups.set(self.cleaned_data['grupos'])
│   │             return user
│   │   --- FIN CONTENIDO (forms.py) ---

│   ├── migrations
│   │   ├── 0001_initial.py
│   │   │   📄 CONTENIDO DEL ARCHIVO (0001_initial.py):
│   │   │     # Generated by Django 5.2.1 on 2025-05-15 14:40
│   │   │     
│   │   │     import django.db.models.deletion
│   │   │     import django.utils.timezone
│   │   │     import intranet_core.models
│   │   │     from django.conf import settings
│   │   │     from django.db import migrations, models
│   │   │     
│   │   │     
│   │   │     class Migration(migrations.Migration):
│   │   │     
│   │   │         initial = True
│   │   │     
│   │   │         dependencies = [
│   │   │             migrations.swappable_dependency(settings.AUTH_USER_MODEL),
│   │   │         ]
│   │   │     
│   │   │         operations = [
│   │   │             migrations.CreateModel(
│   │   │                 name="Archivo",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "nombre_descriptivo",
│   │   │                         models.CharField(
│   │   │                             default="",
│   │   │                             help_text="Nombre descriptivo o título del archivo",
│   │   │                             max_length=255,
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "archivo_subido",
│   │   │                         models.FileField(
│   │   │                             blank=True,
│   │   │                             null=True,
│   │   │                             upload_to=intranet_core.models.user_directory_path,
│   │   │                             verbose_name="Archivo",
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "fecha_subida",
│   │   │                         models.DateTimeField(default=django.utils.timezone.now),
│   │   │                     ),
│   │   │                     (
│   │   │                         "subido_por",
│   │   │                         models.ForeignKey(
│   │   │                             blank=True,
│   │   │                             null=True,
│   │   │                             on_delete=django.db.models.deletion.SET_NULL,
│   │   │                             to=settings.AUTH_USER_MODEL,
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Archivo",
│   │   │                     "verbose_name_plural": "Archivos",
│   │   │                     "ordering": ["-fecha_subida"],
│   │   │                 },
│   │   │             ),
│   │   │         ]
│   │   │   --- FIN CONTENIDO (0001_initial.py) ---

│   │   ├── 0002_alter_archivo_options_and_more.py
│   │   │   📄 CONTENIDO DEL ARCHIVO (0002_alter_archivo_options_and_more.py):
│   │   │     # Generated by Django 5.2.1 on 2025-05-15 15:10
│   │   │     
│   │   │     import django.db.models.deletion
│   │   │     import django.utils.timezone
│   │   │     import intranet_core.models
│   │   │     from django.conf import settings
│   │   │     from django.db import migrations, models
│   │   │     
│   │   │     
│   │   │     class Migration(migrations.Migration):
│   │   │     
│   │   │         dependencies = [
│   │   │             ("intranet_core", "0001_initial"),
│   │   │             migrations.swappable_dependency(settings.AUTH_USER_MODEL),
│   │   │         ]
│   │   │     
│   │   │         operations = [
│   │   │             migrations.AlterModelOptions(
│   │   │                 name="archivo",
│   │   │                 options={},
│   │   │             ),
│   │   │             migrations.AddField(
│   │   │                 model_name="archivo",
│   │   │                 name="nombre_original_archivo",
│   │   │                 field=models.CharField(default="", max_length=255),
│   │   │             ),
│   │   │             migrations.AlterField(
│   │   │                 model_name="archivo",
│   │   │                 name="archivo_subido",
│   │   │                 field=models.FileField(
│   │   │                     default="",
│   │   │                     upload_to=intranet_core.models.user_directory_path,
│   │   │                     verbose_name="Archivo",
│   │   │                 ),
│   │   │                 preserve_default=False,
│   │   │             ),
│   │   │             migrations.AlterField(
│   │   │                 model_name="archivo",
│   │   │                 name="subido_por",
│   │   │                 field=models.ForeignKey(
│   │   │                     default=1,
│   │   │                     on_delete=django.db.models.deletion.CASCADE,
│   │   │                     related_name="archivos_subidos",
│   │   │                     to=settings.AUTH_USER_MODEL,
│   │   │                 ),
│   │   │                 preserve_default=False,
│   │   │             ),
│   │   │             migrations.CreateModel(
│   │   │                 name="Carpeta",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("nombre", models.CharField(max_length=100)),
│   │   │                     (
│   │   │                         "fecha_creacion",
│   │   │                         models.DateTimeField(default=django.utils.timezone.now),
│   │   │                     ),
│   │   │                     (
│   │   │                         "subido_por",
│   │   │                         models.ForeignKey(
│   │   │                             on_delete=django.db.models.deletion.CASCADE,
│   │   │                             related_name="carpetas_creadas",
│   │   │                             to=settings.AUTH_USER_MODEL,
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "ordering": ["nombre"],
│   │   │                     "unique_together": {("nombre", "subido_por")},
│   │   │                 },
│   │   │             ),
│   │   │             migrations.AddField(
│   │   │                 model_name="archivo",
│   │   │                 name="carpeta",
│   │   │                 field=models.ForeignKey(
│   │   │                     blank=True,
│   │   │                     null=True,
│   │   │                     on_delete=django.db.models.deletion.SET_NULL,
│   │   │                     related_name="archivos_contenidos",
│   │   │                     to="intranet_core.carpeta",
│   │   │                 ),
│   │   │             ),
│   │   │         ]
│   │   │   --- FIN CONTENIDO (0002_alter_archivo_options_and_more.py) ---

│   │   ├── 0003_articulowiki_notificacion.py
│   │   │   📄 CONTENIDO DEL ARCHIVO (0003_articulowiki_notificacion.py):
│   │   │     # Generated by Django 5.2.1 on 2025-05-15 15:58
│   │   │     
│   │   │     import django.db.models.deletion
│   │   │     from django.conf import settings
│   │   │     from django.db import migrations, models
│   │   │     
│   │   │     
│   │   │     class Migration(migrations.Migration):
│   │   │     
│   │   │         dependencies = [
│   │   │             ("intranet_core", "0002_alter_archivo_options_and_more"),
│   │   │             migrations.swappable_dependency(settings.AUTH_USER_MODEL),
│   │   │         ]
│   │   │     
│   │   │         operations = [
│   │   │             migrations.CreateModel(
│   │   │                 name="ArticuloWiki",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("titulo", models.CharField(max_length=255, unique=True)),
│   │   │                     (
│   │   │                         "slug",
│   │   │                         models.SlugField(
│   │   │                             blank=True,
│   │   │                             help_text="Dejar en blanco para autogenerar o especificar uno.",
│   │   │                             max_length=255,
│   │   │                             unique=True,
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "contenido",
│   │   │                         models.TextField(
│   │   │                             help_text="Contenido del artículo en formato Markdown."
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("creado_el", models.DateTimeField(auto_now_add=True)),
│   │   │                     ("actualizado_el", models.DateTimeField(auto_now=True)),
│   │   │                     (
│   │   │                         "autor",
│   │   │                         models.ForeignKey(
│   │   │                             null=True,
│   │   │                             on_delete=django.db.models.deletion.SET_NULL,
│   │   │                             related_name="articulos_wiki",
│   │   │                             to=settings.AUTH_USER_MODEL,
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Artículo de Wiki",
│   │   │                     "verbose_name_plural": "Artículos de Wiki",
│   │   │                     "ordering": ["-actualizado_el", "titulo"],
│   │   │                 },
│   │   │             ),
│   │   │             migrations.CreateModel(
│   │   │                 name="Notificacion",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("mensaje", models.TextField()),
│   │   │                     ("leida", models.BooleanField(default=False)),
│   │   │                     ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
│   │   │                     (
│   │   │                         "url_destino",
│   │   │                         models.URLField(
│   │   │                             blank=True,
│   │   │                             help_text="URL opcional a la que se dirigirá al hacer clic.",
│   │   │                             null=True,
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "destinatario",
│   │   │                         models.ForeignKey(
│   │   │                             on_delete=django.db.models.deletion.CASCADE,
│   │   │                             related_name="notificaciones",
│   │   │                             to=settings.AUTH_USER_MODEL,
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Notificación",
│   │   │                     "verbose_name_plural": "Notificaciones",
│   │   │                     "ordering": ["-fecha_creacion"],
│   │   │                 },
│   │   │             ),
│   │   │         ]
│   │   │   --- FIN CONTENIDO (0003_articulowiki_notificacion.py) ---

│   │   ├── 0004_recurso_tiporecurso_eventocalendario_formulario_and_more.py
│   │   │   📄 CONTENIDO DEL ARCHIVO (0004_recurso_tiporecurso_eventocalendario_formulario_and_more.py):
│   │   │     # Generated by Django 5.2.1 on 2025-05-15 16:05
│   │   │     
│   │   │     import django.db.models.deletion
│   │   │     import intranet_core.models
│   │   │     from django.conf import settings
│   │   │     from django.db import migrations, models
│   │   │     
│   │   │     
│   │   │     class Migration(migrations.Migration):
│   │   │     
│   │   │         dependencies = [
│   │   │             ("intranet_core", "0003_articulowiki_notificacion"),
│   │   │             migrations.swappable_dependency(settings.AUTH_USER_MODEL),
│   │   │         ]
│   │   │     
│   │   │         operations = [
│   │   │             migrations.CreateModel(
│   │   │                 name="Recurso",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("nombre", models.CharField(max_length=100)),
│   │   │                     ("descripcion", models.TextField(blank=True, null=True)),
│   │   │                     ("ubicacion", models.CharField(blank=True, max_length=150, null=True)),
│   │   │                     (
│   │   │                         "capacidad",
│   │   │                         models.PositiveIntegerField(
│   │   │                             blank=True, help_text="Ej: para salas de reuniones.", null=True
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "esta_activo",
│   │   │                         models.BooleanField(
│   │   │                             default=True,
│   │   │                             help_text="Indica si el recurso está disponible para ser reservado.",
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Recurso",
│   │   │                     "verbose_name_plural": "Recursos",
│   │   │                     "ordering": ["tipo_recurso", "nombre"],
│   │   │                 },
│   │   │             ),
│   │   │             migrations.CreateModel(
│   │   │                 name="TipoRecurso",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("nombre", models.CharField(max_length=100, unique=True)),
│   │   │                     (
│   │   │                         "icono_fa",
│   │   │                         models.CharField(
│   │   │                             blank=True,
│   │   │                             help_text="Ej: 'fas fa-building', 'fas fa-desktop'",
│   │   │                             max_length=50,
│   │   │                             null=True,
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Tipo de Recurso",
│   │   │                     "verbose_name_plural": "Tipos de Recursos",
│   │   │                 },
│   │   │             ),
│   │   │             migrations.CreateModel(
│   │   │                 name="EventoCalendario",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("titulo", models.CharField(max_length=200)),
│   │   │                     ("descripcion", models.TextField(blank=True, null=True)),
│   │   │                     ("fecha_inicio", models.DateTimeField()),
│   │   │                     (
│   │   │                         "fecha_fin",
│   │   │                         models.DateTimeField(
│   │   │                             blank=True,
│   │   │                             help_text="Dejar en blanco si es un evento de día completo o sin duración específica en hora.",
│   │   │                             null=True,
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("creado_el", models.DateTimeField(auto_now_add=True)),
│   │   │                     ("actualizado_el", models.DateTimeField(auto_now=True)),
│   │   │                     (
│   │   │                         "creado_por",
│   │   │                         models.ForeignKey(
│   │   │                             on_delete=django.db.models.deletion.CASCADE,
│   │   │                             related_name="eventos_calendario",
│   │   │                             to=settings.AUTH_USER_MODEL,
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Evento de Calendario",
│   │   │                     "verbose_name_plural": "Eventos de Calendario",
│   │   │                     "ordering": ["fecha_inicio"],
│   │   │                 },
│   │   │             ),
│   │   │             migrations.CreateModel(
│   │   │                 name="Formulario",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("titulo", models.CharField(max_length=255)),
│   │   │                     ("descripcion", models.TextField(blank=True, null=True)),
│   │   │                     ("creado_el", models.DateTimeField(auto_now_add=True)),
│   │   │                     ("activo", models.BooleanField(default=True)),
│   │   │                     (
│   │   │                         "fecha_limite",
│   │   │                         models.DateTimeField(
│   │   │                             blank=True,
│   │   │                             help_text="Opcional: Fecha y hora límite para enviar respuestas.",
│   │   │                             null=True,
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "creado_por",
│   │   │                         models.ForeignKey(
│   │   │                             on_delete=django.db.models.deletion.CASCADE,
│   │   │                             related_name="formularios_creados",
│   │   │                             to=settings.AUTH_USER_MODEL,
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Formulario",
│   │   │                     "verbose_name_plural": "Formularios",
│   │   │                     "ordering": ["-creado_el"],
│   │   │                 },
│   │   │             ),
│   │   │             migrations.CreateModel(
│   │   │                 name="CampoFormulario",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "etiqueta",
│   │   │                         models.CharField(
│   │   │                             help_text="Pregunta o título del campo.", max_length=255
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "tipo_campo",
│   │   │                         models.CharField(
│   │   │                             choices=[
│   │   │                                 ("TEXTO_CORTO", "Texto Corto"),
│   │   │                                 ("TEXTO_LARGO", "Texto Largo (Área de texto)"),
│   │   │                                 ("NUMERO", "Número"),
│   │   │                                 ("EMAIL", "Correo Electrónico"),
│   │   │                                 ("FECHA", "Fecha"),
│   │   │                                 ("HORA", "Hora"),
│   │   │                                 ("OPCION_MULTIPLE", "Opción Múltiple (una respuesta)"),
│   │   │                                 (
│   │   │                                     "CASILLAS",
│   │   │                                     "Casillas de Verificación (múltiples respuestas)",
│   │   │                                 ),
│   │   │                                 ("DESPLEGABLE", "Desplegable (una respuesta)"),
│   │   │                                 ("ARCHIVO", "Subir Archivo"),
│   │   │                             ],
│   │   │                             max_length=50,
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "ayuda_texto",
│   │   │                         models.CharField(
│   │   │                             blank=True,
│   │   │                             help_text="Texto de ayuda o descripción adicional para el campo.",
│   │   │                             max_length=255,
│   │   │                             null=True,
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("es_obligatorio", models.BooleanField(default=False)),
│   │   │                     (
│   │   │                         "orden",
│   │   │                         models.PositiveIntegerField(
│   │   │                             default=0,
│   │   │                             help_text="Orden en que aparecerá el campo en el formulario.",
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "opciones_choices",
│   │   │                         models.TextField(
│   │   │                             blank=True,
│   │   │                             help_text="Para campos de opción múltiple, casillas o desplegable. Ingrese las opciones separadas por un salto de línea (una opción por línea).",
│   │   │                             null=True,
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "formulario",
│   │   │                         models.ForeignKey(
│   │   │                             on_delete=django.db.models.deletion.CASCADE,
│   │   │                             related_name="campos",
│   │   │                             to="intranet_core.formulario",
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Campo de Formulario",
│   │   │                     "verbose_name_plural": "Campos de Formularios",
│   │   │                     "ordering": ["formulario", "orden"],
│   │   │                 },
│   │   │             ),
│   │   │             migrations.CreateModel(
│   │   │                 name="PerfilUsuario",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "departamento",
│   │   │                         models.CharField(blank=True, max_length=100, null=True),
│   │   │                     ),
│   │   │                     ("cargo", models.CharField(blank=True, max_length=100, null=True)),
│   │   │                     (
│   │   │                         "telefono_extension",
│   │   │                         models.CharField(blank=True, max_length=20, null=True),
│   │   │                     ),
│   │   │                     (
│   │   │                         "foto_perfil",
│   │   │                         models.ImageField(
│   │   │                             blank=True,
│   │   │                             default="perfiles_usuarios/default_avatar.png",
│   │   │                             null=True,
│   │   │                             upload_to=intranet_core.models.user_directory_path,
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("fecha_nacimiento", models.DateField(blank=True, null=True)),
│   │   │                     (
│   │   │                         "biografia_corta",
│   │   │                         models.TextField(
│   │   │                             blank=True,
│   │   │                             help_text="Una breve descripción sobre ti.",
│   │   │                             null=True,
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "usuario",
│   │   │                         models.OneToOneField(
│   │   │                             on_delete=django.db.models.deletion.CASCADE,
│   │   │                             related_name="perfil",
│   │   │                             to=settings.AUTH_USER_MODEL,
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Perfil de Usuario",
│   │   │                     "verbose_name_plural": "Perfiles de Usuarios",
│   │   │                 },
│   │   │             ),
│   │   │             migrations.CreateModel(
│   │   │                 name="Reserva",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("fecha_inicio", models.DateTimeField()),
│   │   │                     ("fecha_fin", models.DateTimeField()),
│   │   │                     ("motivo", models.TextField(blank=True, null=True)),
│   │   │                     (
│   │   │                         "estado",
│   │   │                         models.CharField(
│   │   │                             choices=[
│   │   │                                 ("PENDIENTE", "Pendiente de Aprobación"),
│   │   │                                 ("APROBADA", "Aprobada"),
│   │   │                                 ("RECHAZADA", "Rechazada"),
│   │   │                                 ("CANCELADA", "Cancelada por Usuario"),
│   │   │                             ],
│   │   │                             default="APROBADA",
│   │   │                             max_length=20,
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("creado_el", models.DateTimeField(auto_now_add=True)),
│   │   │                     (
│   │   │                         "recurso",
│   │   │                         models.ForeignKey(
│   │   │                             on_delete=django.db.models.deletion.CASCADE,
│   │   │                             related_name="reservas",
│   │   │                             to="intranet_core.recurso",
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "reservado_por",
│   │   │                         models.ForeignKey(
│   │   │                             on_delete=django.db.models.deletion.CASCADE,
│   │   │                             related_name="mis_reservas",
│   │   │                             to=settings.AUTH_USER_MODEL,
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Reserva",
│   │   │                     "verbose_name_plural": "Reservas",
│   │   │                     "ordering": ["fecha_inicio"],
│   │   │                 },
│   │   │             ),
│   │   │             migrations.CreateModel(
│   │   │                 name="RespuestaFormulario",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("enviado_el", models.DateTimeField(auto_now_add=True)),
│   │   │                     (
│   │   │                         "formulario",
│   │   │                         models.ForeignKey(
│   │   │                             on_delete=django.db.models.deletion.CASCADE,
│   │   │                             related_name="respuestas_recibidas",
│   │   │                             to="intranet_core.formulario",
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "respondido_por",
│   │   │                         models.ForeignKey(
│   │   │                             blank=True,
│   │   │                             null=True,
│   │   │                             on_delete=django.db.models.deletion.SET_NULL,
│   │   │                             related_name="respuestas_enviadas",
│   │   │                             to=settings.AUTH_USER_MODEL,
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Respuesta de Formulario",
│   │   │                     "verbose_name_plural": "Respuestas de Formularios",
│   │   │                     "ordering": ["-enviado_el"],
│   │   │                 },
│   │   │             ),
│   │   │             migrations.CreateModel(
│   │   │                 name="DatoRespuesta",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("valor", models.TextField(blank=True)),
│   │   │                     (
│   │   │                         "campo_formulario",
│   │   │                         models.ForeignKey(
│   │   │                             on_delete=django.db.models.deletion.CASCADE,
│   │   │                             to="intranet_core.campoformulario",
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "respuesta_formulario",
│   │   │                         models.ForeignKey(
│   │   │                             on_delete=django.db.models.deletion.CASCADE,
│   │   │                             related_name="datos",
│   │   │                             to="intranet_core.respuestaformulario",
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Dato de Respuesta",
│   │   │                     "verbose_name_plural": "Datos de Respuestas",
│   │   │                 },
│   │   │             ),
│   │   │             migrations.CreateModel(
│   │   │                 name="Tarea",
│   │   │                 fields=[
│   │   │                     (
│   │   │                         "id",
│   │   │                         models.BigAutoField(
│   │   │                             auto_created=True,
│   │   │                             primary_key=True,
│   │   │                             serialize=False,
│   │   │                             verbose_name="ID",
│   │   │                         ),
│   │   │                     ),
│   │   │                     ("titulo", models.CharField(max_length=255)),
│   │   │                     ("descripcion", models.TextField(blank=True, null=True)),
│   │   │                     ("fecha_creacion", models.DateTimeField(auto_now_add=True)),
│   │   │                     ("fecha_limite", models.DateTimeField(blank=True, null=True)),
│   │   │                     (
│   │   │                         "estado",
│   │   │                         models.CharField(
│   │   │                             choices=[
│   │   │                                 ("PENDIENTE", "Pendiente"),
│   │   │                                 ("EN_PROGRESO", "En Progreso"),
│   │   │                                 ("COMPLETADA", "Completada"),
│   │   │                                 ("CANCELADA", "Cancelada"),
│   │   │                                 ("EN_ESPERA", "En Espera"),
│   │   │                             ],
│   │   │                             default="PENDIENTE",
│   │   │                             max_length=20,
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "prioridad",
│   │   │                         models.CharField(
│   │   │                             choices=[
│   │   │                                 ("BAJA", "Baja"),
│   │   │                                 ("MEDIA", "Media"),
│   │   │                                 ("ALTA", "Alta"),
│   │   │                                 ("URGENTE", "Urgente"),
│   │   │                             ],
│   │   │                             default="MEDIA",
│   │   │                             max_length=10,
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "asignado_a",
│   │   │                         models.ForeignKey(
│   │   │                             blank=True,
│   │   │                             null=True,
│   │   │                             on_delete=django.db.models.deletion.SET_NULL,
│   │   │                             related_name="tareas_asignadas",
│   │   │                             to=settings.AUTH_USER_MODEL,
│   │   │                         ),
│   │   │                     ),
│   │   │                     (
│   │   │                         "creado_por",
│   │   │                         models.ForeignKey(
│   │   │                             on_delete=django.db.models.deletion.CASCADE,
│   │   │                             related_name="tareas_creadas",
│   │   │                             to=settings.AUTH_USER_MODEL,
│   │   │                         ),
│   │   │                     ),
│   │   │                 ],
│   │   │                 options={
│   │   │                     "verbose_name": "Tarea",
│   │   │                     "verbose_name_plural": "Tareas",
│   │   │                     "ordering": ["-prioridad", "fecha_limite", "fecha_creacion"],
│   │   │                 },
│   │   │             ),
│   │   │             migrations.AddField(
│   │   │                 model_name="recurso",
│   │   │                 name="tipo_recurso",
│   │   │                 field=models.ForeignKey(
│   │   │                     on_delete=django.db.models.deletion.PROTECT,
│   │   │                     to="intranet_core.tiporecurso",
│   │   │                 ),
│   │   │             ),
│   │   │         ]
│   │   │   --- FIN CONTENIDO (0004_recurso_tiporecurso_eventocalendario_formulario_and_more.py) ---

│   │   ├── 0005_alter_carpeta_unique_together_carpeta_carpeta_padre_and_more.py
│   │   │   📄 CONTENIDO DEL ARCHIVO (0005_alter_carpeta_unique_together_carpeta_carpeta_padre_and_more.py):
│   │   │     # Generated by Django 5.2.1 on 2025-05-15 16:19
│   │   │     
│   │   │     import django.db.models.deletion
│   │   │     from django.conf import settings
│   │   │     from django.db import migrations, models
│   │   │     
│   │   │     
│   │   │     class Migration(migrations.Migration):
│   │   │     
│   │   │         dependencies = [
│   │   │             (
│   │   │                 "intranet_core",
│   │   │                 "0004_recurso_tiporecurso_eventocalendario_formulario_and_more",
│   │   │             ),
│   │   │             migrations.swappable_dependency(settings.AUTH_USER_MODEL),
│   │   │         ]
│   │   │     
│   │   │         operations = [
│   │   │             migrations.AlterUniqueTogether(
│   │   │                 name="carpeta",
│   │   │                 unique_together=set(),
│   │   │             ),
│   │   │             migrations.AddField(
│   │   │                 model_name="carpeta",
│   │   │                 name="carpeta_padre",
│   │   │                 field=models.ForeignKey(
│   │   │                     blank=True,
│   │   │                     null=True,
│   │   │                     on_delete=django.db.models.deletion.CASCADE,
│   │   │                     related_name="subcarpetas",
│   │   │                     to="intranet_core.carpeta",
│   │   │                 ),
│   │   │             ),
│   │   │             migrations.AlterUniqueTogether(
│   │   │                 name="carpeta",
│   │   │                 unique_together={("nombre", "subido_por", "carpeta_padre")},
│   │   │             ),
│   │   │         ]
│   │   │   --- FIN CONTENIDO (0005_alter_carpeta_unique_together_carpeta_carpeta_padre_and_more.py) ---

│   │   ├── __init__.py
│   │   │   📄 (Archivo vacío)


│   ├── models.py
│   │   📄 CONTENIDO DEL ARCHIVO (models.py):
│   │     # intranet_core/models.py
│   │     import os
│   │     from django.db import models
│   │     from django.contrib.auth.models import User # Mantenido, aunque settings.AUTH_USER_MODEL es más flexible
│   │     from django.utils import timezone
│   │     from django.urls import reverse
│   │     from django.utils.text import slugify
│   │     from django.conf import settings # Importante para referenciar al modelo User de forma flexible
│   │     
│   │     # --- Funciones Auxiliares ---
│   │     def user_directory_path(instance, filename):
│   │         # instance.subido_por puede ser None si el usuario fue eliminado y se seteó a SET_NULL
│   │         # o si el modelo es diferente y 'subido_por' no es el campo de usuario.
│   │         # Ajustaremos para que sea más genérico o específico por modelo si es necesario.
│   │         # Para el modelo Archivo, instance.subido_por es correcto.
│   │         user_id_folder = "unknown_user"
│   │         if hasattr(instance, 'subido_por') and instance.subido_por:
│   │             user_id_folder = f"user_{instance.subido_por.id}"
│   │         elif hasattr(instance, 'creado_por') and instance.creado_por: # Para otros modelos
│   │             user_id_folder = f"user_{instance.creado_por.id}"
│   │         elif hasattr(instance, 'usuario') and instance.usuario: # Para PerfilUsuario
│   │             user_id_folder = f"user_{instance.usuario.id}"
│   │     
│   │         # Determinar la subcarpeta según el tipo de instancia para organizar mejor los archivos
│   │         if isinstance(instance, Archivo):
│   │             return f'archivos_gestionados/{user_id_folder}/{filename}'
│   │         elif isinstance(instance, PerfilUsuario) and 'foto_perfil' in filename: # Asumiendo que filename se pasa desde el campo
│   │             return f'perfiles_usuarios/{user_id_folder}/{filename}'
│   │         # Añadir más condiciones para otros modelos que suban archivos si es necesario
│   │         return f'uploads_generales/{user_id_folder}/{filename}'
│   │     
│   │     # --- Modelos Existentes ---
│   │     
│   │     class Carpeta(models.Model):
│   │         nombre = models.CharField(max_length=100)
│   │         subido_por = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='carpetas_creadas')
│   │         fecha_creacion = models.DateTimeField(default=timezone.now)
│   │         carpeta_padre = models.ForeignKey('self', null=True, blank=True, on_delete=models.CASCADE, related_name='subcarpetas') # DESCOMENTAR O AÑADIR
│   │     
│   │         class Meta:
│   │             # Ajustar unique_together si carpeta_padre se añade y debe ser único en ese contexto
│   │             unique_together = ('nombre', 'subido_por', 'carpeta_padre')
│   │             ordering = ['nombre']
│   │     
│   │         def __str__(self):
│   │             return self.nombre
│   │     
│   │     class Archivo(models.Model):
│   │         nombre_descriptivo = models.CharField(
│   │             max_length=255,
│   │             help_text="Nombre descriptivo o título del archivo",
│   │             default=''
│   │         )
│   │         archivo_subido = models.FileField(
│   │             upload_to=user_directory_path, # Reutilizamos la función pero podría ser más específica
│   │             verbose_name="Archivo",
│   │             null=False,
│   │             blank=False
│   │         )
│   │         nombre_original_archivo = models.CharField(max_length=255, default='')
│   │         fecha_subida = models.DateTimeField(default=timezone.now)
│   │         subido_por = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='archivos_subidos')
│   │         carpeta = models.ForeignKey(
│   │             Carpeta,
│   │             null=True,
│   │             blank=True,
│   │             on_delete=models.SET_NULL,
│   │             related_name='archivos_contenidos'
│   │         )
│   │     
│   │         def __str__(self):
│   │             return self.nombre_descriptivo or self.nombre_original_archivo
│   │     
│   │         def delete(self, *args, **kwargs):
│   │             if self.archivo_subido and hasattr(self.archivo_subido, 'path'):
│   │                 file_path = self.archivo_subido.path
│   │                 if os.path.isfile(file_path):
│   │                     try:
│   │                         os.remove(file_path)
│   │                     except OSError as e:
│   │                         print(f"Error al eliminar el archivo físico {file_path}: {e}")
│   │                 else:
│   │                     print(f"Advertencia: El archivo físico no se encontró en {file_path} para el objeto Archivo ID {self.id}")
│   │             super().delete(*args, **kwargs)
│   │     
│   │         def get_file_extension(self):
│   │             if self.archivo_subido and self.archivo_subido.name:
│   │                 name, extension = os.path.splitext(self.archivo_subido.name)
│   │                 return extension.lower()
│   │             return ''
│   │     
│   │         def is_viewable_in_browser(self):
│   │             viewable_extensions = [
│   │                 '.txt', '.md', '.py', '.js', '.json', '.css', '.html', '.xml',
│   │                 '.jpg', '.jpeg', '.png', '.gif', '.svg', '.webp',
│   │                 '.pdf'
│   │             ]
│   │             return self.get_file_extension() in viewable_extensions
│   │     
│   │         def get_view_url(self):
│   │             return reverse('intranet_core:ver_archivo', args=[self.id])
│   │     
│   │         def get_edit_url(self):
│   │             return reverse('intranet_core:editar_archivo', args=[self.id])
│   │     
│   │     class ArticuloWiki(models.Model):
│   │         titulo = models.CharField(max_length=255, unique=True)
│   │         slug = models.SlugField(max_length=255, unique=True, blank=True, help_text="Dejar en blanco para autogenerar o especificar uno.")
│   │         contenido = models.TextField(help_text="Contenido del artículo en formato Markdown.")
│   │         autor = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, related_name='articulos_wiki')
│   │         creado_el = models.DateTimeField(auto_now_add=True)
│   │         actualizado_el = models.DateTimeField(auto_now=True)
│   │     
│   │         class Meta:
│   │             ordering = ['-actualizado_el', 'titulo']
│   │             verbose_name = "Artículo de Wiki"
│   │             verbose_name_plural = "Artículos de Wiki"
│   │     
│   │         def __str__(self):
│   │             return self.titulo
│   │     
│   │         def save(self, *args, **kwargs):
│   │             original_slug_base = slugify(self.titulo)
│   │             if not self.slug or (hasattr(self, '_original_titulo') and self._original_titulo != self.titulo and self.slug == slugify(self._original_titulo)):
│   │                 self.slug = original_slug_base
│   │     
│   │             final_slug = self.slug
│   │             counter = 1
│   │             while ArticuloWiki.objects.filter(slug=final_slug).exclude(pk=self.pk).exists():
│   │                 final_slug = f"{original_slug_base}-{counter}"
│   │                 counter += 1
│   │             self.slug = final_slug
│   │             
│   │             self._original_titulo = self.titulo
│   │             super().save(*args, **kwargs)
│   │     
│   │         def get_absolute_url(self):
│   │             return reverse('intranet_core:wiki_articulo_detalle', kwargs={'slug': self.slug})
│   │     
│   │         @classmethod
│   │         def from_db(cls, db, field_names, values):
│   │             instance = super().from_db(db, field_names, values)
│   │             instance._original_titulo = instance.titulo
│   │             return instance
│   │     
│   │     class Notificacion(models.Model):
│   │         destinatario = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='notificaciones')
│   │         mensaje = models.TextField()
│   │         leida = models.BooleanField(default=False)
│   │         fecha_creacion = models.DateTimeField(auto_now_add=True)
│   │         url_destino = models.URLField(blank=True, null=True, help_text="URL opcional a la que se dirigirá al hacer clic.")
│   │         # tipo_notificacion = models.CharField(max_length=50, blank=True, null=True) # Opcional para categorizar
│   │     
│   │         class Meta:
│   │             ordering = ['-fecha_creacion']
│   │             verbose_name = "Notificación"
│   │             verbose_name_plural = "Notificaciones"
│   │     
│   │         def __str__(self):
│   │             return f"Notificación para {self.destinatario.username}: {self.mensaje[:50]}"
│   │     
│   │     # --- Nuevos Modelos para Funcionalidades Faltantes ---
│   │     
│   │     # 1. Modelos para el Módulo de Formularios
│   │     class Formulario(models.Model):
│   │         titulo = models.CharField(max_length=255)
│   │         descripcion = models.TextField(blank=True, null=True)
│   │         creado_por = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='formularios_creados')
│   │         creado_el = models.DateTimeField(auto_now_add=True)
│   │         activo = models.BooleanField(default=True)
│   │         fecha_limite = models.DateTimeField(blank=True, null=True, help_text="Opcional: Fecha y hora límite para enviar respuestas.")
│   │         # permite_anonimo = models.BooleanField(default=False, help_text="Permitir respuestas sin iniciar sesión.")
│   │         # permite_multiples_respuestas_usuario = models.BooleanField(default=False, help_text="Permitir que un usuario envíe múltiples respuestas.")
│   │     
│   │     
│   │         class Meta:
│   │             verbose_name = "Formulario"
│   │             verbose_name_plural = "Formularios"
│   │             ordering = ['-creado_el']
│   │     
│   │         def __str__(self):
│   │             return self.titulo
│   │     
│   │         def get_absolute_url(self): # Ejemplo de URL, ajusta según tus urls.py
│   │             return reverse('intranet_core:llenar_formulario', kwargs={'formulario_id': self.id})
│   │     
│   │     class CampoFormulario(models.Model):
│   │         class TipoCampo(models.TextChoices):
│   │             TEXTO_CORTO = 'TEXTO_CORTO', 'Texto Corto'
│   │             TEXTO_LARGO = 'TEXTO_LARGO', 'Texto Largo (Área de texto)'
│   │             NUMERO = 'NUMERO', 'Número'
│   │             EMAIL = 'EMAIL', 'Correo Electrónico'
│   │             FECHA = 'FECHA', 'Fecha'
│   │             HORA = 'HORA', 'Hora'
│   │             OPCION_MULTIPLE = 'OPCION_MULTIPLE', 'Opción Múltiple (una respuesta)'
│   │             CASILLAS = 'CASILLAS', 'Casillas de Verificación (múltiples respuestas)'
│   │             DESPLEGABLE = 'DESPLEGABLE', 'Desplegable (una respuesta)'
│   │             ARCHIVO = 'ARCHIVO', 'Subir Archivo' # Considerar cómo manejar estos archivos
│   │             # Separador/Texto informativo, etc.
│   │     
│   │         formulario = models.ForeignKey(Formulario, on_delete=models.CASCADE, related_name='campos')
│   │         etiqueta = models.CharField(max_length=255, help_text="Pregunta o título del campo.")
│   │         tipo_campo = models.CharField(max_length=50, choices=TipoCampo.choices)
│   │         ayuda_texto = models.CharField(max_length=255, blank=True, null=True, help_text="Texto de ayuda o descripción adicional para el campo.")
│   │         es_obligatorio = models.BooleanField(default=False)
│   │         orden = models.PositiveIntegerField(default=0, help_text="Orden en que aparecerá el campo en el formulario.")
│   │         opciones_choices = models.TextField(blank=True, null=True, help_text="Para campos de opción múltiple, casillas o desplegable. Ingrese las opciones separadas por un salto de línea (una opción por línea).")
│   │     
│   │         class Meta:
│   │             verbose_name = "Campo de Formulario"
│   │             verbose_name_plural = "Campos de Formularios"
│   │             ordering = ['formulario', 'orden']
│   │     
│   │         def __str__(self):
│   │             return f"{self.formulario.titulo} - {self.etiqueta} ({self.get_tipo_campo_display()})"
│   │     
│   │         def get_opciones_lista(self):
│   │             if self.opciones_choices and self.tipo_campo in [self.TipoCampo.OPCION_MULTIPLE, self.TipoCampo.CASILLAS, self.TipoCampo.DESPLEGABLE]:
│   │                 return [opt.strip() for opt in self.opciones_choices.splitlines() if opt.strip()]
│   │             return []
│   │     
│   │     class RespuestaFormulario(models.Model):
│   │         formulario = models.ForeignKey(Formulario, on_delete=models.CASCADE, related_name='respuestas_recibidas')
│   │         respondido_por = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='respuestas_enviadas') # SET_NULL si el usuario es eliminado
│   │         # ip_address = models.GenericIPAddressField(blank=True, null=True) # Si se permiten respuestas anónimas
│   │         enviado_el = models.DateTimeField(auto_now_add=True)
│   │     
│   │         class Meta:
│   │             verbose_name = "Respuesta de Formulario"
│   │             verbose_name_plural = "Respuestas de Formularios"
│   │             ordering = ['-enviado_el']
│   │     
│   │         def __str__(self):
│   │             usuario = self.respondido_por.username if self.respondido_por else "Anónimo"
│   │             return f"Respuesta de {usuario} para '{self.formulario.titulo}' el {self.enviado_el.strftime('%d/%m/%Y %H:%M')}"
│   │     
│   │     class DatoRespuesta(models.Model):
│   │         respuesta_formulario = models.ForeignKey(RespuestaFormulario, on_delete=models.CASCADE, related_name='datos')
│   │         campo_formulario = models.ForeignKey(CampoFormulario, on_delete=models.CASCADE) # Considerar on_delete=models.PROTECT o SET_NULL si no se deben borrar datos si se borra un campo
│   │         valor = models.TextField(blank=True) # Para múltiples opciones en casillas, se pueden guardar separadas por un delimitador especial
│   │         # archivo_adjunto = models.FileField(upload_to='respuestas_formularios_archivos/', blank=True, null=True) # Si el campo es de tipo ARCHIVO
│   │     
│   │         class Meta:
│   │             verbose_name = "Dato de Respuesta"
│   │             verbose_name_plural = "Datos de Respuestas"
│   │     
│   │         def __str__(self):
│   │             return f"Para '{self.campo_formulario.etiqueta}': {self.valor[:50]}"
│   │     
│   │     # 2. Modelo para el Módulo de Calendario
│   │     class EventoCalendario(models.Model):
│   │         titulo = models.CharField(max_length=200)
│   │         descripcion = models.TextField(blank=True, null=True)
│   │         fecha_inicio = models.DateTimeField()
│   │         fecha_fin = models.DateTimeField(blank=True, null=True, help_text="Dejar en blanco si es un evento de día completo o sin duración específica en hora.")
│   │         creado_por = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='eventos_calendario')
│   │         creado_el = models.DateTimeField(auto_now_add=True)
│   │         actualizado_el = models.DateTimeField(auto_now=True)
│   │         # color_evento = models.CharField(max_length=7, blank=True, null=True, help_text="Color en formato hexadecimal, ej: #FF5733") # Para FullCalendar
│   │         # recurrencia_regla = models.CharField(max_length=255, blank=True, null=True, help_text="Regla de recurrencia (ej. iCalendar RRULE)")
│   │         # participantes = models.ManyToManyField(settings.AUTH_USER_MODEL, blank=True, related_name='eventos_participa')
│   │     
│   │         class Meta:
│   │             verbose_name = "Evento de Calendario"
│   │             verbose_name_plural = "Eventos de Calendario"
│   │             ordering = ['fecha_inicio']
│   │     
│   │         def __str__(self):
│   │             return self.titulo
│   │     
│   │     # 3. Modelo para el Módulo de Responsabilidades (Gestión de Tareas)
│   │     class Tarea(models.Model):
│   │         class EstadoTarea(models.TextChoices):
│   │             PENDIENTE = 'PENDIENTE', 'Pendiente'
│   │             EN_PROGRESO = 'EN_PROGRESO', 'En Progreso'
│   │             COMPLETADA = 'COMPLETADA', 'Completada'
│   │             CANCELADA = 'CANCELADA', 'Cancelada'
│   │             EN_ESPERA = 'EN_ESPERA', 'En Espera'
│   │     
│   │         class PrioridadTarea(models.TextChoices):
│   │             BAJA = 'BAJA', 'Baja'
│   │             MEDIA = 'MEDIA', 'Media'
│   │             ALTA = 'ALTA', 'Alta'
│   │             URGENTE = 'URGENTE', 'Urgente'
│   │     
│   │         titulo = models.CharField(max_length=255)
│   │         descripcion = models.TextField(blank=True, null=True)
│   │         asignado_a = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='tareas_asignadas')
│   │         creado_por = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='tareas_creadas')
│   │         fecha_creacion = models.DateTimeField(auto_now_add=True)
│   │         fecha_limite = models.DateTimeField(blank=True, null=True)
│   │         estado = models.CharField(max_length=20, choices=EstadoTarea.choices, default=EstadoTarea.PENDIENTE)
│   │         prioridad = models.CharField(max_length=10, choices=PrioridadTarea.choices, default=PrioridadTarea.MEDIA)
│   │         # proyecto = models.ForeignKey('Proyecto', on_delete=models.SET_NULL, null=True, blank=True) # Si tienes un modelo Proyecto
│   │     
│   │         class Meta:
│   │             verbose_name = "Tarea"
│   │             verbose_name_plural = "Tareas"
│   │             ordering = ['-prioridad', 'fecha_limite', 'fecha_creacion']
│   │     
│   │         def __str__(self):
│   │             return self.titulo
│   │     
│   │     # 4. Modelo para Perfil de Usuario (Opcional, para Directorio y Perfil)
│   │     class PerfilUsuario(models.Model):
│   │         usuario = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='perfil')
│   │         departamento = models.CharField(max_length=100, blank=True, null=True)
│   │         cargo = models.CharField(max_length=100, blank=True, null=True)
│   │         telefono_extension = models.CharField(max_length=20, blank=True, null=True)
│   │         foto_perfil = models.ImageField(upload_to=user_directory_path, null=True, blank=True, default='perfiles_usuarios/default_avatar.png')
│   │         fecha_nacimiento = models.DateField(null=True, blank=True)
│   │         biografia_corta = models.TextField(blank=True, null=True, help_text="Una breve descripción sobre ti.")
│   │     
│   │     
│   │         class Meta:
│   │             verbose_name = "Perfil de Usuario"
│   │             verbose_name_plural = "Perfiles de Usuarios"
│   │     
│   │         def __str__(self):
│   │             return f"Perfil de {self.usuario.username}"
│   │     
│   │         # Podrías usar signals para crear PerfilUsuario automáticamente cuando se crea un User.
│   │         # from django.db.models.signals import post_save
│   │         # from django.dispatch import receiver
│   │         # @receiver(post_save, sender=settings.AUTH_USER_MODEL)
│   │         # def create_or_update_user_profile(sender, instance, created, **kwargs):
│   │         #     if created:
│   │         #         PerfilUsuario.objects.create(usuario=instance)
│   │         #     # instance.perfilusuario.save() # Si es una actualización y quieres guardar también el perfil
│   │     
│   │     # 5. Modelos para Reserva de Recursos
│   │     class TipoRecurso(models.Model):
│   │         nombre = models.CharField(max_length=100, unique=True)
│   │         icono_fa = models.CharField(max_length=50, blank=True, null=True, help_text="Ej: 'fas fa-building', 'fas fa-desktop'") # Para mostrar un icono
│   │     
│   │         class Meta:
│   │             verbose_name = "Tipo de Recurso"
│   │             verbose_name_plural = "Tipos de Recursos"
│   │     
│   │         def __str__(self):
│   │             return self.nombre
│   │     
│   │     class Recurso(models.Model):
│   │         nombre = models.CharField(max_length=100)
│   │         tipo_recurso = models.ForeignKey(TipoRecurso, on_delete=models.PROTECT) # Evitar borrar tipo si hay recursos asociados
│   │         descripcion = models.TextField(blank=True, null=True)
│   │         ubicacion = models.CharField(max_length=150, blank=True, null=True)
│   │         capacidad = models.PositiveIntegerField(blank=True, null=True, help_text="Ej: para salas de reuniones.")
│   │         esta_activo = models.BooleanField(default=True, help_text="Indica si el recurso está disponible para ser reservado.")
│   │         # responsable = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, help_text="Usuario responsable del recurso.")
│   │         # requiere_aprobacion = models.BooleanField(default=False, help_text="Si las reservas para este recurso necesitan aprobación.")
│   │     
│   │     
│   │         class Meta:
│   │             verbose_name = "Recurso"
│   │             verbose_name_plural = "Recursos"
│   │             ordering = ['tipo_recurso', 'nombre']
│   │     
│   │         def __str__(self):
│   │             return f"{self.nombre} ({self.tipo_recurso.nombre})"
│   │     
│   │     class Reserva(models.Model):
│   │         class EstadoReserva(models.TextChoices):
│   │             PENDIENTE = 'PENDIENTE', 'Pendiente de Aprobación'
│   │             APROBADA = 'APROBADA', 'Aprobada'
│   │             RECHAZADA = 'RECHAZADA', 'Rechazada'
│   │             CANCELADA = 'CANCELADA', 'Cancelada por Usuario'
│   │     
│   │         recurso = models.ForeignKey(Recurso, on_delete=models.CASCADE, related_name='reservas')
│   │         reservado_por = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='mis_reservas')
│   │         fecha_inicio = models.DateTimeField()
│   │         fecha_fin = models.DateTimeField()
│   │         motivo = models.TextField(blank=True, null=True)
│   │         estado = models.CharField(max_length=20, choices=EstadoReserva.choices, default=EstadoReserva.APROBADA) # Cambiar si se implementa flujo de aprobación
│   │         # aprobado_por = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True, related_name='reservas_aprobadas')
│   │         # fecha_aprobacion = models.DateTimeField(null=True, blank=True)
│   │         creado_el = models.DateTimeField(auto_now_add=True)
│   │     
│   │     
│   │         class Meta:
│   │             verbose_name = "Reserva"
│   │             verbose_name_plural = "Reservas"
│   │             ordering = ['fecha_inicio']
│   │             # unique_together = ('recurso', 'fecha_inicio', 'fecha_fin') # Considerar para evitar solapamientos a nivel BD, aunque es mejor validar en el form/view
│   │     
│   │         def __str__(self):
│   │             return f"Reserva de '{self.recurso.nombre}' por {self.reservado_por.username} ({self.fecha_inicio.strftime('%d/%m %H:%M')} - {self.fecha_fin.strftime('%d/%m %H:%M')})"
│   │     
│   │         # Aquí podrías añadir un clean() method para validar que fecha_fin > fecha_inicio
│   │         # y para validar solapamientos de reservas para el mismo recurso.
│   │         # Ejemplo básico (se puede mejorar y hacer más robusto):
│   │         # def clean(self):
│   │         #     from django.core.exceptions import ValidationError
│   │         #     if self.fecha_inicio and self.fecha_fin and self.fecha_inicio >= self.fecha_fin:
│   │         #         raise ValidationError("La fecha de fin debe ser posterior a la fecha de inicio.")
│   │         #
│   │         #     # Chequear solapamientos
│   │         #     solapamientos = Reserva.objects.filter(
│   │         #         recurso=self.recurso,
│   │         #         fecha_inicio__lt=self.fecha_fin,
│   │         #         fecha_fin__gt=self.fecha_inicio
│   │         #     ).exclude(pk=self.pk) # Excluir la propia reserva si se está editando
│   │         #
│   │         #     if solapamientos.exists():
│   │         #         raise ValidationError(f"El recurso '{self.recurso.nombre}' ya está reservado en el horario solicitado.")
│   │   --- FIN CONTENIDO (models.py) ---

│   ├── tests.py
│   │   📄 (Archivo vacío)

│   ├── urls.py
│   │   📄 CONTENIDO DEL ARCHIVO (urls.py):
│   │     # /workspaces/intranet_gem/intranet_core/urls.py
│   │     from django.urls import path
│   │     from . import views # Asegúrate que esto importa tus vistas correctamente
│   │     
│   │     app_name = 'intranet_core'
│   │     
│   │     urlpatterns = [
│   │         path('', views.dashboard_view, name='dashboard'),
│   │     
│   │         # Gestión de Archivos
│   │         path('archivos/', views.carga_archivos_view, name='carga_archivos'),
│   │         path('archivos/carpeta/<int:carpeta_id>/', views.carga_archivos_view, name='carga_archivos_carpeta'),
│   │         path('archivos/ver/<int:archivo_id>/', views.ver_archivo_view, name='ver_archivo'),
│   │         path('archivos/editar/<int:archivo_id>/', views.editar_archivo_view, name='editar_archivo'),
│   │     
│   │         # Formularios Dinámicos
│   │         path('formularios/', views.formularios_view, name='formularios'),
│   │         path('formularios/crear/', views.formulario_crear_view, name='formulario_crear'),
│   │         path('formularios/<int:formulario_id>/disenar/', views.formulario_disenar_view, name='formulario_disenar'),
│   │         path('formularios/<int:formulario_id>/llenar/', views.formulario_llenar_view, name='formulario_llenar'),
│   │         path('formularios/<int:formulario_id>/respuestas/', views.formulario_respuestas_view, name='formulario_respuestas'),
│   │         # path('formularios/<int:formulario_id>/editar/', views.formulario_editar_view, name='formulario_editar_config'),
│   │         # path('formularios/<int:formulario_id>/eliminar/', views.formulario_eliminar_view, name='formulario_eliminar'),
│   │     
│   │         # Calendario de Actividades
│   │         path('calendario/', views.calendario_view, name='calendario'),
│   │         path('calendario/eventos.json/', views.calendario_eventos_json_view, name='calendario_eventos_json'),
│   │         path('calendario/evento/crear/', views.evento_calendario_crear_view, name='evento_calendario_crear'),
│   │         path('calendario/evento/<int:evento_id>/', views.evento_calendario_detalle_view, name='evento_calendario_detalle'),
│   │         path('calendario/evento/<int:evento_id>/editar/', views.evento_calendario_editar_view, name='evento_calendario_editar'),
│   │         path('calendario/evento/<int:evento_id>/eliminar/', views.evento_calendario_eliminar_view, name='evento_calendario_eliminar'),
│   │     
│   │         # Gestión de Responsabilidades (Tareas)
│   │         path('responsabilidades/', views.responsabilidades_view, name='responsabilidades'),
│   │         path('responsabilidades/crear/', views.tarea_crear_view, name='tarea_crear'),
│   │         path('responsabilidades/<int:tarea_id>/', views.tarea_detalle_view, name='tarea_detalle'),
│   │         path('responsabilidades/<int:tarea_id>/editar/', views.tarea_editar_view, name='tarea_editar'),
│   │         path('responsabilidades/<int:tarea_id>/eliminar/', views.tarea_eliminar_view, name='tarea_eliminar'),
│   │     
│   │         # Directorio de Usuarios
│   │         path('directorio/', views.directorio_view, name='directorio'),
│   │         path('directorio/usuario/<str:username>/', views.directorio_usuario_detalle_view, name='directorio_usuario_detalle'),
│   │     
│   │         # Reserva de Recursos
│   │         path('reservas/', views.reservas_view, name='reservas'),
│   │         path('reservas/eventos.json/', views.reservas_eventos_json_view, name='reservas_eventos_json'),
│   │         path('reservas/crear/', views.reserva_crear_view, name='reserva_crear'),
│   │         path('reservas/crear/<int:recurso_id>/', views.reserva_crear_view, name='reserva_crear_para_recurso'),
│   │     
│   │         # Wiki
│   │         path('wiki/', views.wiki_view, name='wiki'),
│   │         path('wiki/crear/', views.wiki_crear_articulo_view, name='wiki_crear_articulo'),
│   │         path('wiki/<slug:slug>/', views.wiki_articulo_detalle_view, name='wiki_articulo_detalle'),
│   │         path('wiki/<slug:slug>/editar/', views.wiki_editar_articulo_view, name='wiki_editar_articulo'),
│   │         path('wiki/<slug:slug>/eliminar/', views.wiki_eliminar_articulo_view, name='wiki_eliminar_articulo'),
│   │     
│   │         # Notificaciones
│   │         path('notificaciones/', views.notificaciones_page_view, name='notificaciones_page'),
│   │         path('notificaciones/marcar-leida/<int:notificacion_id>/', views.marcar_notificacion_leida_view, name='marcar_notificacion_leida'),
│   │         path('notificaciones/marcar-todas-leidas/', views.marcar_todas_notificaciones_leidas_view, name='marcar_todas_notificaciones_leidas'),
│   │     
│   │         # Perfil y Configuración de Usuario
│   │         path('perfil/', views.perfil_view, name='perfil'),
│   │         path('configuracion/', views.configuracion_view, name='configuracion'),
│   │     
│   │         # Gestión de Usuarios (Staff)
│   │         path('gestion-usuarios/', views.usuarios_gestion_view, name='usuarios_gestion'),
│   │         path('gestion-usuarios/<int:user_id>/editar/', views.usuario_gestion_editar_view, name='usuario_gestion_editar'),
│   │     ]
│   │   --- FIN CONTENIDO (urls.py) ---

│   └── views.py
│       📄 CONTENIDO DEL ARCHIVO (views.py):
│         # intranet_core/views.py
│         import os
│         import mimetypes
│         from django.shortcuts import render, redirect, get_object_or_404
│         from django.contrib.auth.decorators import login_required, user_passes_test
│         from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin # Para Class-Based Views
│         from django.views import View # Para Class-Based Views
│         from django.contrib import messages
│         from django.http import JsonResponse, FileResponse, HttpResponse, Http404, HttpResponseForbidden, HttpResponseRedirect
│         from django.urls import reverse, reverse_lazy
│         from django.db.models import Q
│         from django.utils import timezone # Para manejo de fechas
│         from django.contrib.auth import update_session_auth_hash # Para cambio de contraseña
│         from django.contrib.auth.forms import PasswordChangeForm
│         from django.contrib.auth.models import User, Group # Para gestión de usuarios
│         from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
│         from django.forms import modelformset_factory # Cambiamos a modelformset_factory para mejor manejo de instancias
│         from django.shortcuts import render, redirect, get_object_or_404
│         import json
│         # Modelos
│         from .models import (
│             Archivo, Carpeta, ArticuloWiki, Notificacion,
│             Formulario, CampoFormulario, RespuestaFormulario, DatoRespuesta,
│             EventoCalendario,
│             Tarea,
│             PerfilUsuario,
│             TipoRecurso, Recurso, Reserva
│         )
│         
│         # Formularios
│         from .forms import (
│             ArchivoForm, CarpetaForm, ArchivoEditForm, ArticuloWikiForm,
│             FormularioModelForm, CampoFormularioModelForm,
│             EventoCalendarioModelForm,
│             TareaModelForm,
│             PerfilUsuarioModelForm, UserUpdateForm, # Para perfil de usuario
│             ReservaModelForm, UserEditStaffForm # UserEditStaffForm añadido
│         )
│         from django.forms import formset_factory, modelformset_factory # Para CampoFormulario
│         
│         # --- Funciones Auxiliares ---
│         def es_staff(user):
│             return user.is_staff
│         
│         def crear_notificacion_global(usuario_destinatario, mensaje, url_destino_nombre=None, url_destino_args=None, url_destino_kwargs=None):
│             url = None
│             if url_destino_nombre:
│                 try:
│                     # Asegurar que args y kwargs sean iterables o diccionarios, incluso si son None
│                     args_to_pass = url_destino_args if url_destino_args is not None else []
│                     kwargs_to_pass = url_destino_kwargs if url_destino_kwargs is not None else {}
│                     url = reverse(url_destino_nombre, args=args_to_pass, kwargs=kwargs_to_pass)
│                 except Exception as e:
│                     print(f"Error al generar URL para notificación: {e}")
│             Notificacion.objects.create(destinatario=usuario_destinatario, mensaje=mensaje, url_destino=url)
│         
│         @login_required
│         def dashboard_view(request):
│             numero_total_archivos = Archivo.objects.filter(subido_por=request.user).count()
│             numero_total_carpetas = Carpeta.objects.filter(subido_por=request.user).count()
│             notificaciones_no_leidas_count = Notificacion.objects.filter(destinatario=request.user, leida=False).count()
│             
│             # Nuevas estadísticas (ejemplos)
│             tareas_pendientes_count = Tarea.objects.filter(asignado_a=request.user, estado__in=[Tarea.EstadoTarea.PENDIENTE, Tarea.EstadoTarea.EN_PROGRESO]).count()
│             eventos_proximos_count = EventoCalendario.objects.filter(
│                 Q(creado_por=request.user) | Q(participantes=request.user) if hasattr(EventoCalendario, 'participantes') else Q(creado_por=request.user), # Ajustar si tienes M2M 'participantes'
│                 fecha_inicio__gte=timezone.now(),
│                 fecha_inicio__lte=timezone.now() + timezone.timedelta(days=7)
│             ).count()
│         
│         
│             context = {
│                 'page_title_for_header': 'Panel Principal',
│                 'active_nav': 'dashboard',
│                 'numero_archivos_totales': numero_total_archivos,
│                 'numero_carpetas_totales': numero_total_carpetas,
│                 'numero_formularios_creados': Formulario.objects.filter(creado_por=request.user).count(), # Actualizado
│                 'numero_notificaciones_nuevas': notificaciones_no_leidas_count,
│                 'numero_responsabilidades': tareas_pendientes_count, # Actualizado
│                 'eventos_proximos_count': eventos_proximos_count,
│             }
│             return render(request, 'intranet_core/dashboard.html', context)
│         
│         @login_required
│         def carga_archivos_view(request, carpeta_id=None): # Modificado para aceptar carpeta_id
│             form_carga_archivo_instance = ArchivoForm(user=request.user)
│             form_crear_carpeta_instance = CarpetaForm()
│             
│             current_folder = None
│             if carpeta_id:
│                 current_folder = get_object_or_404(Carpeta, id=carpeta_id, subido_por=request.user)
│         
│             if request.method == 'POST':
│                 action = request.POST.get('action')
│                 is_ajax = request.headers.get('X-Requested-With') == 'XMLHttpRequest'
│         
│                 if action == 'create_folder':
│                     form_crear_carpeta_instance = CarpetaForm(request.POST)
│                     if form_crear_carpeta_instance.is_valid():
│                         nueva_carpeta = form_crear_carpeta_instance.save(commit=False)
│                         nueva_carpeta.subido_por = request.user
│                         # nueva_carpeta.carpeta_padre = current_folder # Si implementas subcarpetas
│                         try:
│                             nueva_carpeta.save()
│                             messages.success(request, f"Carpeta '{nueva_carpeta.nombre}' creada exitosamente.")
│                             # Redirigir a la carpeta actual si existe, sino a la raíz
│                             return redirect('intranet_core:carga_archivos', carpeta_id=current_folder.id) if current_folder else redirect('intranet_core:carga_archivos')
│                         except Exception as e: # Captura IntegrityError por unique_together
│                             messages.error(request, f"Error al crear la carpeta: El nombre '{nueva_carpeta.nombre}' ya existe en esta ubicación o hubo otro problema.")
│                     else:
│                         messages.error(request, "No se pudo crear la carpeta. Revisa los errores en el formulario.")
│                 
│                 elif action == 'delete_file':
│                     file_id_to_delete = request.POST.get('file_id')
│                     try:
│                         archivo_a_eliminar = Archivo.objects.get(id=file_id_to_delete, subido_por=request.user)
│                         nombre_archivo_eliminado = archivo_a_eliminar.nombre_descriptivo or archivo_a_eliminar.nombre_original_archivo
│                         archivo_a_eliminar.delete()
│                         if is_ajax:
│                             return JsonResponse({
│                                 'status': 'success',
│                                 'message': f"Archivo '{nombre_archivo_eliminado}' eliminado correctamente.",
│                                 'file_id': file_id_to_delete
│                             })
│                         messages.success(request, f"Archivo '{nombre_archivo_eliminado}' eliminado correctamente.")
│                     except Archivo.DoesNotExist:
│                         if is_ajax:
│                             return JsonResponse({'status': 'error', 'message': "Archivo no encontrado o sin permiso para eliminar."}, status=404)
│                         messages.error(request, "Archivo no encontrado o sin permiso para eliminar.")
│                     except Exception as e:
│                         error_message_user = "Ocurrió un error al intentar eliminar el archivo."
│                         print(f"Error en delete_file: {str(e)}")
│                         if is_ajax:
│                             return JsonResponse({'status': 'error', 'message': error_message_user}, status=500)
│                         messages.error(request, error_message_user)
│                     
│                     if not is_ajax: # Redirigir a la carpeta actual si existe, sino a la raíz
│                         return redirect('intranet_core:carga_archivos', carpeta_id=current_folder.id) if current_folder else redirect('intranet_core:carga_archivos')
│         
│                 else: # Asumimos subida de archivo
│                     form_carga_archivo_instance = ArchivoForm(request.POST, request.FILES, user=request.user)
│                     if form_carga_archivo_instance.is_valid():
│                         archivo_instancia = form_carga_archivo_instance.save(commit=False)
│                         archivo_instancia.subido_por = request.user
│                         if request.FILES.get('archivo_subido'):
│                             archivo_instancia.nombre_original_archivo = request.FILES['archivo_subido'].name
│                         
│                         # Asignar a la carpeta actual si estamos dentro de una
│                         if current_folder:
│                             archivo_instancia.carpeta = current_folder
│                         # Si no, se asigna a la carpeta seleccionada en el formulario, o a la raíz si no se selecciona ninguna.
│                         # Esto es manejado por el 'empty_label' del ArchivoForm y la lógica del SET_NULL
│         
│                         archivo_instancia.save()
│                         messages.success(request, f"Archivo '{archivo_instancia.nombre_descriptivo or archivo_instancia.nombre_original_archivo}' subido exitosamente.")
│                         return redirect('intranet_core:carga_archivos', carpeta_id=current_folder.id) if current_folder else redirect('intranet_core:carga_archivos')
│                     else:
│                         messages.error(request, "Error al subir el archivo. Por favor, revise los campos.")
│                         
│             # Filtrar carpetas y archivos según la carpeta actual
│             if current_folder:
│                 carpetas_a_mostrar = Carpeta.objects.filter(subido_por=request.user, carpeta_padre=current_folder).order_by('nombre') # Si usas carpeta_padre
│                 archivos_a_mostrar = Archivo.objects.filter(subido_por=request.user, carpeta=current_folder).order_by('-fecha_subida')
│             else: # Raíz
│                 carpetas_a_mostrar = Carpeta.objects.filter(subido_por=request.user, carpeta_padre__isnull=True).order_by('nombre') # Si usas carpeta_padre
│                 archivos_a_mostrar = Archivo.objects.filter(subido_por=request.user, carpeta__isnull=True).order_by('-fecha_subida')
│         
│             # Breadcrumbs (ejemplo básico)
│             breadcrumbs = []
│             temp_folder = current_folder
│             while temp_folder:
│                 breadcrumbs.insert(0, {'nombre': temp_folder.nombre, 'id': temp_folder.id})
│                 temp_folder = temp_folder.carpeta_padre # Si usas carpeta_padre
│             
│             context = {
│                 'page_title_for_header': f'Gestor de Archivos{" / " + current_folder.nombre if current_folder else ""}',
│                 'active_nav': 'archivos',
│                 'form_carga_archivo': form_carga_archivo_instance,
│                 'form_crear_carpeta': form_crear_carpeta_instance,
│                 'carpetas': carpetas_a_mostrar, # Ajustar si se implementan subcarpetas
│                 'archivos_subidos': archivos_a_mostrar,
│                 'current_folder': current_folder,
│                 'breadcrumbs': breadcrumbs,
│             }
│             return render(request, 'intranet_core/carga_archivos.html', context)
│         
│         
│         @login_required
│         def editar_archivo_view(request, archivo_id):
│             archivo = get_object_or_404(Archivo, id=archivo_id, subido_por=request.user)
│             nombre_original_previo = archivo.nombre_original_archivo
│             path_previo = archivo.archivo_subido.path if archivo.archivo_subido else None
│         
│             if request.method == 'POST':
│                 form = ArchivoEditForm(request.POST, request.FILES, instance=archivo, user=request.user)
│                 if form.is_valid():
│                     archivo_editado = form.save(commit=False)
│                     if request.FILES.get('archivo_subido'): # Si se subió un nuevo archivo
│                         # Eliminar el archivo físico antiguo si existe y es diferente del nuevo
│                         if path_previo and os.path.isfile(path_previo) and path_previo != archivo_editado.archivo_subido.path :
│                             try:
│                                 os.remove(path_previo)
│                             except OSError as e:
│                                 print(f"Error eliminando archivo antiguo {path_previo}: {e}")
│                         archivo_editado.nombre_original_archivo = request.FILES['archivo_subido'].name
│                     else: # Si no se subió un nuevo archivo, mantener el existente
│                         archivo_editado.archivo_subido = archivo.archivo_subido # Corregido el typo
│                         archivo_editado.nombre_original_archivo = nombre_original_previo
│                     
│                     archivo_editado.save()
│                     form.save_m2m() # Si hubiera campos M2M
│                     messages.success(request, f"Archivo '{archivo_editado.nombre_descriptivo or archivo_editado.nombre_original_archivo}' actualizado.")
│                     return redirect('intranet_core:carga_archivos', carpeta_id=archivo.carpeta.id if archivo.carpeta else None)
│             else:
│                 form = ArchivoEditForm(instance=archivo, user=request.user)
│             
│             context = {
│                 'page_title_for_header': f'Editar Archivo: {archivo.nombre_descriptivo or archivo.nombre_original_archivo}',
│                 'active_nav': 'archivos',
│                 'form': form,
│                 'archivo': archivo,
│             }
│             return render(request, 'intranet_core/editar_archivo.html', context)
│         
│         @login_required
│         def ver_archivo_view(request, archivo_id):
│             archivo = get_object_or_404(Archivo, id=archivo_id)
│             # Podrías añadir lógica de permisos más compleja aquí (ej. si el archivo es compartido)
│             if archivo.subido_por != request.user and not request.user.is_staff: # Ejemplo: staff puede ver todos
│                 return HttpResponseForbidden("No tienes permiso para ver este archivo.")
│             if not archivo.archivo_subido or not archivo.archivo_subido.path:
│                 raise Http404("El archivo no tiene un fichero físico asociado o la ruta no es válida.")
│             try:
│                 file_path = archivo.archivo_subido.path
│                 if not os.path.exists(file_path):
│                     raise Http404("Archivo físico no encontrado en el servidor.")
│         
│                 content_type, encoding = mimetypes.guess_type(file_path)
│                 content_type = content_type or 'application/octet-stream'
│                 
│                 if archivo.is_viewable_in_browser():
│                     # Para archivos de texto, leer y mostrar como HttpResponse para evitar problemas de codificación con FileResponse
│                     if archivo.get_file_extension() in ['.txt', '.md', '.py', '.js', '.json', '.css', '.html', '.xml']:
│                         with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
│                             content = f.read()
│                         return HttpResponse(content, content_type=f"{content_type}; charset=utf-8")
│                     return FileResponse(open(file_path, 'rb'), content_type=content_type, as_attachment=False)
│                 else:
│                     return FileResponse(open(file_path, 'rb'), as_attachment=True, filename=archivo.nombre_original_archivo)
│             except FileNotFoundError:
│                 raise Http404("Archivo no encontrado en el servidor.")
│             except Exception as e:
│                 print(f"Error al intentar ver el archivo {archivo_id}: {e}")
│                 messages.error(request, "No se pudo mostrar el archivo debido a un error.")
│                 return redirect('intranet_core:carga_archivos') # O a donde sea apropiado
│         
│         # --- Vistas de Wiki (ya estaban bastante completas) ---
│         @login_required
│         def wiki_view(request):
│             search_query = request.GET.get('q', '')
│             articulos_qs = ArticuloWiki.objects.all()
│             if search_query:
│                 articulos_qs = articulos_qs.filter(
│                     Q(titulo__icontains=search_query) | Q(contenido__icontains=search_query)
│                 )
│                 if not articulos_qs.exists():
│                     messages.info(request, f"No se encontraron artículos para: '{search_query}'.")
│                 else:
│                     messages.success(request, f"Mostrando resultados para: '{search_query}'.")
│             
│             articulos = articulos_qs.order_by('-actualizado_el', 'titulo')
│             context = {
│                 'page_title_for_header': 'Base de Conocimiento (Wiki)',
│                 'active_nav': 'wiki',
│                 'articulos': articulos,
│                 'search_query': search_query,
│             }
│             return render(request, 'intranet_core/wiki_lista.html', context)
│         
│         @login_required
│         def wiki_articulo_detalle_view(request, slug):
│             articulo = get_object_or_404(ArticuloWiki, slug=slug)
│             html_content = ""
│             try:
│                 import markdown
│                 extensions = ['fenced_code', 'tables', 'attr_list', 'md_in_html', 'codehilite', 'toc']
│                 md = markdown.Markdown(extensions=extensions, extension_configs={'codehilite': {'css_class': 'codehilite'}})
│                 html_content = md.convert(articulo.contenido)
│                 toc = getattr(md, 'toc', '') if 'toc' in extensions else '' # Extraer TOC si la extensión está habilitada
│             except ImportError:
│                 html_content = f"<p class='text-red-500'>La librería 'markdown' no está instalada. Por favor, instálala (<code>pip install markdown pygments</code>) para ver el contenido formateado.</p><pre>{articulo.contenido}</pre>"
│                 messages.warning(request, "La librería Markdown (y Pygments para resaltado) no está instalada.")
│                 toc = ''
│             except Exception as e:
│                 html_content = f"<p class='text-red-500'>Error renderizando Markdown: {e}</p><pre>{articulo.contenido}</pre>"
│                 messages.error(request, f"Error al renderizar el contenido Markdown: {e}")
│                 toc = ''
│             
│             context = {
│                 'page_title_for_header': articulo.titulo,
│                 'active_nav': 'wiki',
│                 'articulo': articulo,
│                 'html_content': html_content,
│                 'toc_content': toc, # Pasar el TOC al template
│             }
│             return render(request, 'intranet_core/wiki_articulo_detalle.html', context)
│         
│         @login_required
│         def wiki_crear_articulo_view(request):
│             if request.method == 'POST':
│                 form = ArticuloWikiForm(request.POST)
│                 if form.is_valid():
│                     articulo = form.save(commit=False)
│                     articulo.autor = request.user
│                     articulo.save() 
│                     messages.success(request, f"Artículo '{articulo.titulo}' creado exitosamente.")
│                     crear_notificacion_global(
│                         usuario_destinatario=request.user, 
│                         mensaje=f"Nuevo artículo en la Wiki: '{articulo.titulo}' por {request.user.username}.",
│                         url_destino_nombre='intranet_core:wiki_articulo_detalle',
│                         url_destino_kwargs={'slug': articulo.slug} # Usar el nombre correcto del parámetro
│                     )
│                     return redirect(articulo.get_absolute_url())
│             else:
│                 form = ArticuloWikiForm()
│             
│             context = {
│                 'page_title_for_header': 'Crear Nuevo Artículo Wiki',
│                 'active_nav': 'wiki',
│                 'form': form,
│                 'edit_mode': False,
│             }
│             return render(request, 'intranet_core/wiki_articulo_form.html', context)
│         
│         @login_required
│         def wiki_editar_articulo_view(request, slug):
│             articulo = get_object_or_404(ArticuloWiki, slug=slug)
│             if articulo.autor != request.user and not request.user.is_staff:
│                 messages.error(request, "No tienes permiso para editar este artículo.")
│                 return redirect(articulo.get_absolute_url())
│             
│             if request.method == 'POST':
│                 form = ArticuloWikiForm(request.POST, instance=articulo)
│                 if form.is_valid():
│                     form.save()
│                     messages.success(request, f"Artículo '{articulo.titulo}' actualizado exitosamente.")
│                     return redirect(articulo.get_absolute_url())
│             else:
│                 form = ArticuloWikiForm(instance=articulo)
│             
│             context = {
│                 'page_title_for_header': f'Editar: {articulo.titulo}',
│                 'active_nav': 'wiki',
│                 'form': form,
│                 'articulo': articulo,
│                 'edit_mode': True,
│             }
│             return render(request, 'intranet_core/wiki_articulo_form.html', context)
│         
│         @login_required
│         def wiki_eliminar_articulo_view(request, slug):
│             articulo = get_object_or_404(ArticuloWiki, slug=slug)
│             if articulo.autor != request.user and not request.user.is_staff:
│                 messages.error(request, "No tienes permiso para eliminar este artículo.")
│                 return redirect(articulo.get_absolute_url())
│             
│             if request.method == 'POST':
│                 titulo_articulo = articulo.titulo
│                 articulo.delete()
│                 messages.success(request, f"Artículo '{titulo_articulo}' eliminado exitosamente.")
│                 return redirect('intranet_core:wiki')
│             
│             context = {
│                 'page_title_for_header': f'Confirmar Eliminación: {articulo.titulo}',
│                 'active_nav': 'wiki',
│                 'articulo': articulo
│             }
│             return render(request, 'intranet_core/wiki_articulo_confirm_delete.html', context)
│         
│         # --- Vistas de Notificaciones (ya estaban bastante completas) ---
│         @login_required
│         def notificaciones_page_view(request):
│             notificaciones_no_leidas = Notificacion.objects.filter(destinatario=request.user, leida=False).order_by('-fecha_creacion')
│             notificaciones_leidas = Notificacion.objects.filter(destinatario=request.user, leida=True).order_by('-fecha_creacion')[:20] # Limitar historial
│             context = {
│                 'page_title_for_header': 'Notificaciones y Anuncios',
│                 'active_nav': 'notificaciones_page',
│                 'notificaciones_no_leidas': notificaciones_no_leidas,
│                 'notificaciones_leidas': notificaciones_leidas,
│             }
│             return render(request, 'intranet_core/notificaciones_page.html', context)
│         
│         @login_required
│         def marcar_notificacion_leida_view(request, notificacion_id):
│             notificacion = get_object_or_404(Notificacion, id=notificacion_id, destinatario=request.user)
│             notificacion.leida = True
│             notificacion.save()
│             if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
│                 return JsonResponse({'status': 'success', 'message': 'Notificación marcada como leída.'})
│             if notificacion.url_destino:
│                 return redirect(notificacion.url_destino)
│             return redirect(request.GET.get('next', reverse('intranet_core:notificaciones_page')))
│         
│         
│         @login_required
│         def marcar_todas_notificaciones_leidas_view(request):
│             if request.method == 'POST': # Asegurar que sea por POST
│                 Notificacion.objects.filter(destinatario=request.user, leida=False).update(leida=True)
│                 messages.success(request, "Todas las notificaciones han sido marcadas como leídas.")
│             return redirect('intranet_core:notificaciones_page')
│         
│         # --- Implementación de Vistas Placeholder ---
│         
│         # 1. Módulo de Formularios
│         @login_required
│         def formularios_view(request): # Lista de formularios creados por el usuario
│             formularios_usuario = Formulario.objects.filter(creado_por=request.user).order_by('-creado_el')
│             context = {
│                 'page_title_for_header': 'Mis Formularios',
│                 'active_nav': 'formularios',
│                 'formularios': formularios_usuario,
│             }
│             return render(request, 'intranet_core/formularios_lista.html', context) # Nuevo template
│         
│         @login_required
│         def formulario_crear_view(request):
│             if request.method == 'POST':
│                 form = FormularioModelForm(request.POST) # Asume que tienes este form en forms.py
│                 if form.is_valid():
│                     formulario = form.save(commit=False)
│                     formulario.creado_por = request.user
│                     formulario.save()
│                     messages.success(request, f"Formulario '{formulario.titulo}' creado. Ahora puedes añadir campos.")
│                     return redirect('intranet_core:formulario_disenar', formulario_id=formulario.id) # Redirigir a diseñar
│             else:
│                 form = FormularioModelForm()
│             context = {
│                 'page_title_for_header': 'Crear Nuevo Formulario',
│                 'active_nav': 'formularios',
│                 'form': form,
│             }
│             return render(request, 'intranet_core/formulario_crear.html', context) # Nuevo template
│         
│         @login_required
│         def formulario_disenar_view(request, formulario_id):
│             formulario = get_object_or_404(Formulario, id=formulario_id, creado_por=request.user)
│             
│             CampoFormSet = modelformset_factory(
│                 CampoFormulario,
│                 form=CampoFormularioModelForm,
│                 fields=['etiqueta', 'tipo_campo', 'ayuda_texto', 'es_obligatorio', 'opciones_choices', 'orden'],
│                 extra=0,
│                 can_delete=True,
│                 can_order=False
│             )
│         
│             if request.method == 'POST':
│                 formset = CampoFormSet(request.POST, request.FILES, queryset=formulario.campos.all().order_by('orden'), prefix='campos')
│                 
│                 if formset.is_valid():
│                     instances_to_save = []
│                     
│                     for form_idx, form in enumerate(formset.forms):
│                         if formset.can_delete and form.cleaned_data.get('DELETE', False):
│                             if form.instance.pk:
│                                 form.instance.delete()
│                             continue 
│                         if form.has_changed() or not form.instance.pk: # Guardar si cambió o es nuevo (y no está marcado para eliminar)
│                             # Asegurar que la instancia tiene el formulario padre asignado antes de añadirla
│                             form.instance.formulario = formulario 
│                             instances_to_save.append(form.instance)
│                     
│                     current_order = 0
│                     for instance in instances_to_save:
│                         instance.orden = current_order
│                         instance.save() 
│                         current_order += 1
│                     
│                     messages.success(request, f"Campos del formulario '{formulario.titulo}' actualizados exitosamente.")
│                     return redirect('intranet_core:formulario_disenar', formulario_id=formulario.id)
│                 else:
│                     messages.error(request, "Por favor corrige los errores en los campos del formulario.")
│                     # Para depuración en consola del servidor:
│                     # for i, form_errors in enumerate(formset.errors):
│                     #     if form_errors:
│                     #         print(f"Errores en el subformulario de campo {i}: {form_errors}")
│                     # if formset.non_form_errors():
│                     #     print(f"Errores generales del formset: {formset.non_form_errors()}")
│         
│             else: # GET request
│                 formset = CampoFormSet(queryset=formulario.campos.all().order_by('orden'), prefix='campos')
│         
│             context = {
│                 'page_title_for_header': f'Diseñar Formulario: {formulario.titulo}',
│                 'active_nav': 'formularios',
│                 'formulario': formulario,
│                 'formset': formset,
│                 'campo_tipos': CampoFormulario.TipoCampo.choices,
│                 # Cambio aquí: Convertir a string JSON en la vista
│                 'campo_tipos_json_string': json.dumps(dict(CampoFormulario.TipoCampo.choices)) 
│             }
│             return render(request, 'intranet_core/formulario_disenar.html', context)
│         
│         @login_required
│         def formulario_llenar_view(request, formulario_id):
│             formulario = get_object_or_404(Formulario, id=formulario_id, activo=True)
│             # Aquí construirías un formulario dinámicamente basado en `formulario.campos.all()`
│             # Esto es complejo y generalmente se hace iterando los campos en el template y creando los inputs.
│             # El procesamiento del POST requerirá guardar una `RespuestaFormulario` y múltiples `DatoRespuesta`.
│             # Por simplicidad, este es un placeholder más detallado:
│             if request.method == 'POST':
│                 # Lógica para procesar los datos de cada campo
│                 respuesta = RespuestaFormulario.objects.create(formulario=formulario, respondido_por=request.user)
│                 for campo in formulario.campos.all():
│                     valor_campo = request.POST.get(f'campo_{campo.id}')
│                     if valor_campo is not None: # O manejar casillas de verificación múltiples
│                         DatoRespuesta.objects.create(respuesta_formulario=respuesta, campo_formulario=campo, valor=valor_campo)
│                 messages.success(request, f"Gracias por completar el formulario '{formulario.titulo}'.")
│                 return redirect('intranet_core:dashboard') # O a una página de agradecimiento
│                 
│             context = {
│                 'page_title_for_header': f'Llenar: {formulario.titulo}',
│                 'active_nav': 'formularios', # O ninguna si es una página pública
│                 'formulario': formulario,
│                 'campos': formulario.campos.all().order_by('orden')
│             }
│             return render(request, 'intranet_core/formulario_llenar.html', context) # Nuevo template
│         
│         @login_required
│         def formulario_respuestas_view(request, formulario_id):
│             formulario = get_object_or_404(Formulario, id=formulario_id)
│             # Permitir solo al creador o staff ver respuestas
│             if not (request.user == formulario.creado_por or request.user.is_staff):
│                 return HttpResponseForbidden("No tienes permiso para ver estas respuestas.")
│             respuestas_qs = RespuestaFormulario.objects.filter(formulario=formulario).prefetch_related('datos', 'datos__campo_formulario')
│             # Paginación para muchas respuestas
│             paginator = Paginator(respuestas_qs, 20)  # 20 por página
│             page = request.GET.get('page')
│             try:
│                 respuestas = paginator.page(page)
│             except PageNotAnInteger:
│                 respuestas = paginator.page(1)
│             except EmptyPage:
│                 respuestas = paginator.page(paginator.num_pages)
│             context = {
│                 'page_title_for_header': f'Respuestas para: {formulario.titulo}',
│                 'active_nav': 'formularios',
│                 'formulario': formulario,
│                 'respuestas': respuestas,
│             }
│             return render(request, 'intranet_core/formulario_respuestas.html', context) # Nuevo template
│         
│         # 2. Módulo de Calendario
│         @login_required
│         def calendario_view(request):
│             # Esta vista puede renderizar la página principal del calendario.
│             # Los eventos se cargarían vía AJAX o se pasarían directamente si no son demasiados.
│             eventos = EventoCalendario.objects.filter(Q(creado_por=request.user) | Q(participantes=request.user) if hasattr(EventoCalendario, 'participantes') else Q(creado_por=request.user)).distinct() # Ejemplo
│             context = {
│                 'page_title_for_header': 'Calendario de Actividades',
│                 'active_nav': 'calendario',
│                 'eventos_json_url': reverse('intranet_core:calendario_eventos_json'), # URL para FullCalendar
│             }
│             # El template `calendario.html` necesitaría JS para FullCalendar.
│             return render(request, 'intranet_core/calendario.html', context)
│         
│         @login_required
│         def calendario_eventos_json_view(request):
│             # Filtra eventos por usuario y por rango de fechas si se proveen
│             eventos_qs = EventoCalendario.objects.filter(
│                 Q(creado_por=request.user) | Q(participantes=request.user) if hasattr(EventoCalendario, 'participantes') else Q(creado_por=request.user)
│             ).distinct()
│             # Validar parámetros de fecha
│             start_param = request.GET.get('start')
│             end_param = request.GET.get('end')
│             try:
│                 if start_param:
│                     start_dt = timezone.datetime.fromisoformat(start_param)
│                     eventos_qs = eventos_qs.filter(fecha_inicio__gte=start_dt)
│                 if end_param:
│                     end_dt = timezone.datetime.fromisoformat(end_param)
│                     eventos_qs = eventos_qs.filter(fecha_fin__lte=end_dt)
│             except Exception:
│                 pass  # Si hay error en el formato, ignorar el filtro
│             eventos_list = []
│             for evento in eventos_qs:
│                 eventos_list.append({
│                     'id': evento.id,
│                     'title': evento.titulo,
│                     'start': evento.fecha_inicio.isoformat(),
│                     'end': evento.fecha_fin.isoformat() if evento.fecha_fin else None,
│                     'description': evento.descripcion,
│                     'color': getattr(evento, 'color_evento', None),
│                     'url': reverse('intranet_core:evento_calendario_detalle', args=[evento.id])
│                 })
│             return JsonResponse(eventos_list, safe=False)
│         
│         @login_required
│         def evento_calendario_crear_view(request):
│             if request.method == 'POST':
│                 form = EventoCalendarioModelForm(request.POST) # Asume este form
│                 if form.is_valid():
│                     evento = form.save(commit=False)
│                     evento.creado_por = request.user
│                     evento.save()
│                     messages.success(request, "Evento creado exitosamente.")
│                     return redirect('intranet_core:calendario')
│             else:
│                 # Pre-llenar fecha_inicio si viene por GET (ej. desde FullCalendar al hacer clic en un día)
│                 initial_data = {}
│                 date_str = request.GET.get('date')
│                 if date_str:
│                     try:
│                         initial_data['fecha_inicio'] = timezone.datetime.fromisoformat(date_str)
│                     except ValueError:
│                         pass # Ignorar si la fecha no es válida
│                 form = EventoCalendarioModelForm(initial=initial_data)
│                 
│             context = {'form': form, 'page_title_for_header': 'Crear Evento', 'active_nav': 'calendario'}
│             return render(request, 'intranet_core/evento_calendario_form.html', context) # Nuevo template
│         
│         @login_required
│         def evento_calendario_detalle_view(request, evento_id):
│             evento = get_object_or_404(EventoCalendario, id=evento_id)
│             # Añadir verificación de permisos si es necesario
│             context = {'evento': evento, 'page_title_for_header': evento.titulo, 'active_nav': 'calendario'}
│             return render(request, 'intranet_core/evento_calendario_detalle.html', context) # Nuevo template
│         
│         @login_required
│         def evento_calendario_editar_view(request, evento_id):
│             evento = get_object_or_404(EventoCalendario, id=evento_id, creado_por=request.user) # Solo el creador edita
│             if request.method == 'POST':
│                 form = EventoCalendarioModelForm(request.POST, instance=evento)
│                 if form.is_valid():
│                     form.save()
│                     messages.success(request, "Evento actualizado.")
│                     return redirect('intranet_core:calendario')
│             else:
│                 form = EventoCalendarioModelForm(instance=evento)
│             context = {'form': form, 'evento': evento, 'page_title_for_header': f'Editar: {evento.titulo}', 'active_nav': 'calendario'}
│             return render(request, 'intranet_core/evento_calendario_form.html', context)
│         
│         @login_required
│         def evento_calendario_eliminar_view(request, evento_id):
│             evento = get_object_or_404(EventoCalendario, id=evento_id, creado_por=request.user) # Solo el creador elimina
│             if request.method == 'POST':
│                 evento.delete()
│                 messages.success(request, "Evento eliminado.")
│                 return redirect('intranet_core:calendario')
│             context = {'evento': evento, 'page_title_for_header': f'Eliminar: {evento.titulo}', 'active_nav': 'calendario'}
│             return render(request, 'intranet_core/evento_calendario_confirm_delete.html', context) # Nuevo template
│         
│         # 3. Módulo de Responsabilidades (Tareas)
│         @login_required
│         def responsabilidades_view(request): # Lista de tareas
│             # Filtros (ej. mis tareas, tareas que creé, todas si es staff)
│             filter_type = request.GET.get('filter', 'mis_tareas')
│             tareas_qs = Tarea.objects.all()
│         
│             if filter_type == 'mis_tareas':
│                 tareas_qs = tareas_qs.filter(asignado_a=request.user)
│                 page_subtitle = "Mis Tareas Asignadas"
│             elif filter_type == 'creadas_por_mi':
│                 tareas_qs = tareas_qs.filter(creado_por=request.user)
│                 page_subtitle = "Tareas Creadas por Mí"
│             elif filter_type == 'todas' and request.user.is_staff:
│                 page_subtitle = "Todas las Tareas"
│             else: # Por defecto o si no es staff y pide 'todas'
│                 tareas_qs = tareas_qs.filter(Q(asignado_a=request.user) | Q(creado_por=request.user)).distinct()
│                 page_subtitle = "Mis Tareas y Creadas por Mí"
│                 
│             tareas_pendientes = tareas_qs.filter(estado__in=[Tarea.EstadoTarea.PENDIENTE, Tarea.EstadoTarea.EN_PROGRESO]).order_by('fecha_limite', 'prioridad')
│             tareas_completadas = tareas_qs.filter(estado=Tarea.EstadoTarea.COMPLETADA).order_by('-fecha_limite')[:20] # Limitar
│         
│             context = {
│                 'page_title_for_header': f'Gestión de Responsabilidades: {page_subtitle}',
│                 'active_nav': 'responsabilidades',
│                 'tareas_pendientes': tareas_pendientes,
│                 'tareas_completadas': tareas_completadas,
│                 'current_filter': filter_type,
│             }
│             return render(request, 'intranet_core/responsabilidades_lista.html', context) # Nuevo template
│         
│         @login_required
│         def tarea_crear_view(request):
│             if request.method == 'POST':
│                 form = TareaModelForm(request.POST) # Asume este form
│                 if form.is_valid():
│                     tarea = form.save(commit=False)
│                     tarea.creado_por = request.user
│                     tarea.save()
│                     # Notificar al asignado_a si es diferente del creador
│                     if tarea.asignado_a and tarea.asignado_a != request.user:
│                          crear_notificacion_global(
│                             tarea.asignado_a,
│                             f"Nueva tarea asignada: '{tarea.titulo}' por {request.user.username}.",
│                             'intranet_core:tarea_detalle', kwargs={'tarea_id': tarea.id} # Ajusta el nombre de la URL de detalle
│                         )
│                     messages.success(request, "Tarea creada exitosamente.")
│                     return redirect('intranet_core:responsabilidades')
│             else:
│                 form = TareaModelForm(initial={'asignado_a': request.user}) # Pre-asignar al usuario actual
│             context = {'form': form, 'page_title_for_header': 'Crear Nueva Tarea', 'active_nav': 'responsabilidades'}
│             return render(request, 'intranet_core/tarea_form.html', context) # Nuevo template
│         
│         @login_required
│         def tarea_detalle_view(request, tarea_id):
│             tarea = get_object_or_404(Tarea, id=tarea_id)
│             # Verificar permisos: asignado, creador o staff
│             if not (request.user == tarea.asignado_a or request.user == tarea.creado_por or request.user.is_staff):
│                 return HttpResponseForbidden("No tienes permiso para ver esta tarea.")
│             context = {'tarea': tarea, 'page_title_for_header': f'Tarea: {tarea.titulo}', 'active_nav': 'responsabilidades'}
│             return render(request, 'intranet_core/tarea_detalle.html', context) # Nuevo template
│         
│         @login_required
│         def tarea_editar_view(request, tarea_id):
│             tarea = get_object_or_404(Tarea, id=tarea_id)
│             # Verificar permisos: solo creador o staff (o asignado si se permite)
│             if not (request.user == tarea.creado_por or request.user.is_staff):
│                 return HttpResponseForbidden("No tienes permiso para editar esta tarea.")
│                 
│             if request.method == 'POST':
│                 form = TareaModelForm(request.POST, instance=tarea)
│                 if form.is_valid():
│                     form.save()
│                     messages.success(request, "Tarea actualizada.")
│                     return redirect('intranet_core:tarea_detalle', tarea_id=tarea.id)
│             else:
│                 form = TareaModelForm(instance=tarea)
│             context = {'form': form, 'tarea': tarea, 'page_title_for_header': f'Editar Tarea: {tarea.titulo}', 'active_nav': 'responsabilidades'}
│             return render(request, 'intranet_core/tarea_form.html', context)
│         
│         @login_required
│         def tarea_eliminar_view(request, tarea_id):
│             tarea = get_object_or_404(Tarea, id=tarea_id)
│             if not (request.user == tarea.creado_por or request.user.is_staff):
│                 return HttpResponseForbidden("No tienes permiso para eliminar esta tarea.")
│             
│             if request.method == 'POST':
│                 tarea.delete()
│                 messages.success(request, "Tarea eliminada.")
│                 return redirect('intranet_core:responsabilidades')
│             context = {'tarea': tarea, 'page_title_for_header': f'Eliminar Tarea: {tarea.titulo}', 'active_nav': 'responsabilidades'}
│             return render(request, 'intranet_core/tarea_confirm_delete.html', context)
│         
│         # 4. Módulo de Directorio de Usuarios
│         @login_required
│         def directorio_view(request):
│             search_query = request.GET.get('q', '').strip()
│             usuarios_qs = User.objects.filter(is_active=True).select_related('perfil').order_by('last_name', 'first_name')
│             if search_query:
│                 usuarios_qs = usuarios_qs.filter(
│                     Q(username__icontains=search_query) |
│                     Q(first_name__icontains=search_query) |
│                     Q(last_name__icontains=search_query) |
│                     Q(email__icontains=search_query) |
│                     Q(perfil__departamento__icontains=search_query) |
│                     Q(perfil__cargo__icontains=search_query)
│                 ).distinct()
│                 
│             paginator = Paginator(usuarios_qs, 25)
│             page_number = request.GET.get('page')
│             try:
│                 usuarios_paginados = paginator.page(page_number)
│             except PageNotAnInteger:
│                 usuarios_paginados = paginator.page(1)
│             except EmptyPage:
│                 usuarios_paginados = paginator.page(paginator.num_pages)
│                 
│             context = {
│                 'page_title_for_header': 'Directorio de Usuarios',
│                 'active_nav': 'directorio',
│                 'usuarios': usuarios_paginados, # Pasa el objeto Page
│                 'search_query': search_query,
│             }
│             return render(request, 'intranet_core/directorio_lista.html', context)
│         
│         @login_required
│         def directorio_usuario_detalle_view(request, username):
│             usuario_perfil = get_object_or_404(User.objects.select_related('perfil'), username=username, is_active=True)
│             context = {
│                 'page_title_for_header': f'Perfil de {usuario_perfil.get_full_name() or usuario_perfil.username}',
│                 'active_nav': 'directorio',
│                 'perfil_usuario_obj': usuario_perfil, # El template debe acceder a usuario_perfil.perfil
│             }
│             return render(request, 'intranet_core/directorio_usuario_detalle.html', context)
│         
│         # 5. Módulo de Reserva de Recursos
│         @login_required
│         def reservas_view(request):
│             recursos = Recurso.objects.filter(esta_activo=True).select_related('tipo_recurso')
│             tipos_recurso = TipoRecurso.objects.all()
│             context = {
│                 'page_title_for_header': 'Reserva de Recursos',
│                 'active_nav': 'reservas',
│                 'recursos': recursos,
│                 'tipos_recurso': tipos_recurso,
│                 'reservas_json_url': reverse('intranet_core:reservas_eventos_json'),
│                 'form_reserva': ReservaModelForm() # Para un modal
│             }
│             return render(request, 'intranet_core/reservas_lista_recursos.html', context)
│         
│         @login_required
│         def reservas_eventos_json_view(request):
│             reservas_qs = Reserva.objects.filter(estado=Reserva.EstadoReserva.APROBADA).select_related('recurso', 'reservado_por')
│             
│             recurso_id = request.GET.get('recurso_id')
│             if recurso_id:
│                 reservas_qs = reservas_qs.filter(recurso_id=recurso_id)
│             
│             start_param = request.GET.get('start')
│             end_param = request.GET.get('end')
│             if start_param:
│                 reservas_qs = reservas_qs.filter(fecha_fin__gte=start_param)
│             if end_param:
│                 reservas_qs = reservas_qs.filter(fecha_inicio__lte=end_param)
│         
│             eventos_list = []
│             for reserva in reservas_qs:
│                 eventos_list.append({
│                     'id': reserva.id,
│                     'title': f"{reserva.recurso.nombre} ({reserva.reservado_por.username})",
│                     'start': reserva.fecha_inicio.isoformat(),
│                     'end': reserva.fecha_fin.isoformat(),
│                     'resourceId': reserva.recurso.id,
│                     'description': reserva.motivo or '',
│                     'color': reserva.recurso.tipo_recurso.icono_fa.split(' ')[1] if reserva.recurso.tipo_recurso.icono_fa else None # Usar color de tipo si existe
│                 })
│             return JsonResponse(eventos_list, safe=False)
│         
│         @login_required
│         def reserva_crear_view(request, recurso_id=None):
│             recurso = None
│             initial_data = {}
│             if recurso_id:
│                 recurso = get_object_or_404(Recurso, id=recurso_id, esta_activo=True)
│                 initial_data['recurso'] = recurso
│         
│             # Pre-llenar fechas si vienen por GET (ej. desde FullCalendar)
│             start_str = request.GET.get('start')
│             end_str = request.GET.get('end')
│             if start_str: 
│                 try: initial_data['fecha_inicio'] = timezone.datetime.fromisoformat(start_str)
│                 except: pass
│             if end_str: 
│                 try: initial_data['fecha_fin'] = timezone.datetime.fromisoformat(end_str)
│                 except: pass
│         
│             if request.method == 'POST':
│                 form = ReservaModelForm(request.POST)
│                 if form.is_valid():
│                     reserva = form.save(commit=False)
│                     reserva.reservado_por = request.user
│                     # Lógica de aprobación si 'requiere_aprobacion' está en el modelo Recurso
│                     # if reserva.recurso.requiere_aprobacion:
│                     #     reserva.estado = Reserva.EstadoReserva.PENDIENTE
│                     #     messages.info(request, f"Solicitud de reserva para '{reserva.recurso.nombre}' enviada para aprobación.")
│                     # else:
│                     reserva.estado = Reserva.EstadoReserva.APROBADA # Por ahora, aprobación automática
│                     messages.success(request, f"Reserva para '{reserva.recurso.nombre}' creada exitosamente.")
│                     reserva.save()
│                     
│                     if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
│                          return JsonResponse({'status': 'success', 'message': 'Reserva creada.', 'evento_id': reserva.id}) # Adaptar para FullCalendar
│                     return redirect('intranet_core:reservas')
│                 else:
│                     if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
│                         return JsonResponse({'status': 'error', 'errors': form.errors}, status=400)
│             else:
│                 form = ReservaModelForm(initial=initial_data)
│                 if recurso:
│                     form.fields['recurso'].disabled = True
│             
│             context = {
│                 'form': form, 
│                 'recurso': recurso,
│                 'page_title_for_header': f'Crear Reserva {"para " + recurso.nombre if recurso else ""}',
│                 'active_nav': 'reservas',
│                 'edit_mode': False
│             }
│             return render(request, 'intranet_core/reserva_form.html', context)
│         
│         # 6. Módulo de Gestión de Usuarios (Staff)
│         @login_required
│         @user_passes_test(es_staff, login_url=reverse_lazy('intranet_core:dashboard'))
│         def usuarios_gestion_view(request):
│             search_query = request.GET.get('q', '')
│             usuarios_qs = User.objects.all().select_related('perfil').prefetch_related('groups').order_by('username')
│             
│             if search_query:
│                 usuarios_qs = usuarios_qs.filter(
│                     Q(username__icontains=search_query) |
│                     Q(first_name__icontains=search_query) |
│                     Q(last_name__icontains=search_query) |
│                     Q(email__icontains=search_query)
│                 )
│             
│             paginator = Paginator(usuarios_qs, 25)
│             page_number = request.GET.get('page')
│             try:
│                 usuarios_paginados = paginator.page(page_number)
│             except PageNotAnInteger:
│                 usuarios_paginados = paginator.page(1)
│             except EmptyPage:
│                 usuarios_paginados = paginator.page(paginator.num_pages)
│         
│             context = {
│                 'page_title_for_header': 'Gestión de Usuarios',
│                 'active_nav': 'usuarios_gestion',
│                 'usuarios': usuarios_paginados,
│                 'search_query': search_query,
│             }
│             return render(request, 'intranet_core/usuarios_gestion_lista.html', context)
│         
│         @login_required
│         @user_passes_test(es_staff)
│         def usuario_gestion_editar_view(request, user_id):
│             usuario_a_editar = get_object_or_404(User, id=user_id)
│             perfil_usuario, created = PerfilUsuario.objects.get_or_create(usuario=usuario_a_editar)
│         
│             if request.method == 'POST':
│                 user_form = UserEditStaffForm(request.POST, instance=usuario_a_editar)
│                 perfil_form = PerfilUsuarioModelForm(request.POST, request.FILES, instance=perfil_usuario)
│                 if user_form.is_valid() and perfil_form.is_valid():
│                     user_form.save() # El save() de UserEditStaffForm maneja los grupos
│                     perfil_form.save()
│                     messages.success(request, f"Usuario '{usuario_a_editar.username}' actualizado exitosamente.")
│                     return redirect('intranet_core:usuarios_gestion')
│                 else:
│                     messages.error(request, "Error al actualizar el usuario. Revisa los campos.")
│             else:
│                 user_form = UserEditStaffForm(instance=usuario_a_editar)
│                 perfil_form = PerfilUsuarioModelForm(instance=perfil_usuario)
│             
│             context = {
│                 'page_title_for_header': f'Editar Usuario: {usuario_a_editar.username}',
│                 'active_nav': 'usuarios_gestion',
│                 'usuario_a_editar': usuario_a_editar,
│                 'user_form': user_form,
│                 'perfil_form': perfil_form,
│             }
│             return render(request, 'intranet_core/usuario_gestion_form.html', context)
│         
│         # 7. Módulo de Perfil de Usuario
│         @login_required
│         def perfil_view(request):
│             user_profile, created = PerfilUsuario.objects.get_or_create(usuario=request.user)
│             
│             user_form = UserUpdateForm(instance=request.user)
│             profile_form = PerfilUsuarioModelForm(instance=user_profile)
│             password_form = PasswordChangeForm(request.user)
│         
│             if request.method == 'POST':
│                 if 'update_profile' in request.POST:
│                     user_form = UserUpdateForm(request.POST, instance=request.user)
│                     profile_form = PerfilUsuarioModelForm(request.POST, request.FILES, instance=user_profile)
│                     if user_form.is_valid() and profile_form.is_valid():
│                         user_form.save()
│                         profile_form.save()
│                         messages.success(request, 'Tu perfil ha sido actualizado exitosamente.')
│                         return redirect('intranet_core:perfil')
│                     else:
│                         messages.error(request, 'Por favor corrige los errores en el formulario de perfil.')
│                 elif 'change_password' in request.POST:
│                     password_form = PasswordChangeForm(request.user, request.POST)
│                     if password_form.is_valid():
│                         user = password_form.save()
│                         update_session_auth_hash(request, user) 
│                         messages.success(request, 'Tu contraseña ha sido cambiada exitosamente.')
│                         return redirect('intranet_core:perfil')
│                     else:
│                         messages.error(request, 'Error al cambiar la contraseña. Por favor corrige los errores.')
│             
│             context = {
│                 'page_title_for_header': 'Mi Perfil',
│                 'active_nav': 'perfil',
│                 'user_form': user_form,
│                 'profile_form': profile_form,
│                 'password_form': password_form,
│                 'perfil_usuario_obj': user_profile, # Usado para mostrar la foto actual, etc.
│             }
│             return render(request, 'intranet_core/perfil_editar.html', context)
│         
│         # 8. Módulo de Configuración
│         @login_required
│         def configuracion_view(request):
│             context = {
│                 'page_title_for_header': 'Configuración',
│                 'active_nav': 'configuracion'
│             }
│             messages.info(request, "La sección de Configuración está en desarrollo.")
│             return render(request, 'intranet_core/configuracion.html', context)
│       --- FIN CONTENIDO (views.py) ---


├── intranet_gem
│   ├── __init__.py
│   │   📄 (Archivo vacío)

│   ├── asgi.py
│   │   📄 CONTENIDO DEL ARCHIVO (asgi.py):
│   │     """
│   │     ASGI config for intranet_gem project.
│   │     
│   │     It exposes the ASGI callable as a module-level variable named ``application``.
│   │     
│   │     For more information on this file, see
│   │     https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
│   │     """
│   │     
│   │     import os
│   │     
│   │     from django.core.asgi import get_asgi_application
│   │     
│   │     os.environ.setdefault("DJANGO_SETTINGS_MODULE", "intranet_gem.settings")
│   │     
│   │     application = get_asgi_application()
│   │   --- FIN CONTENIDO (asgi.py) ---

│   ├── settings.py
│   │   📄 CONTENIDO DEL ARCHIVO (settings.py):
│   │     # Ubicación: /workspaces/intranet_gem/intranet_gem/settings.py
│   │     import os
│   │     from pathlib import Path
│   │     
│   │     BASE_DIR = Path(__file__).resolve().parent.parent
│   │     SECRET_KEY = 'django-insecure_CAMBIA_ESTA_CLAVE_SECRETA_POR_UNA_NUEVA_Y_UNICA' # ¡GENERA UNA NUEVA!
│   │     DEBUG = True
│   │     
│   │     ALLOWED_HOSTS = ['localhost', '127.0.0.1',]
│   │     CSRF_TRUSTED_ORIGINS = [
│   │         'http://localhost:8000', 'http://127.0.0.1:8000',
│   │         'https://localhost:8000', 'https://127.0.0.1:8000',
│   │     ]
│   │     
│   │     if 'CODESPACE_NAME' in os.environ and 'GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN' in os.environ:
│   │         CODESPACE_URL_PRIMARY = f"{os.environ['CODESPACE_NAME']}.{os.environ['GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN']}"
│   │         ALLOWED_HOSTS.append(CODESPACE_URL_PRIMARY)
│   │         CSRF_TRUSTED_ORIGINS.append(f'https://{CODESPACE_URL_PRIMARY}')
│   │         CODESPACE_URL_WITH_PORT = f"https://{os.environ['CODESPACE_NAME']}-8000.{os.environ['GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN']}"
│   │         ALLOWED_HOSTS.append(CODESPACE_URL_WITH_PORT)
│   │         CSRF_TRUSTED_ORIGINS.append(CODESPACE_URL_WITH_PORT)
│   │     
│   │     INSTALLED_APPS = [
│   │         'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes',
│   │         'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles',
│   │         'intranet_core',
│   │     ]
│   │     MIDDLEWARE = [
│   │         'django.middleware.security.SecurityMiddleware',
│   │         'django.contrib.sessions.middleware.SessionMiddleware',
│   │         'django.middleware.common.CommonMiddleware',
│   │         'django.middleware.csrf.CsrfViewMiddleware',
│   │         'django.contrib.auth.middleware.AuthenticationMiddleware',
│   │         'django.contrib.messages.middleware.MessageMiddleware',
│   │         'django.middleware.clickjacking.XFrameOptionsMiddleware',
│   │     ]
│   │     ROOT_URLCONF = 'intranet_gem.urls'
│   │     TEMPLATES = [{'BACKEND': 'django.template.backends.django.DjangoTemplates','DIRS': [os.path.join(BASE_DIR, 'templates')],'APP_DIRS': True,
│   │         'OPTIONS': {
│   │             'context_processors': [
│   │                 'django.template.context_processors.debug',
│   │                 'django.template.context_processors.request',
│   │                 'django.contrib.auth.context_processors.auth',
│   │                 'django.contrib.messages.context_processors.messages',
│   │             ],
│   │         },
│   │     }]
│   │     WSGI_APPLICATION = 'intranet_gem.wsgi.application'
│   │     DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': BASE_DIR / 'db.sqlite3',}}
│   │     AUTH_PASSWORD_VALIDATORS = [
│   │         {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
│   │         {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
│   │         {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
│   │         {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
│   │     ]
│   │     LANGUAGE_CODE = 'es-cl'
│   │     TIME_ZONE = 'America/Santiago'
│   │     USE_I18N = True
│   │     USE_L10N = True
│   │     USE_TZ = True
│   │     STATIC_URL = '/static/'
│   │     STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]
│   │     MEDIA_URL = '/media/'
│   │     MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
│   │     DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
│   │     LOGIN_URL = '/accounts/login/'
│   │     LOGIN_REDIRECT_URL = 'intranet_core:dashboard'
│   │     LOGOUT_REDIRECT_URL = 'intranet_core:dashboard'
│   │   --- FIN CONTENIDO (settings.py) ---

│   ├── urls.py
│   │   📄 CONTENIDO DEL ARCHIVO (urls.py):
│   │     # /workspaces/intranet_gem/intranet_gem/urls.py
│   │     from django.contrib import admin
│   │     from django.urls import path, include
│   │     from django.conf import settings
│   │     from django.conf.urls.static import static
│   │     
│   │     urlpatterns = [
│   │         path('admin/', admin.site.urls),
│   │         path('accounts/', include('django.contrib.auth.urls')),
│   │     
│   │         # Inclusión explícita del namespace para intranet_core
│   │         # El segundo 'intranet_core' en la tupla es el app_name que Django usará para construir el namespace completo.
│   │         # El 'namespace' kwarg es el instance namespace. Para una sola instancia de la app, suelen ser iguales.
│   │         path('', include(('intranet_core.urls', 'intranet_core'), namespace='intranet_core')),
│   │     ]
│   │     
│   │     if settings.DEBUG:
│   │         urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
│   │   --- FIN CONTENIDO (urls.py) ---

│   └── wsgi.py
│       📄 CONTENIDO DEL ARCHIVO (wsgi.py):
│         """
│         WSGI config for intranet_gem project.
│         
│         It exposes the WSGI callable as a module-level variable named ``application``.
│         
│         For more information on this file, see
│         https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
│         """
│         
│         import os
│         
│         from django.core.wsgi import get_wsgi_application
│         
│         os.environ.setdefault("DJANGO_SETTINGS_MODULE", "intranet_gem.settings")
│         
│         application = get_wsgi_application()
│       --- FIN CONTENIDO (wsgi.py) ---


├── manage.py
│   📄 CONTENIDO DEL ARCHIVO (manage.py):
│     #!/usr/bin/env python
│     """Django's command-line utility for administrative tasks."""
│     import os
│     import sys
│     
│     
│     def main():
│         """Run administrative tasks."""
│         os.environ.setdefault("DJANGO_SETTINGS_MODULE", "intranet_gem.settings")
│         try:
│             from django.core.management import execute_from_command_line
│         except ImportError as exc:
│             raise ImportError(
│                 "Couldn't import Django. Are you sure it's installed and "
│                 "available on your PYTHONPATH environment variable? Did you "
│                 "forget to activate a virtual environment?"
│             ) from exc
│         execute_from_command_line(sys.argv)
│     
│     
│     if __name__ == "__main__":
│         main()
│   --- FIN CONTENIDO (manage.py) ---

├── media
│   └── archivos
│       └── user_1
│           ├── 292643574_389398936508841_592385954277519704_n.jpg

│           ├── descarga.png

│           ├── descarga_NU3DW0s.png

│           └── drive-download-20241107T110122Z-001.zip




├── static
│   ├── css
│   │   └── intranet_styles.css
│   │       📄 CONTENIDO DEL ARCHIVO (intranet_styles.css):
│   │         /* static/css/intranet_styles.css */
│   │         body {
│   │             font-family: 'Inter', sans-serif;
│   │             transition: background-color 0.3s, color 0.3s;
│   │         }
│   │         /* Colores Institucionales (Ejemplo Gobierno de Chile, adaptables) */
│   │         :root {
│   │             --main-primary-bg: #0033A0; /* Azul principal */
│   │             --main-primary-text: #0033A0;
│   │             --main-primary-border: #0033A0;
│   │             --main-primary-dark-bg: #00227A; /* Azul más oscuro para hover/active */
│   │         
│   │             --main-secondary-bg: #D90F2C; /* Rojo secundario/acento */
│   │             --main-secondary-text: #D90F2C;
│   │             --main-secondary-border: #D90F2C;
│   │             --main-secondary-dark-bg: #B00C24;
│   │             
│   │             --main-white-text: #FFFFFF;
│   │             --main-white-bg: #FFFFFF;
│   │         
│   │             --text-color: #1f2937; /* Tailwind gray-800 */
│   │             --bg-color: #f9fafb; /* Tailwind gray-50 */
│   │             --card-bg-color: #FFFFFF;
│   │             --sidebar-bg-color: var(--main-primary-bg);
│   │             --sidebar-text-color: var(--main-white-text); /* Color de texto por defecto para la sidebar */
│   │             --sidebar-header-bg-color: #002a80; /* Un azul un poco más oscuro para el header del sidebar */
│   │             --header-bg-color: var(--main-white-bg);
│   │             --header-text-color: var(--main-primary-text);
│   │         }
│   │         
│   │         body.dark-mode {
│   │             --text-color: #d1d5db; /* Tailwind gray-300 */
│   │             --bg-color: #111827; /* Tailwind gray-900 */
│   │             --card-bg-color: #1f2937; /* Tailwind gray-800 */
│   │             --sidebar-bg-color: #1f2937; /* Un gris oscuro para el sidebar en modo oscuro */
│   │             --sidebar-text-color: #e5e7eb; /* Tailwind gray-200 */
│   │             --sidebar-header-bg-color: #111827; /* Más oscuro */
│   │             --header-bg-color: #1f2937;
│   │             --header-text-color: var(--main-white-text);
│   │         }
│   │         
│   │         /* Aplicación de variables CSS */
│   │         body { background-color: var(--bg-color); color: var(--text-color); }
│   │         .bg-card { background-color: var(--card-bg-color); }
│   │         .text-default { color: var(--text-color); }
│   │         .text-muted { color: var(--text-color); opacity: 0.7; }
│   │         
│   │         .bg-sidebar { background-color: var(--sidebar-bg-color); }
│   │         .text-sidebar { color: var(--sidebar-text-color); }
│   │         .bg-sidebar-header { background-color: var(--sidebar-header-bg-color); }
│   │         
│   │         .bg-header { background-color: var(--header-bg-color); }
│   │         .text-header-title { color: var(--header-text-color); }
│   │         
│   │         
│   │         .bg-main-primary { background-color: var(--main-primary-bg); }
│   │         .text-main-primary { color: var(--main-primary-text); }
│   │         .border-main-primary { border-color: var(--main-primary-border); }
│   │         .hover\:bg-main-primary-dark:hover { background-color: var(--main-primary-dark-bg); }
│   │         .bg-main-primary-dark { background-color: var(--main-primary-dark-bg); } 
│   │         
│   │         .bg-main-secondary { background-color: var(--main-secondary-bg); }
│   │         .text-main-secondary { color: var(--main-secondary-text); }
│   │         .border-main-secondary { border-color: var(--main-secondary-border); }
│   │         .hover\:bg-main-secondary-dark:hover { background-color: var(--main-secondary-dark-bg); }
│   │         
│   │         .text-main-white { color: var(--main-white-text); }
│   │         .bg-main-white { background-color: var(--main-white-bg); }
│   │         
│   │         
│   │         /* Estilo para la barra de scroll */
│   │         ::-webkit-scrollbar { width: 8px; height: 8px; }
│   │         ::-webkit-scrollbar-track { background: #f0f4f8; }
│   │         body.dark-mode ::-webkit-scrollbar-track { background: #2d3748; }
│   │         ::-webkit-scrollbar-thumb { background: #a0aec0; border-radius: 4px; }
│   │         body.dark-mode ::-webkit-scrollbar-thumb { background: #4b5563; }
│   │         ::-webkit-scrollbar-thumb:hover { background: #718096; }
│   │         body.dark-mode ::-webkit-scrollbar-thumb:hover { background: #6b7280; }
│   │         
│   │         @media print { .print-hidden { display: none !important; } }
│   │         
│   │         .calendar-grid { display: grid; grid-template-columns: repeat(7, minmax(0, 1fr)); gap: 1px; background-color: #e2e8f0; border: 1px solid #e2e8f0; }
│   │         body.dark-mode .calendar-grid { background-color: #374151; border-color: #374151; }
│   │         .calendar-day-header, .calendar-day { background-color: var(--card-bg-color); padding: 0.75rem; text-align: center; font-size: 0.875rem; }
│   │         .calendar-day-header { font-weight: 600; color: var(--text-color); opacity: 0.8; }
│   │         .calendar-day { min-height: 6rem; color: var(--text-color); }
│   │         .calendar-day.other-month { color: var(--text-color); opacity: 0.5; background-color: var(--bg-color); }
│   │         .calendar-day .event { display: block; font-size: 0.75rem; padding: 0.25rem; margin-top: 0.25rem; border-radius: 0.25rem; color: white; }
│   │         
│   │         .form-field-palette-item { cursor: grab; }
│   │         .form-canvas { min-height: 200px; border: 2px dashed #cbd5e0; }
│   │         body.dark-mode .form-canvas { border-color: #4b5563; }
│   │         
│   │         #notifications-panel {
│   │             max-height: 400px;
│   │             overflow-y: auto;
│   │         }
│   │       --- FIN CONTENIDO (intranet_styles.css) ---


│   ├── images

│   └── js
│       └── intranet_scripts.js
│           📄 CONTENIDO DEL ARCHIVO (intranet_scripts.js):
│             // static/js/intranet_scripts.js
│             document.addEventListener('DOMContentLoaded', function () {
│                 const userMenuButton = document.getElementById('user-menu-button');
│                 const userMenu = document.getElementById('user-menu');
│                 const sidebarToggle = document.getElementById('sidebar-toggle');
│                 const sidebar = document.getElementById('sidebar');
│             
│                 const themeToggleButton = document.getElementById('theme-toggle');
│                 const themeToggleIcon = themeToggleButton ? themeToggleButton.querySelector('i') : null;
│                 const notificationsButton = document.getElementById('notifications-button');
│                 const notificationsPanel = document.getElementById('notifications-panel');
│                 const currentYearSpan = document.getElementById('currentYear');
│             
│                 if (currentYearSpan) {
│                     currentYearSpan.textContent = new Date().getFullYear();
│                 }
│                 
│                 const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
│                 if (localStorage.getItem('theme') === 'dark' || (!localStorage.getItem('theme') && prefersDark.matches)) {
│                     document.body.classList.add('dark-mode');
│                     if (themeToggleIcon) {
│                         themeToggleIcon.classList.remove('fa-moon');
│                         themeToggleIcon.classList.add('fa-sun');
│                     }
│                 }
│             
│                 if (themeToggleButton) {
│                     themeToggleButton.addEventListener('click', () => {
│                         document.body.classList.toggle('dark-mode');
│                         const isDarkMode = document.body.classList.contains('dark-mode');
│                         localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
│                         if (themeToggleIcon) {
│                             themeToggleIcon.classList.toggle('fa-moon', !isDarkMode);
│                             themeToggleIcon.classList.toggle('fa-sun', isDarkMode);
│                         }
│                     });
│                 }
│                 
│                 if (userMenuButton && userMenu) {
│                     userMenuButton.addEventListener('click', (event) => {
│                         event.stopPropagation(); 
│                         userMenu.classList.toggle('hidden');
│                         if (notificationsPanel && !notificationsPanel.classList.contains('hidden')) {
│                             notificationsPanel.classList.add('hidden');
│                         }
│                     });
│                 }
│             
│                 if (notificationsButton && notificationsPanel) {
│                     notificationsButton.addEventListener('click', (event) => {
│                         event.stopPropagation(); 
│                         notificationsPanel.classList.toggle('hidden');
│                         if (userMenu && !userMenu.classList.contains('hidden')) {
│                             userMenu.classList.add('hidden');
│                         }
│                     });
│                 }
│             
│                 document.addEventListener('click', (event) => {
│                     if (userMenuButton && userMenu && !userMenu.classList.contains('hidden') && !userMenuButton.contains(event.target) && !userMenu.contains(event.target)) {
│                         userMenu.classList.add('hidden');
│                     }
│                     if (notificationsButton && notificationsPanel && !notificationsPanel.classList.contains('hidden') && !notificationsButton.contains(event.target) && !notificationsPanel.contains(event.target)) {
│                         notificationsPanel.classList.add('hidden');
│                     }
│                 });
│             
│                 if (sidebarToggle && sidebar) {
│                     sidebarToggle.addEventListener('click', () => {
│                         sidebar.classList.toggle('-translate-x-full'); 
│                     });
│                 }
│             
│                 const navLinksForMobileSidebar = document.querySelectorAll('#sidebar .nav-link');
│                 navLinksForMobileSidebar.forEach(link => {
│                     link.addEventListener('click', (e) => {
│                         if (link.getAttribute('href') && link.getAttribute('href') !== '#') {
│                             if (sidebar && window.innerWidth < 768 && !sidebar.classList.contains('-translate-x-full')) { 
│                                 sidebar.classList.add('-translate-x-full');
│                             }
│                         }
│                         const notificationsNavLink = link.closest('#notifications-panel');
│                         if (notificationsNavLink && notificationsPanel && !notificationsPanel.classList.contains('hidden')) {
│                              notificationsPanel.classList.add('hidden');
│                         }
│                     });
│                 });
│             
│                 const fileUploadInput = document.getElementById('file-upload');
│                 const fileListDisplay = document.getElementById('file-list-display');
│                 if (fileUploadInput && fileListDisplay) {
│                     fileUploadInput.addEventListener('change', function() {
│                         if (this.files && this.files.length > 0) {
│                             let fileNames = Array.from(this.files).map(file => file.name).join(', ');
│                             fileListDisplay.textContent = 'Archivos seleccionados: ' + fileNames;
│                         } else { 
│                             fileListDisplay.textContent = ''; 
│                         }
│                     });
│                 }
│             });
│           --- FIN CONTENIDO (intranet_scripts.js) ---



├── templates
│   ├── base.html
│   │   📄 CONTENIDO DEL ARCHIVO (base.html):
│   │     {% load static %}
│   │     <!DOCTYPE html>
│   │     <html lang="es">
│   │     <head>
│   │         <meta charset="UTF-8">
│   │         <meta name="viewport" content="width=device-width, initial-scale=1.0">
│   │         <title>{% block title_tag %}Intranet Profesional{% endblock %} - Institución Mejorada</title>
│   │         <script src="https://cdn.tailwindcss.com"></script>
│   │         <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
│   │         <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
│   │         <link rel="stylesheet" href="{% static 'css/intranet_styles.css' %}">
│   │     </head>
│   │     <body class="bg-gray-100">
│   │         <div class="flex h-screen">
│   │             <aside id="sidebar" class="w-64 bg-sidebar text-sidebar flex-col print-hidden transition-transform duration-300 ease-in-out transform -translate-x-full md:translate-x-0 md:flex">
│   │                 <div class="h-20 flex items-center justify-center bg-sidebar-header">
│   │                     <svg class="h-10 w-10 text-main-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
│   │                         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M3.75 21h16.5M4.5 3h15M5.25 3v18m13.5-18v18M9 6.75h6.75M9 12.75h6.75M9 18h6.75M5.25 6h.008v.008H5.25V6zm0 6h.008v.008H5.25v-6zm0 6h.008v.008H5.25v-6z"/>
│   │                     </svg>
│   │                     <span class="ml-2 text-xl font-semibold text-main-white">Intranet</span>
│   │                 </div>
│   │                 <nav class="flex-1 px-2 py-4 space-y-1 overflow-y-auto">
│   │                     <a href="{% url 'intranet_core:dashboard' %}" class="nav-link flex items-center px-3 py-3 text-sm font-medium rounded-md transition-colors duration-150 {% if active_nav == 'dashboard' %}bg-main-primary-dark text-white{% else %}text-gray-200 hover:bg-main-primary-dark hover:text-white{% endif %}"><i class="fas fa-tachometer-alt w-5 h-5 mr-3"></i> Panel Principal</a>
│   │                     <a href="{% url 'intranet_core:carga_archivos' %}" class="nav-link flex items-center px-3 py-3 text-sm font-medium rounded-md transition-colors duration-150 {% if active_nav == 'carga_archivos' %}bg-main-primary-dark text-white{% else %}text-gray-200 hover:bg-main-primary-dark hover:text-white{% endif %}"><i class="fas fa-folder-open w-5 h-5 mr-3"></i> Gestor de Archivos</a>
│   │                     <a href="{% url 'intranet_core:formularios' %}" class="nav-link flex items-center px-3 py-3 text-sm font-medium rounded-md transition-colors duration-150 {% if active_nav == 'formularios' %}bg-main-primary-dark text-white{% else %}text-gray-200 hover:bg-main-primary-dark hover:text-white{% endif %}"><i class="fas fa-edit w-5 h-5 mr-3"></i> Creador Formularios</a>
│   │                     <a href="{% url 'intranet_core:calendario' %}" class="nav-link flex items-center px-3 py-3 text-sm font-medium rounded-md transition-colors duration-150 {% if active_nav == 'calendario' %}bg-main-primary-dark text-white{% else %}text-gray-200 hover:bg-main-primary-dark hover:text-white{% endif %}"><i class="fas fa-calendar-alt w-5 h-5 mr-3"></i> Calendario Actividades</a>
│   │                     <a href="{% url 'intranet_core:responsabilidades' %}" class="nav-link flex items-center px-3 py-3 text-sm font-medium rounded-md transition-colors duration-150 {% if active_nav == 'responsabilidades' %}bg-main-primary-dark text-white{% else %}text-gray-200 hover:bg-main-primary-dark hover:text-white{% endif %}"><i class="fas fa-sitemap w-5 h-5 mr-3"></i> Gestión Responsabilidades</a>
│   │                     <a href="{% url 'intranet_core:directorio' %}" class="nav-link flex items-center px-3 py-3 text-sm font-medium rounded-md transition-colors duration-150 {% if active_nav == 'directorio' %}bg-main-primary-dark text-white{% else %}text-gray-200 hover:bg-main-primary-dark hover:text-white{% endif %}"><i class="fas fa-address-book w-5 h-5 mr-3"></i> Directorio Usuarios</a>
│   │                     <a href="{% url 'intranet_core:reservas' %}" class="nav-link flex items-center px-3 py-3 text-sm font-medium rounded-md transition-colors duration-150 {% if active_nav == 'reservas' %}bg-main-primary-dark text-white{% else %}text-gray-200 hover:bg-main-primary-dark hover:text-white{% endif %}"><i class="fas fa-calendar-check w-5 h-5 mr-3"></i> Reserva de Recursos</a>
│   │                     <a href="{% url 'intranet_core:wiki' %}" class="nav-link flex items-center px-3 py-3 text-sm font-medium rounded-md transition-colors duration-150 {% if active_nav == 'wiki' %}bg-main-primary-dark text-white{% else %}text-gray-200 hover:bg-main-primary-dark hover:text-white{% endif %}"><i class="fas fa-book-open w-5 h-5 mr-3"></i> Base de Conocimiento</a>
│   │                     <a href="{% url 'intranet_core:notificaciones_page' %}" class="nav-link flex items-center px-3 py-3 text-sm font-medium rounded-md transition-colors duration-150 {% if active_nav == 'notificaciones_page' %}bg-main-primary-dark text-white{% else %}text-gray-200 hover:bg-main-primary-dark hover:text-white{% endif %}">
│   │                         <i class="fas fa-bell w-5 h-5 mr-3"></i> Notificaciones
│   │                         <span class="ml-auto inline-block py-0.5 px-2 text-xs font-semibold text-main-secondary bg-main-white rounded-full">{{ notification_count|default:0 }}</span>
│   │                     </a>
│   │                     <div class="pt-4 mt-4 border-t" style="border-color: var(--main-primary-dark-bg);">
│   │                         <h6 class="px-3 mb-2 text-xs font-semibold uppercase tracking-wider" style="color: var(--main-white-text); opacity:0.7;">Administración</h6>
│   │                         <a href="{% url 'intranet_core:usuarios_gestion' %}" class="nav-link flex items-center px-3 py-3 text-sm font-medium rounded-md transition-colors duration-150 {% if active_nav == 'usuarios_gestion' %}bg-main-primary-dark text-white{% else %}text-gray-200 hover:bg-main-primary-dark hover:text-white{% endif %}"><i class="fas fa-users-cog w-5 h-5 mr-3"></i> Gestión Usuarios</a>
│   │                     </div>
│   │                 </nav>
│   │                 <div class="p-4 border-t mt-auto" style="border-color: var(--main-primary-dark-bg);"><p class="text-xs" style="color: var(--main-white-text); opacity:0.7;">&copy; <span id="currentYear"></span> Nuestra Institución</p></div>
│   │             </aside>
│   │             <div class="flex-1 flex flex-col overflow-hidden">
│   │                 <header class="bg-header shadow-md p-4 flex justify-between items-center print-hidden">
│   │                     <div class="flex items-center">
│   │                         <button id="sidebar-toggle" class="text-default hover:text-main-primary focus:outline-none md:hidden"><i class="fas fa-bars fa-lg"></i></button>
│   │                         <h1 id="main-title" class="text-2xl font-semibold text-header-title ml-2 md:ml-0">{% block page_title_header %}{{ page_title_for_header|default:"Panel Principal" }}{% endblock %}</h1>
│   │                     </div>
│   │                     <div class="flex items-center space-x-3 md:space-x-4">
│   │                         <button id="search-button" class="text-default hover:text-main-primary focus:outline-none"> <i class="fas fa-search fa-lg"></i> </button>
│   │                         <button id="theme-toggle" class="text-default hover:text-main-primary focus:outline-none"><i class="fas fa-moon fa-lg"></i></button>
│   │                         <div class="relative">
│   │                             <button id="notifications-button" class="text-default hover:text-main-primary focus:outline-none">
│   │                                 <i class="fas fa-bell fa-lg"></i>
│   │                                 <span class="absolute -top-1 -right-1 flex h-3 w-3">
│   │                                     <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-main-secondary opacity-75"></span>
│   │                                     <span class="relative inline-flex rounded-full h-3 w-3 bg-main-secondary"></span>
│   │                                 </span>
│   │                             </button>
│   │                             <div id="notifications-panel" class="hidden absolute right-0 mt-2 w-80 md:w-96 bg-card rounded-md shadow-xl z-50 border border-gray-200 dark:border-gray-700">
│   │                                 <div class="p-3 border-b border-gray-200 dark:border-gray-700"><h6 class="font-semibold text-default">Notificaciones</h6></div>
│   │                                 <div class="divide-y divide-gray-100 dark:divide-gray-700 max-h-80 overflow-y-auto">
│   │                                     <a href="#" class="block p-3 hover:bg-gray-50 dark:hover:bg-gray-700"><p class="text-sm font-medium text-default">Nueva tarea asignada: <span class="font-bold">Revisar informe</span></p><p class="text-xs text-muted">Hace 5 minutos</p></a>
│   │                                     <a href="#" class="block p-3 hover:bg-gray-50 dark:hover:bg-gray-700"><p class="text-sm text-default">Recordatorio: <span class="font-bold">Reunión de equipo</span> mañana a las 10 AM.</p><p class="text-xs text-muted">Hace 1 hora</p></a>
│   │                                 </div>
│   │                                 <div class="p-2 text-center border-t border-gray-200 dark:border-gray-700"><a href="{% url 'intranet_core:notificaciones_page' %}" class="text-sm text-main-primary hover:underline nav-link">Ver todas</a></div>
│   │                             </div>
│   │                         </div>
│   │                         <div class="relative">
│   │                             <button id="user-menu-button" class="flex items-center space-x-2 focus:outline-none">
│   │                                 <img src="{% static 'images/default_avatar.png' %}" alt="Avatar Usuario" class="w-9 h-9 rounded-full border-2 border-gray-300 hover:border-main-primary transition-colors">
│   │                                 <span class="text-sm font-medium text-default hidden md:block">{% if user.is_authenticated %}{{ user.get_full_name|default:user.username }}{% else %}Invitado{% endif %}</span>
│   │                                 <i class="fas fa-chevron-down text-xs text-default opacity-70"></i>
│   │                             </button>
│   │                             <div id="user-menu" class="hidden absolute right-0 mt-2 w-56 bg-card rounded-md shadow-xl py-1 z-50 border border-gray-200 dark:border-gray-700">
│   │                                 {% if user.is_authenticated %}
│   │                                     <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-700"><p class="text-sm font-semibold text-main-primary">{{ user.get_full_name|default:user.username }}</p><p class="text-xs text-muted">{{ user.email|default:"-" }}</p></div>
│   │                                     <a href="{% url 'intranet_core:perfil' %}" class="block px-4 py-2 text-sm text-default hover:bg-main-primary hover:text-main-white transition-colors">Mi Perfil</a>
│   │                                     <a href="{% url 'intranet_core:configuracion' %}" class="block px-4 py-2 text-sm text-default hover:bg-main-primary hover:text-main-white transition-colors">Configuración</a>
│   │                                     <hr class="my-1 border-gray-200 dark:border-gray-700">
│   │                                     <form method="post" action="{% url 'logout' %}">{% csrf_token %}<button type="submit" id="logout-button" class="w-full text-left block px-4 py-2 text-sm text-main-secondary hover:bg-main-secondary hover:text-main-white transition-colors">Cerrar Sesión</button></form>
│   │                                 {% else %}
│   │                                      <a href="{% url 'login' %}" class="block px-4 py-2 text-sm text-main-primary hover:bg-main-primary hover:text-main-white transition-colors">Iniciar Sesión</a>
│   │                                 {% endif %}
│   │                             </div>
│   │                         </div>
│   │                     </div>
│   │                 </header>
│   │                 <main class="flex-1 overflow-x-hidden overflow-y-auto p-4 md:p-6 lg:p-8">
│   │                     {% block content %}{% endblock %}
│   │                 </main>
│   │             </div>
│   │         </div>
│   │         <script src="{% static 'js/intranet_scripts.js' %}"></script>
│   │         {% block extra_js %}{% endblock %}
│   │     </body>
│   │     </html>
│   │   --- FIN CONTENIDO (base.html) ---

│   ├── intranet_core
│   │   ├── calendario.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (calendario.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Calendario de Actividades{% endblock %}
│   │   │     {% block page_title_header %}Calendario de Actividades{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="content-section">
│   │   │         <div class="flex justify-between items-center mb-6">
│   │   │             <h2 class="text-xl md:text-2xl font-semibold text-main-primary">Calendario de Actividades</h2>
│   │   │             <button class="bg-main-secondary hover:bg-main-secondary-dark text-main-white font-medium py-2 px-4 rounded-md flex items-center">
│   │   │                 <i class="fas fa-plus mr-2"></i> Nueva Actividad
│   │   │             </button>
│   │   │         </div>
│   │   │          <div class="bg-card p-4 md:p-6 rounded-xl shadow-lg">
│   │   │             <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md p-8 text-center">
│   │   │                 <i class="fas fa-calendar-alt fa-3x text-gray-400 mb-4"></i>
│   │   │                 <p class="text-muted py-8">Un calendario interactivo (como FullCalendar.js o similar) se integraría aquí.</p>
│   │   │                 <p class="text-sm text-muted mt-2">La implementación de un calendario funcional requiere una librería de JavaScript y lógica de backend para manejar eventos.</p>
│   │   │                 <div class="mt-6">
│   │   │                     <div class="flex justify-between items-center mb-4">
│   │   │                         <button class="text-main-primary"><i class="fas fa-chevron-left"></i> Mes Anterior</button>
│   │   │                         <h3 class="text-lg font-semibold text-default">Mayo 2025</h3>
│   │   │                         <button class="text-main-primary">Mes Siguiente <i class="fas fa-chevron-right"></i></button>
│   │   │                     </div>
│   │   │                     <div class="calendar-grid">
│   │   │                         <div class="calendar-day-header">Lun</div>
│   │   │                         <div class="calendar-day-header">Mar</div>
│   │   │                         <div class="calendar-day-header">Mié</div>
│   │   │                         <div class="calendar-day-header">Jue</div>
│   │   │                         <div class="calendar-day-header">Vie</div>
│   │   │                         <div class="calendar-day-header">Sáb</div>
│   │   │                         <div class="calendar-day-header">Dom</div>
│   │   │                         
│   │   │                         {% for day in ""|center:35 %} {# Simula celdas de un mes #}
│   │   │                         <div class="calendar-day {% if forloop.counter < 5 or forloop.counter > 32 %}other-month{% endif %}">
│   │   │                             <span class="text-sm">{{ forloop.counter0|add:28|remainder:31|add:1 }}</span>
│   │   │                             {% if forloop.counter == 15 %}
│   │   │                             <span class="event bg-blue-500">Reunión Equipo</span>
│   │   │                             {% endif %}
│   │   │                             {% if forloop.counter == 22 %}
│   │   │                             <span class="event bg-red-500">Entrega Informe</span>
│   │   │                             {% endif %}
│   │   │                         </div>
│   │   │                         {% endfor %}
│   │   │                     </div>
│   │   │                 </div>
│   │   │             </div>
│   │   │          </div>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (calendario.html) ---

│   │   ├── carga_archivos.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (carga_archivos.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Gestor de Archivos{% endblock %}
│   │   │     {% block page_title_header %}Gestor de Archivos{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
│   │   │         <h2 class="text-2xl font-semibold text-main-primary dark:text-blue-400">Gestor de Archivos</h2>
│   │   │         <button type="button" onclick="document.getElementById('modal-crear-carpeta').classList.remove('hidden'); document.getElementById('modal-crear-carpeta').querySelector('input[name=\'nombre\']').focus();" 
│   │   │                 class="bg-main-secondary hover:bg-main-secondary-dark text-main-white font-medium py-2 px-4 rounded-md flex items-center text-sm transition-colors duration-150">
│   │   │             <i class="fas fa-folder-plus mr-2"></i> Nueva Carpeta
│   │   │         </button>
│   │   │     </div>
│   │   │     
│   │   │     {# Modal para Crear Carpeta #}
│   │   │     <div id="modal-crear-carpeta" class="fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto h-full w-full flex items-center justify-center hidden z-50 transition-opacity duration-300 ease-out" onclick="event.target === this && this.classList.add('hidden')">
│   │   │         <div class="relative mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-card dark:bg-gray-800" onclick="event.stopPropagation();">
│   │   │             <div class="mt-3">
│   │   │                 <div class="flex justify-between items-center mb-4">
│   │   │                     <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-gray-100">Crear Nueva Carpeta</h3>
│   │   │                     <button type="button" onclick="document.getElementById('modal-crear-carpeta').classList.add('hidden')" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
│   │   │                         <i class="fas fa-times fa-lg"></i>
│   │   │                     </button>
│   │   │                 </div>
│   │   │                 <form method="POST" action="{% url 'intranet_core:carga_archivos' %}" class="space-y-4">
│   │   │                     {% csrf_token %}
│   │   │                     <input type="hidden" name="action" value="create_folder">
│   │   │                     <div>
│   │   │                         <label for="{{ form_crear_carpeta.nombre.id_for_label }}" class="sr-only">{{ form_crear_carpeta.nombre.label }}</label>
│   │   │                         {{ form_crear_carpeta.nombre }} {# Widget ya tiene clases de forms.py #}
│   │   │                         {% if form_crear_carpeta.nombre.errors %}
│   │   │                             {% for error in form_crear_carpeta.nombre.errors %}
│   │   │                                 <p class="mt-1 text-xs text-red-600 dark:text-red-400"><i class="fas fa-exclamation-triangle mr-1"></i>{{ error }}</p>
│   │   │                             {% endfor %}
│   │   │                         {% endif %}
│   │   │                          {% if form_crear_carpeta.non_field_errors %} {# Errores generales del form de carpeta, ej. unique_together #}
│   │   │                             {% for error in form_crear_carpeta.non_field_errors %}
│   │   │                                 <p class="mt-1 text-xs text-red-600 dark:text-red-400"><i class="fas fa-exclamation-triangle mr-1"></i>{{ error }}</p>
│   │   │                             {% endfor %}
│   │   │                         {% endif %}
│   │   │                     </div>
│   │   │                     <div class="flex justify-end items-center pt-3 space-x-3">
│   │   │                         <button type="button" onclick="document.getElementById('modal-crear-carpeta').classList.add('hidden')" class="px-4 py-2 bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 text-base font-medium rounded-md hover:bg-gray-300 dark:hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400 dark:focus:ring-offset-gray-800">
│   │   │                             Cancelar
│   │   │                         </button>
│   │   │                         <button id="ok-btn-crear-carpeta" type="submit" class="px-4 py-2 bg-main-primary text-white text-base font-medium rounded-md hover:bg-main-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-main-primary-dark dark:focus:ring-offset-gray-800">
│   │   │                             Crear Carpeta
│   │   │                         </button>
│   │   │                     </div>
│   │   │                 </form>
│   │   │             </div>
│   │   │         </div>
│   │   │     </div>
│   │   │     
│   │   │     {# Sección de mensajes de Django #}
│   │   │     <div id="django-messages-container" class="mb-6 space-y-3">
│   │   │     {% if messages %}
│   │   │         {% for message in messages %}
│   │   │             <div class="p-4 rounded-md text-sm {% if message.tags == 'success' %}bg-green-100 border border-green-300 text-green-700 dark:bg-green-800 dark:border-green-600 dark:text-green-200{% elif message.tags == 'error' %}bg-red-100 border border-red-300 text-red-700 dark:bg-red-800 dark:border-red-600 dark:text-red-200{% else %}bg-blue-100 border border-blue-300 text-blue-700 dark:bg-blue-800 dark:border-blue-600 dark:text-blue-200{% endif %}" role="alert">
│   │   │                 <i class="fas {% if message.tags == 'success' %}fa-check-circle{% elif message.tags == 'error' %}fa-exclamation-circle{% else %}fa-info-circle{% endif %} mr-2"></i>
│   │   │                 {{ message }}
│   │   │             </div>
│   │   │         {% endfor %}
│   │   │     {% endif %}
│   │   │     </div>
│   │   │     
│   │   │     
│   │   │     {# Formulario para subir archivos #}
│   │   │     <div class="bg-card dark:bg-gray-800 p-6 md:p-8 rounded-xl shadow-lg mb-8">
│   │   │         <h3 class="text-xl font-semibold text-default dark:text-gray-100 mb-5 border-b border-gray-200 dark:border-gray-700 pb-3">Subir Nuevo Archivo</h3>
│   │   │         <form method="POST" enctype="multipart/form-data" action="{% url 'intranet_core:carga_archivos' %}" class="space-y-6">
│   │   │             {% csrf_token %} {# No action input aquí, la vista lo detectará como subida de archivo por defecto #}
│   │   │     
│   │   │             {% if form_carga_archivo.non_field_errors %}
│   │   │                 <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 dark:bg-red-800 dark:border-red-600 dark:text-red-200" role="alert">
│   │   │                     <p class="font-bold">Error general al subir archivo:</p>
│   │   │                     <ul class="mt-1 list-disc list-inside text-sm">
│   │   │                     {% for error in form_carga_archivo.non_field_errors %}
│   │   │                         <li>{{ error }}</li>
│   │   │                     {% endfor %}
│   │   │                     </ul>
│   │   │                 </div>
│   │   │             {% endif %}
│   │   │     
│   │   │             <div>
│   │   │                 <label for="{{ form_carga_archivo.nombre_descriptivo.id_for_label }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{{ form_carga_archivo.nombre_descriptivo.label }}</label>
│   │   │                 {{ form_carga_archivo.nombre_descriptivo }}
│   │   │                 {% if form_carga_archivo.nombre_descriptivo.help_text %}<p class="mt-2 text-xs text-gray-500 dark:text-gray-400">{{ form_carga_archivo.nombre_descriptivo.help_text }}</p>{% endif %}
│   │   │                 {% for error in form_carga_archivo.nombre_descriptivo.errors %}<p class="mt-1 text-xs text-red-600 dark:text-red-400"><i class="fas fa-exclamation-triangle mr-1"></i>{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │     
│   │   │             <div>
│   │   │                 <label for="{{ form_carga_archivo.archivo_subido.id_for_label }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{{ form_carga_archivo.archivo_subido.label }}</label>
│   │   │                 {{ form_carga_archivo.archivo_subido }}
│   │   │                 <p id="file-upload-filename" class="mt-2 text-xs text-gray-500 dark:text-gray-400"></p>
│   │   │                 {% if form_carga_archivo.archivo_subido.help_text %}<p class="mt-2 text-xs text-gray-500 dark:text-gray-400">{{ form_carga_archivo.archivo_subido.help_text }}</p>{% endif %}
│   │   │                 {% for error in form_carga_archivo.archivo_subido.errors %}<p class="mt-1 text-xs text-red-600 dark:text-red-400"><i class="fas fa-exclamation-triangle mr-1"></i>{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │             
│   │   │             {% if form_carga_archivo.fields.carpeta %}
│   │   │             <div>
│   │   │                 <label for="{{ form_carga_archivo.carpeta.id_for_label }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{{ form_carga_archivo.carpeta.label }}</label>
│   │   │                 {{ form_carga_archivo.carpeta }}
│   │   │                 {% if form_carga_archivo.carpeta.help_text %}<p class="mt-2 text-xs text-gray-500 dark:text-gray-400">{{ form_carga_archivo.carpeta.help_text }}</p>{% endif %}
│   │   │                 {% for error in form_carga_archivo.carpeta.errors %}<p class="mt-1 text-xs text-red-600 dark:text-red-400"><i class="fas fa-exclamation-triangle mr-1"></i>{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │             {% endif %}
│   │   │     
│   │   │             <div class="pt-2">
│   │   │                 <button type="submit" class="w-full md:w-auto bg-main-primary hover:bg-main-primary-dark text-main-white font-semibold py-2.5 px-6 rounded-lg flex items-center justify-center text-sm transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-main-primary-dark dark:focus:ring-offset-gray-800">
│   │   │                     <i class="fas fa-upload mr-2"></i> Subir Archivo
│   │   │                 </button>
│   │   │             </div>
│   │   │         </form>
│   │   │     </div>
│   │   │     
│   │   │     {# Listado de Carpetas y Archivos #}
│   │   │     <div class="bg-card dark:bg-gray-800 p-6 md:p-8 rounded-xl shadow-lg">
│   │   │         <h3 class="text-xl font-semibold text-default dark:text-gray-100 mb-5 border-b border-gray-200 dark:border-gray-700 pb-3">
│   │   │             Mis Archivos y Carpetas (Raíz)
│   │   │             {# Aquí irían breadcrumbs si se implementa navegación de carpetas #}
│   │   │         </h3>
│   │   │         
│   │   │         {% if carpetas %}
│   │   │         <div class="mb-8">
│   │   │             <h4 class="text-lg font-medium text-gray-700 dark:text-gray-300 mb-3">Carpetas</h4>
│   │   │             <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">
│   │   │                 {% for carpeta_item in carpetas %}
│   │   │                 {# El enlace '#' es un placeholder. Para navegación real, apuntaría a una URL con el ID de la carpeta. #}
│   │   │                 <a href="#" class="group block p-4 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-all duration-200 ease-in-out shadow hover:shadow-md text-center">
│   │   │                     <i class="fas fa-folder fa-3x text-yellow-500 dark:text-yellow-400 mb-2 group-hover:scale-110 transition-transform"></i>
│   │   │                     <span class="text-sm font-medium text-gray-800 dark:text-gray-200 block truncate" title="{{ carpeta_item.nombre }}">{{ carpeta_item.nombre }}</span>
│   │   │                 </a>
│   │   │                 {% endfor %}
│   │   │             </div>
│   │   │         </div>
│   │   │         {% endif %}
│   │   │     
│   │   │         <h4 class="text-lg font-medium text-gray-700 dark:text-gray-300 mb-3 {% if carpetas %}mt-8 pt-4 border-t border-gray-200 dark:border-gray-700{% endif %}">Archivos en Raíz</h4>
│   │   │         {% if archivos_subidos %}
│   │   │             <div class="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
│   │   │                 <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                     <thead class="bg-gray-50 dark:bg-gray-750">
│   │   │                         <tr>
│   │   │                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Nombre Descriptivo</th>
│   │   │                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Archivo Original</th>
│   │   │                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Subido el</th>
│   │   │                             <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Acciones</th>
│   │   │                         </tr>
│   │   │                     </thead>
│   │   │                     <tbody id="file-list-body" class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                         {% for archivo in archivos_subidos %}
│   │   │                         <tr id="archivo-row-{{ archivo.id }}" class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-100">
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">{{ archivo.nombre_descriptivo|truncatechars:40|default:"-" }}</td>
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">{{ archivo.nombre_original_archivo|truncatechars:30 }}</td>
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">{{ archivo.fecha_subida|date:"d/m/Y, H:i" }}</td>
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
│   │   │                                 <div class="flex justify-center items-center space-x-3">
│   │   │                                     {# Botón Ver #}
│   │   │                                     {% if archivo.is_viewable_in_browser %}
│   │   │                                         <a href="{{ archivo.get_view_url }}" target="_blank" class="text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300 transition-colors duration-150" title="Ver {{ archivo.nombre_original_archivo }}">
│   │   │                                             <i class="fas fa-eye fa-fw"></i>
│   │   │                                         </a>
│   │   │                                     {% else %}
│   │   │                                         {# Opcional: mostrar un ícono deshabilitado si no es visualizable, o no mostrar nada #}
│   │   │                                         <span class="text-gray-400 dark:text-gray-500 cursor-not-allowed" title="Vista previa no disponible">
│   │   │                                             <i class="fas fa-eye-slash fa-fw"></i>
│   │   │                                         </span>
│   │   │                                     {% endif %}
│   │   │     
│   │   │                                     {# Botón Editar #}
│   │   │                                     <a href="{{ archivo.get_edit_url }}" class="text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-300 transition-colors duration-150" title="Editar {{ archivo.nombre_descriptivo|default:archivo.nombre_original_archivo }}">
│   │   │                                         <i class="fas fa-edit fa-fw"></i>
│   │   │                                     </a>
│   │   │     
│   │   │                                     {# Botón Descargar #}
│   │   │                                     <a href="{{ archivo.archivo_subido.url }}" download="{{ archivo.nombre_original_archivo }}" class="text-main-primary hover:text-main-primary-dark dark:text-blue-400 dark:hover:text-blue-300 transition-colors duration-150" title="Descargar {{ archivo.nombre_original_archivo }}">
│   │   │                                         <i class="fas fa-download fa-fw"></i>
│   │   │                                     </a>
│   │   │                                     
│   │   │                                     {# Formulario Eliminar #}
│   │   │                                     <form action="{% url 'intranet_core:carga_archivos' %}" method="POST" class="inline delete-file-form" data-confirm-message="¿Estás seguro de que quieres eliminar '{{ archivo.nombre_descriptivo|escapejs|default:archivo.nombre_original_archivo|escapejs }}'? Esta acción no se puede deshacer.">
│   │   │                                         {% csrf_token %}
│   │   │                                         <input type="hidden" name="action" value="delete_file">
│   │   │                                         <input type="hidden" name="file_id" value="{{ archivo.id }}">
│   │   │                                         <button type="submit" class="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 transition-colors duration-150" title="Eliminar {{ archivo.nombre_descriptivo|default:archivo.nombre_original_archivo }}">
│   │   │                                             <i class="fas fa-trash-alt fa-fw"></i>
│   │   │                                         </button>
│   │   │                                     </form>
│   │   │                                 </div>
│   │   │                             </td>
│   │   │                         </tr>
│   │   │                         {% endfor %}
│   │   │                     </tbody>
│   │   │                 </table>
│   │   │             </div>
│   │   │         {% endif %}
│   │   │         
│   │   │         {% if not carpetas and not archivos_subidos %}
│   │   │              <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-10 text-center mt-8">
│   │   │                 <i class="fas fa-folder-open fa-3x text-gray-400 dark:text-gray-500 mb-4"></i>
│   │   │                 <p class="text-lg font-medium text-gray-700 dark:text-gray-300">Tu gestor de archivos está vacío.</p>
│   │   │                 <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Empieza creando una carpeta o subiendo un archivo.</p>
│   │   │             </div>
│   │   │         {% elif not archivos_subidos and carpetas %}
│   │   │             <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-10 text-center mt-4">
│   │   │                 <i class="fas fa-file-alt fa-3x text-gray-400 dark:text-gray-500 mb-4"></i>
│   │   │                 <p class="text-lg font-medium text-gray-700 dark:text-gray-300">No hay archivos en la raíz.</p>
│   │   │                 <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Puedes subir archivos a la raíz o dentro de las carpetas existentes.</p>
│   │   │             </div>
│   │   │         {% endif %}
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │     
│   │   │     {% block extra_js %}
│   │   │     <script>
│   │   │     document.addEventListener('DOMContentLoaded', function () {
│   │   │         // Mostrar nombre de archivo seleccionado en el formulario de subida principal
│   │   │         const fileInputPrincipal = document.querySelector('form[action="{% url "intranet_core:carga_archivos" %}"] input[type="file"][name="archivo_subido"]');
│   │   │         const fileUploadFilenameDisplayPrincipal = document.getElementById('file-upload-filename');
│   │   │         if (fileInputPrincipal && fileUploadFilenameDisplayPrincipal) {
│   │   │             fileInputPrincipal.addEventListener('change', function(e) {
│   │   │                 if (e.target.files && e.target.files.length > 0) {
│   │   │                     fileUploadFilenameDisplayPrincipal.textContent = 'Seleccionado: ' + e.target.files[0].name;
│   │   │                 } else {
│   │   │                     fileUploadFilenameDisplayPrincipal.textContent = '';
│   │   │                 }
│   │   │             });
│   │   │         }
│   │   │     
│   │   │         // Manejo de mensajes de Django dinámicos para AJAX
│   │   │         const messagesContainer = document.getElementById('django-messages-container');
│   │   │         function showDynamicMessage(message, tags) {
│   │   │             if (!messagesContainer) return;
│   │   │             
│   │   │             let bgColor, borderColor, textColor, iconClass;
│   │   │             if (tags.includes('success')) {
│   │   │                 bgColor = 'bg-green-100 dark:bg-green-800';
│   │   │                 borderColor = 'border-green-300 dark:border-green-600';
│   │   │                 textColor = 'text-green-700 dark:text-green-200';
│   │   │                 iconClass = 'fa-check-circle';
│   │   │             } else if (tags.includes('error')) {
│   │   │                 bgColor = 'bg-red-100 dark:bg-red-800';
│   │   │                 borderColor = 'border-red-300 dark:border-red-600';
│   │   │                 textColor = 'text-red-700 dark:text-red-200';
│   │   │                 iconClass = 'fa-exclamation-circle';
│   │   │             } else {
│   │   │                 bgColor = 'bg-blue-100 dark:bg-blue-800';
│   │   │                 borderColor = 'border-blue-300 dark:border-blue-600';
│   │   │                 textColor = 'text-blue-700 dark:text-blue-200';
│   │   │                 iconClass = 'fa-info-circle';
│   │   │             }
│   │   │     
│   │   │             const messageDiv = document.createElement('div');
│   │   │             messageDiv.className = `p-4 rounded-md text-sm ${bgColor} border ${borderColor} ${textColor} shadow`;
│   │   │             messageDiv.setAttribute('role', 'alert');
│   │   │             messageDiv.innerHTML = `<i class="fas ${iconClass} mr-2"></i> ${message}`;
│   │   │             
│   │   │             messagesContainer.insertBefore(messageDiv, messagesContainer.firstChild);
│   │   │             setTimeout(() => {
│   │   │                 messageDiv.style.transition = 'opacity 0.5s ease-out, transform 0.5s ease-out';
│   │   │                 messageDiv.style.opacity = '0';
│   │   │                 messageDiv.style.transform = 'translateY(-20px)';
│   │   │                 setTimeout(() => messageDiv.remove(), 500);
│   │   │             }, 5000);
│   │   │         }
│   │   │     
│   │   │     
│   │   │         // Eliminación de archivos con AJAX
│   │   │         const fileListBody = document.getElementById('file-list-body');
│   │   │         if (fileListBody) {
│   │   │             fileListBody.addEventListener('submit', function(event) {
│   │   │                 if (!event.target.classList.contains('delete-file-form')) {
│   │   │                     return;
│   │   │                 }
│   │   │                 event.preventDefault();
│   │   │                 const form = event.target;
│   │   │                 
│   │   │                 const confirmMessage = form.getAttribute('data-confirm-message');
│   │   │                 if (!confirm(confirmMessage)) {
│   │   │                     return;
│   │   │                 }
│   │   │     
│   │   │                 const formData = new FormData(form);
│   │   │                 const url = form.action;
│   │   │                 // const fileId = formData.get('file_id'); // No es necesario aquí si se usa data.file_id de la respuesta
│   │   │     
│   │   │                 fetch(url, {
│   │   │                     method: 'POST',
│   │   │                     body: formData,
│   │   │                     headers: {
│   │   │                         'X-CSRFToken': formData.get('csrfmiddlewaretoken'), 
│   │   │                         'X-Requested-With': 'XMLHttpRequest',
│   │   │                     }
│   │   │                 })
│   │   │                 .then(response => {
│   │   │                     if (!response.ok) {
│   │   │                         // Intenta parsear el error JSON si existe, sino lanza error genérico
│   │   │                         return response.json().then(errData => { 
│   │   │                             throw {jsonError: errData, status: response.status}; 
│   │   │                         }).catch(() => {
│   │   │                             throw {message: `Error HTTP ${response.status}`, status: response.status};
│   │   │                         });
│   │   │                     }
│   │   │                     return response.json();
│   │   │                 })
│   │   │                 .then(data => {
│   │   │                     if (data.status === 'success') {
│   │   │                         const rowToRemove = document.getElementById('archivo-row-' + data.file_id);
│   │   │                         if (rowToRemove) {
│   │   │                             rowToRemove.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-out';
│   │   │                             rowToRemove.style.opacity = '0';
│   │   │                             rowToRemove.style.transform = 'scale(0.95)';
│   │   │                             setTimeout(() => rowToRemove.remove(), 300);
│   │   │                         }
│   │   │                         showDynamicMessage(data.message, 'success');
│   │   │                     } else {
│   │   │                         showDynamicMessage(data.message || 'Error desconocido al procesar la solicitud.', 'error');
│   │   │                     }
│   │   │                 })
│   │   │                 .catch(errorInfo => {
│   │   │                     console.error('Error en la petición AJAX:', errorInfo);
│   │   │                     let errorMessageToShow = 'Error de conexión o respuesta inesperada del servidor.';
│   │   │                     if (errorInfo && errorInfo.jsonError && errorInfo.jsonError.message) {
│   │   │                         errorMessageToShow = errorInfo.jsonError.message;
│   │   │                     } else if (errorInfo && errorInfo.message) {
│   │   │                         errorMessageToShow = errorInfo.message;
│   │   │                     }
│   │   │                     showDynamicMessage(errorMessageToShow, 'error');
│   │   │                 });
│   │   │             });
│   │   │         }
│   │   │     
│   │   │         // Lógica para mostrar el modal de creación de carpeta si hay errores en ese formulario
│   │   │         // Esto es útil si la página se recarga después de un intento fallido de crear carpeta
│   │   │         const modalCrearCarpeta = document.getElementById('modal-crear-carpeta');
│   │   │         if (modalCrearCarpeta) {
│   │   │             const carpetaFormErrores = modalCrearCarpeta.querySelectorAll('.text-red-600'); // Busca cualquier mensaje de error
│   │   │             if (carpetaFormErrores.length > 0) {
│   │   │                 // Verifica si la acción que causó el error fue 'create_folder'
│   │   │                 // Esto es un poco heurístico. Una mejor manera sería si la vista añade una variable de contexto específica.
│   │   │                 // Por ahora, si hay errores en el form_crear_carpeta Y el modal está oculto, lo mostramos.
│   │   │                 const urlParams = new URLSearchParams(window.location.search); // Para evitar mostrarlo si fue otra acción
│   │   │                 if (modalCrearCarpeta.classList.contains('hidden') && !urlParams.has('upload_success')) { 
│   │   │                     // Solo mostrar si no venimos de una subida exitosa (para evitar reabrirlo innecesariamente)
│   │   │                     // Esta lógica puede necesitar refinamiento para saber exactamente cuándo mostrarlo.
│   │   │                     // Si el form de carpeta tiene errores (lo cual es detectado por los mensajes de error dentro del modal),
│   │   │                     // y no hay un mensaje de éxito de OTRA operación, podría ser una indicación.
│   │   │                     // Comprobamos específicamente el error del campo nombre.
│   │   │                     const nombreInput = modalCrearCarpeta.querySelector('input[name="nombre"]');
│   │   │                     const sibling = nombreInput.nextElementSibling; // Asumiendo que el error está justo después
│   │   │                     if (sibling && sibling.classList.contains('text-red-600')) {
│   │   │                          // modalCrearCarpeta.classList.remove('hidden'); // Descomentar si quieres este comportamiento con más precisión
│   │   │                     }
│   │   │                 }
│   │   │             }
│   │   │         }
│   │   │     });
│   │   │     </script>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (carga_archivos.html) ---

│   │   ├── configuracion.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (configuracion.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Configuración{% endblock %}
│   │   │     {% block page_title_header %}Configuración{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="bg-card p-6 md:p-8 rounded-xl shadow-lg">
│   │   │         <h2 class="text-xl font-semibold text-main-primary mb-4">Configuración</h2>
│   │   │         <p class="text-default">Aquí irán las opciones de configuración de la cuenta o la intranet.</p>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (configuracion.html) ---

│   │   ├── dashboard.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (dashboard.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Panel Principal{% endblock %}
│   │   │     {% block page_title_header %}Panel Principal{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <h2 class="text-xl md:text-2xl font-semibold text-main-primary mb-6">
│   │   │         Bienvenido, 
│   │   │         <span class="font-bold">
│   │   │             {% if user.is_authenticated %}
│   │   │                 {{ user.get_full_name|default:user.username }}
│   │   │             {% else %}
│   │   │                 Nombre Usuario
│   │   │             {% endif %}
│   │   │         </span>!
│   │   │     </h2>
│   │   │     
│   │   │     <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6">
│   │   │         <div class="bg-card p-5 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300">
│   │   │             <div class="flex items-center">
│   │   │                 <div class="p-3 rounded-full bg-blue-100 text-main-primary mr-4"><i class="fas fa-folder-open fa-2x"></i></div>
│   │   │                 <div>
│   │   │                     <p class="text-3xl font-bold text-default">{{ numero_archivos_totales|default:0 }}</p>
│   │   │                     <p class="text-sm text-muted">Archivos Totales</p>
│   │   │                 </div>
│   │   │             </div>
│   │   │         </div>
│   │   │         <div class="bg-card p-5 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300">
│   │   │             <div class="flex items-center">
│   │   │                 <div class="p-3 rounded-full bg-red-100 text-main-secondary mr-4"><i class="fas fa-edit fa-2x"></i></div>
│   │   │                 <div>
│   │   │                     <p class="text-3xl font-bold text-default">{{ numero_formularios_creados|default:0 }}</p>
│   │   │                     <p class="text-sm text-muted">Formularios Creados</p>
│   │   │                 </div>
│   │   │             </div>
│   │   │         </div>
│   │   │         <div class="bg-card p-5 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300">
│   │   │             <div class="flex items-center">
│   │   │                 <div class="p-3 rounded-full bg-yellow-100 text-yellow-500 mr-4"><i class="fas fa-bell fa-2x"></i></div>
│   │   │                 <div>
│   │   │                     <p class="text-3xl font-bold text-default">{{ numero_notificaciones_nuevas|default:0 }}</p>
│   │   │                     <p class="text-sm text-muted">Notificaciones Nuevas</p>
│   │   │                 </div>
│   │   │             </div>
│   │   │         </div>
│   │   │         <div class="bg-card p-5 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300">
│   │   │             <div class="flex items-center">
│   │   │                 <div class="p-3 rounded-full bg-purple-100 text-purple-500 mr-4"><i class="fas fa-sitemap fa-2x"></i></div>
│   │   │                 <div>
│   │   │                     <p class="text-3xl font-bold text-default">{{ numero_responsabilidades|default:0 }}</p>
│   │   │                     <p class="text-sm text-muted">Responsabilidades</p>
│   │   │                 </div>
│   │   │             </div>
│   │   │         </div>
│   │   │     </div>
│   │   │     
│   │   │     <div class="mt-8 bg-card rounded-xl shadow-lg overflow-hidden">
│   │   │         <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700"><h3 class="text-lg font-semibold text-main-primary">Actividad Reciente del Sistema (Placeholder)</h3></div>
│   │   │         <div class="overflow-x-auto max-h-96">
│   │   │             <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                 <thead class="bg-gray-50 dark:bg-gray-700 sticky top-0 z-10">
│   │   │                     <tr>
│   │   │                         <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-muted uppercase tracking-wider">Tipo</th>
│   │   │                         <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-muted uppercase tracking-wider">Descripción</th>
│   │   │                         <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-muted uppercase tracking-wider hidden sm:table-cell">Usuario</th>
│   │   │                         <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-muted uppercase tracking-wider">Fecha</th>
│   │   │                         <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-muted uppercase tracking-wider">Acción</th>
│   │   │                     </tr>
│   │   │                 </thead>
│   │   │                 <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                     <tr>
│   │   │                         <td class="px-6 py-4 whitespace-nowrap text-sm"><span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">Carga Archivo</span></td>
│   │   │                         <td class="px-6 py-4 whitespace-nowrap text-sm text-default">Informe_Mensual.pdf</td>
│   │   │                         <td class="px-6 py-4 whitespace-nowrap text-sm text-muted hidden sm:table-cell">j.perez</td>
│   │   │                         <td class="px-6 py-4 whitespace-nowrap text-sm text-muted">15/05/2025 10:30</td>
│   │   │                         <td class="px-6 py-4 whitespace-nowrap text-sm font-medium"><a href="#" class="text-main-primary hover:underline">Ver</a></td>
│   │   │                     </tr>
│   │   │                     <tr>
│   │   │                         <td class="px-6 py-4 whitespace-nowrap text-sm"><span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200">Formulario</span></td>
│   │   │                         <td class="px-6 py-4 whitespace-nowrap text-sm text-default">Encuesta de Satisfacción creada</td>
│   │   │                         <td class="px-6 py-4 whitespace-nowrap text-sm text-muted hidden sm:table-cell">m.diaz</td>
│   │   │                         <td class="px-6 py-4 whitespace-nowrap text-sm text-muted">15/05/2025 09:45</td>
│   │   │                         <td class="px-6 py-4 whitespace-nowrap text-sm font-medium"><a href="#" class="text-main-primary hover:underline">Editar</a></td>
│   │   │                     </tr>
│   │   │                 </tbody>
│   │   │             </table>
│   │   │         </div>
│   │   │         <div class="px-6 py-3 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-700 text-right">
│   │   │             <button class="text-sm text-main-primary hover:underline font-medium">Ver todo &rarr;</button>
│   │   │         </div>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (dashboard.html) ---

│   │   ├── directorio.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (directorio.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Directorio de Usuarios{% endblock %}
│   │   │     {% block page_title_header %}Directorio de Usuarios{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="content-section">
│   │   │         <h2 class="text-xl md:text-2xl font-semibold text-main-primary mb-6">Directorio de Usuarios</h2>
│   │   │         <div class="bg-card p-6 md:p-8 rounded-xl shadow-lg">
│   │   │             <p class="text-muted mb-4">Busque usuarios en la institución o explore el organigrama.</p>
│   │   │             <div class="mb-6">
│   │   │                 <input type="text" placeholder="Buscar por nombre, departamento, cargo..." class="w-full p-3 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-main-primary focus:border-transparent">
│   │   │             </div>
│   │   │             
│   │   │             <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md p-8 text-center">
│   │   │                 <i class="fas fa-address-book fa-3x text-gray-400 mb-4"></i>
│   │   │                 <p class="text-muted">Visualización del organigrama y listado de usuarios (con filtros y búsqueda avanzada) aparecerá aquí.</p>
│   │   │                 <p class="text-sm text-muted mt-2">Requeriría modelos de datos para usuarios, departamentos, y posiblemente una librería JS para el organigrama.</p>
│   │   │             </div>
│   │   │     
│   │   │             <div class="mt-8">
│   │   │                 <h3 class="text-lg font-semibold text-default mb-4">Listado de Usuarios (Ejemplo)</h3>
│   │   │                 <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
│   │   │                     <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg shadow">
│   │   │                         <div class="flex items-center space-x-3">
│   │   │                             <img src="{% static 'images/default_avatar.png' %}" alt="Avatar" class="w-12 h-12 rounded-full">
│   │   │                             <div>
│   │   │                                 <h4 class="text-md font-semibold text-default">Juan Pérez</h4>
│   │   │                                 <p class="text-sm text-muted">Desarrollador Senior</p>
│   │   │                                 <p class="text-xs text-main-primary">juan.perez@example.com</p>
│   │   │                             </div>
│   │   │                         </div>
│   │   │                     </div>
│   │   │                     <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg shadow">
│   │   │                         <div class="flex items-center space-x-3">
│   │   │                             <img src="{% static 'images/default_avatar.png' %}" alt="Avatar" class="w-12 h-12 rounded-full"> <div>
│   │   │                                 <h4 class="text-md font-semibold text-default">Maria González</h4>
│   │   │                                 <p class="text-sm text-muted">Jefa de Proyecto</p>
│   │   │                                 <p class="text-xs text-main-primary">maria.gonzalez@example.com</p>
│   │   │                             </div>
│   │   │                         </div>
│   │   │                     </div>
│   │   │                      <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg shadow">
│   │   │                         <div class="flex items-center space-x-3">
│   │   │                             <img src="{% static 'images/default_avatar.png' %}" alt="Avatar" class="w-12 h-12 rounded-full"> <div>
│   │   │                                 <h4 class="text-md font-semibold text-default">Luis Rodriguez</h4>
│   │   │                                 <p class="text-sm text-muted">Analista de Sistemas</p>
│   │   │                                 <p class="text-xs text-main-primary">luis.rodriguez@example.com</p>
│   │   │                             </div>
│   │   │                         </div>
│   │   │                     </div>
│   │   │                 </div>
│   │   │             </div>
│   │   │         </div>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (directorio.html) ---

│   │   ├── editar_archivo.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (editar_archivo.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Editar Archivo - {{ archivo.nombre_descriptivo|default:archivo.nombre_original_archivo }}{% endblock %}
│   │   │     {% block page_title_header %}Editar Archivo{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="bg-card dark:bg-gray-800 p-6 md:p-8 rounded-xl shadow-lg max-w-2xl mx-auto">
│   │   │         <h2 class="text-xl md:text-2xl font-semibold text-main-primary dark:text-blue-400 mb-3">
│   │   │             Editando: <span class="font-normal">{{ archivo.nombre_descriptivo|default:archivo.nombre_original_archivo }}</span>
│   │   │         </h2>
│   │   │         {% if archivo.archivo_subido %}
│   │   │             <p class="text-sm text-gray-600 dark:text-gray-400 mb-1">Archivo actual:
│   │   │                 <a href="{{ archivo.archivo_subido.url }}" target="_blank" class="text-main-primary hover:underline">
│   │   │                     {{ archivo.nombre_original_archivo }}
│   │   │                 </a> ({{ archivo.archivo_subido.size|filesizeformat }})
│   │   │             </p>
│   │   │         {% endif %}
│   │   │         <p class="text-sm text-gray-600 dark:text-gray-400 mb-6">Subido el: {{ archivo.fecha_subida|date:"d M Y, H:i" }}</p>
│   │   │         
│   │   │     
│   │   │         <form method="POST" enctype="multipart/form-data" class="space-y-6">
│   │   │             {% csrf_token %}
│   │   │     
│   │   │             {% if form.non_field_errors %}
│   │   │                 <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 dark:bg-red-800 dark:border-red-600 dark:text-red-200" role="alert">
│   │   │                     <p class="font-bold">Error general:</p>
│   │   │                     <ul class="mt-1 list-disc list-inside text-sm">
│   │   │                     {% for error in form.non_field_errors %}
│   │   │                         <li>{{ error }}</li>
│   │   │                     {% endfor %}
│   │   │                     </ul>
│   │   │                 </div>
│   │   │             {% endif %}
│   │   │     
│   │   │             {# Nombre Descriptivo #}
│   │   │             <div>
│   │   │                 <label for="{{ form.nombre_descriptivo.id_for_label }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{{ form.nombre_descriptivo.label }}</label>
│   │   │                 {{ form.nombre_descriptivo }}
│   │   │                 {% if form.nombre_descriptivo.help_text %}<p class="mt-2 text-xs text-gray-500 dark:text-gray-400">{{ form.nombre_descriptivo.help_text }}</p>{% endif %}
│   │   │                 {% for error in form.nombre_descriptivo.errors %}<p class="mt-1 text-xs text-red-600 dark:text-red-400"><i class="fas fa-exclamation-triangle mr-1"></i>{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │     
│   │   │             {# Carpeta #}
│   │   │             {% if form.fields.carpeta %}
│   │   │             <div>
│   │   │                 <label for="{{ form.carpeta.id_for_label }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{{ form.carpeta.label }}</label>
│   │   │                 {{ form.carpeta }}
│   │   │                 {% if form.carpeta.help_text %}<p class="mt-2 text-xs text-gray-500 dark:text-gray-400">{{ form.carpeta.help_text }}</p>{% endif %}
│   │   │                 {% for error in form.carpeta.errors %}<p class="mt-1 text-xs text-red-600 dark:text-red-400"><i class="fas fa-exclamation-triangle mr-1"></i>{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │             {% endif %}
│   │   │     
│   │   │             {# Reemplazar Archivo #}
│   │   │             <div>
│   │   │                 <label for="{{ form.archivo_subido.id_for_label }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{{ form.archivo_subido.label }}</label>
│   │   │                 {{ form.archivo_subido }}
│   │   │                 <p id="file-edit-filename" class="mt-2 text-xs text-gray-500 dark:text-gray-400"></p>
│   │   │                 {% if form.archivo_subido.help_text %}<p class="mt-2 text-xs text-gray-500 dark:text-gray-400">{{ form.archivo_subido.help_text }}</p>{% endif %}
│   │   │                 {% for error in form.archivo_subido.errors %}<p class="mt-1 text-xs text-red-600 dark:text-red-400"><i class="fas fa-exclamation-triangle mr-1"></i>{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │     
│   │   │             <div class="pt-4 flex items-center space-x-4">
│   │   │                 <button type="submit" class="bg-main-primary hover:bg-main-primary-dark text-main-white font-semibold py-2 px-5 rounded-md text-sm transition-colors duration-150">
│   │   │                     <i class="fas fa-save mr-2"></i> Guardar Cambios
│   │   │                 </button>
│   │   │                 <a href="{% url 'intranet_core:carga_archivos' %}" class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100 text-sm">
│   │   │                     Cancelar
│   │   │                 </a>
│   │   │             </div>
│   │   │         </form>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │     
│   │   │     {% block extra_js %}
│   │   │     <script>
│   │   │     document.addEventListener('DOMContentLoaded', function () {
│   │   │         const fileInput = document.querySelector('input[type="file"][name="archivo_subido"]'); // Puede haber otro en la misma página base
│   │   │         const fileEditFilenameDisplay = document.getElementById('file-edit-filename');
│   │   │     
│   │   │         if (fileInput && fileEditFilenameDisplay) {
│   │   │             fileInput.addEventListener('change', function(e) {
│   │   │                 if (e.target.files && e.target.files.length > 0) {
│   │   │                     fileEditFilenameDisplay.textContent = 'Nuevo archivo seleccionado: ' + e.target.files[0].name;
│   │   │                 } else {
│   │   │                     // Si el usuario limpia la selección (ej. con ClearableFileInput), el texto podría borrarse
│   │   │                     // o indicar "No se reemplazará el archivo"
│   │   │                     fileEditFilenameDisplay.textContent = 'No se ha seleccionado un nuevo archivo para reemplazar.';
│   │   │                 }
│   │   │             });
│   │   │         }
│   │   │     });
│   │   │     </script>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (editar_archivo.html) ---

│   │   ├── formulario_crear.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (formulario_crear.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% block title_tag %}Crear Formulario{% endblock %}
│   │   │     {% block page_title_header %}Crear Nuevo Formulario{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="bg-card p-6 md:p-8 rounded-xl shadow-lg max-w-2xl mx-auto">
│   │   │         <form method="POST" class="space-y-6">
│   │   │             {% csrf_token %}
│   │   │             {% if form.non_field_errors %}
│   │   │                 <div class="p-3 bg-red-100 text-red-700 rounded-md">
│   │   │                     {% for error in form.non_field_errors %}{{ error }}{% endfor %}
│   │   │                 </div>
│   │   │             {% endif %}
│   │   │     
│   │   │             <div>
│   │   │                 <label for="{{ form.titulo.id_for_label }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{{ form.titulo.label }}</label>
│   │   │                 {{ form.titulo }}
│   │   │                 {% for error in form.titulo.errors %}<p class="mt-1 text-xs text-red-600">{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │             <div>
│   │   │                 <label for="{{ form.descripcion.id_for_label }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{{ form.descripcion.label }}</label>
│   │   │                 {{ form.descripcion }}
│   │   │                 {% for error in form.descripcion.errors %}<p class="mt-1 text-xs text-red-600">{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │             <div>
│   │   │                 <label for="{{ form.fecha_limite.id_for_label }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{{ form.fecha_limite.label }}</label>
│   │   │                 {{ form.fecha_limite }}
│   │   │                 {% if form.fecha_limite.help_text %}<p class="mt-1 text-xs text-gray-500">{{ form.fecha_limite.help_text }}</p>{% endif %}
│   │   │                 {% for error in form.fecha_limite.errors %}<p class="mt-1 text-xs text-red-600">{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │             <div class="flex items-center">
│   │   │                 {{ form.activo }}
│   │   │                 <label for="{{ form.activo.id_for_label }}" class="ml-2 block text-sm text-gray-900 dark:text-gray-200">{{ form.activo.label }}</label>
│   │   │                  {% for error in form.activo.errors %}<p class="ml-2 text-xs text-red-600">{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │     
│   │   │             <div class="pt-4 flex items-center space-x-4">
│   │   │                 <button type="submit" class="btn-primary"><i class="fas fa-plus-circle mr-2"></i> Crear y Diseñar Campos</button>
│   │   │                 <a href="{% url 'intranet_core:formularios' %}" class="btn-secondary-outline">Cancelar</a>
│   │   │             </div>
│   │   │         </form>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (formulario_crear.html) ---

│   │   ├── formulario_disenar.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (formulario_disenar.html):
│   │   │     {% raw %}{% block extra_css %}
│   │   │     <style>
│   │   │         .form-builder-container { 
│   │   │             display: flex; 
│   │   │             gap: 1.5rem; 
│   │   │             flex-wrap: wrap; /* Permite que la paleta se mueva abajo en pantallas pequeñas por defecto */
│   │   │         }
│   │   │         .form-fields-palette {
│   │   │             width: 100%; /* Ancho completo por defecto para móviles */
│   │   │             flex-shrink: 0;
│   │   │         }
│   │   │         .form-canvas {
│   │   │             flex-grow: 1;
│   │   │             min-height: 400px;
│   │   │             width: 100%; 
│   │   │         }
│   │   │     
│   │   │         @media (min-width: 768px) { 
│   │   │             .form-builder-container {
│   │   │                 flex-wrap: nowrap; 
│   │   │             }
│   │   │             .form-fields-palette {
│   │   │                 width: 280px; 
│   │   │             }
│   │   │         }
│   │   │     
│   │   │         .campo-form-item {
│   │   │             border: 1px solid #e2e8f0;
│   │   │             background-color: #f9fafb;
│   │   │             padding: 1rem;
│   │   │             border-radius: 0.5rem;
│   │   │             margin-bottom: 1rem;
│   │   │             position: relative;
│   │   │         }
│   │   │         .dark .campo-form-item {
│   │   │             border-color: #4b5563;
│   │   │             background-color: #374151;
│   │   │         }
│   │   │         .campo-form-item .field-controls {
│   │   │             position: absolute;
│   │   │             top: 0.5rem;
│   │   │             right: 0.5rem;
│   │   │             display: flex;
│   │   │             gap: 0.5rem;
│   │   │             z-index: 10;
│   │   │         }
│   │   │         .campo-form-item .field-controls button,
│   │   │         .campo-form-item .field-delete-existing-container input[type="checkbox"] {
│   │   │             background-color: #e5e7eb;
│   │   │             border: none;
│   │   │             border-radius: 0.25rem;
│   │   │             padding: 0.25rem 0.5rem;
│   │   │             cursor: pointer;
│   │   │             font-size: 0.75rem;
│   │   │             color: #374151;
│   │   │             line-height: 1;
│   │   │         }
│   │   │         .campo-form-item .field-delete-existing-container input[type="checkbox"] {
│   │   │             padding: 0;
│   │   │             height: 1rem; width: 1rem;
│   │   │             margin-right: 0.25rem;
│   │   │             vertical-align: middle;
│   │   │         }
│   │   │         .dark .campo-form-item .field-controls button,
│   │   │         .dark .campo-form-item .field-delete-existing-container input[type="checkbox"] {
│   │   │             background-color: #4b5563;
│   │   │             color: #e5e7eb;
│   │   │         }
│   │   │         .dark .campo-form-item .field-delete-existing-container input[type="checkbox"] {
│   │   │              border-color: #6b7280;
│   │   │         }
│   │   │         .campo-form-item .field-controls button:hover {
│   │   │             background-color: #d1d5db;
│   │   │         }
│   │   │         .dark .campo-form-item .field-controls button:hover {
│   │   │             background-color: #6b7280;
│   │   │         }
│   │   │         .field-drag-handle { cursor: grab; margin-right: 0.5rem; color: #9ca3af; padding: 0.5rem; }
│   │   │         .sortable-ghost { 
│   │   │             opacity: 0.4; 
│   │   │             background: #e0f2fe !important; 
│   │   │             border: 1px dashed #0ea5e9 !important; 
│   │   │         }
│   │   │         .sortable-chosen { 
│   │   │           box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
│   │   │           opacity: 0.9;
│   │   │         }
│   │   │     
│   │   │         .palette-button {
│   │   │             display: flex;
│   │   │             align-items: center;
│   │   │             width: 100%;
│   │   │             text-align: left;
│   │   │             padding: 0.65rem 1rem;
│   │   │             margin-bottom: 0.5rem;
│   │   │             border-radius: 0.375rem;
│   │   │             background-color: #e9ecef; 
│   │   │             color: #495057; 
│   │   │             border: 1px solid #ced4da; 
│   │   │             transition: background-color 0.2s;
│   │   │             font-size: 0.875rem;
│   │   │         }
│   │   │         .dark .palette-button {
│   │   │             background-color: #495057; 
│   │   │             color: #f8f9fa; 
│   │   │             border-color: #6c757d;
│   │   │         }
│   │   │         .palette-button:hover {
│   │   │             background-color: #dde1e5; 
│   │   │         }
│   │   │         .dark .palette-button:hover {
│   │   │             background-color: #5a6268;
│   │   │         }
│   │   │         .palette-button i {
│   │   │             margin-right: 0.75rem;
│   │   │             width: 1.25em; 
│   │   │             text-align: center;
│   │   │         }
│   │   │         .field-delete-existing-label {
│   │   │             display: inline-flex;
│   │   │             align-items: center;
│   │   │             font-size: 0.75rem;
│   │   │             color: #ef4444;
│   │   │             cursor: pointer;
│   │   │             padding: 0.25rem 0.5rem;
│   │   │             background-color: #fee2e2;
│   │   │             border-radius: 0.25rem;
│   │   │         }
│   │   │         .dark .field-delete-existing-label {
│   │   │             color: #fca5a5;
│   │   │             background-color: #7f1d1d;
│   │   │         }
│   │   │         .field-delete-existing-label:hover {
│   │   │             background-color: #fecaca;
│   │   │         }
│   │   │         .dark .field-delete-existing-label:hover {
│   │   │             background-color: #991b1b;
│   │   │         }
│   │   │         .field-delete-existing-label input[type="checkbox"] {
│   │   │             margin-right: 0.375rem;
│   │   │             height: 1em; width: 1em;
│   │   │         }
│   │   │     
│   │   │         /* Si necesitas las clases btn-primary y btn-secondary-outline, defínelas aquí o globalmente */
│   │   │         /* Por ejemplo: */
│   │   │         .btn-primary {
│   │   │             background-color: var(--main-primary-bg, #0033A0); /* Usando fallback */
│   │   │             color: var(--main-white-text, #FFFFFF);
│   │   │             padding: 0.5rem 1rem; /* py-2 px-4 */
│   │   │             border-radius: 0.375rem; /* rounded-md */
│   │   │             font-weight: 500; /* font-medium */
│   │   │             transition: background-color 0.2s;
│   │   │         }
│   │   │         .btn-primary:hover {
│   │   │             background-color: var(--main-primary-dark-bg, #00227A);
│   │   │         }
│   │   │     
│   │   │         .btn-secondary-outline {
│   │   │             background-color: transparent;
│   │   │             /* Usa las variables CSS de tu tema para el color del texto y el borde */
│   │   │             color: var(--main-primary-text, #0033A0); 
│   │   │             border: 1px solid var(--main-primary-border, #0033A0);
│   │   │             padding: 0.5rem 1rem;
│   │   │             border-radius: 0.375rem;
│   │   │             font-weight: 500;
│   │   │             transition: background-color 0.2s, color 0.2s, border-color 0.2s;
│   │   │         }
│   │   │         .btn-secondary-outline:hover {
│   │   │             background-color: var(--main-primary-bg, #0033A0);
│   │   │             color: var(--main-white-text, #FFFFFF);
│   │   │         }
│   │   │         .dark .btn-secondary-outline {
│   │   │             /* Ajusta para modo oscuro si es necesario, o hereda de .btn-secondary-outline si las variables CSS ya manejan el modo oscuro */
│   │   │             color: var(--main-primary-text, #7dd3fc); /* Ejemplo para texto azul claro en modo oscuro */
│   │   │             border-color: var(--main-primary-border, #7dd3fc);
│   │   │         }
│   │   │         .dark .btn-secondary-outline:hover {
│   │   │              background-color: var(--main-primary-text, #7dd3fc);
│   │   │              color: var(--header-bg-color); /* Usar el color de fondo del header oscuro para el texto */
│   │   │         }
│   │   │     
│   │   │     </style>
│   │   │     {% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="mb-6 p-4 border border-gray-200 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-700/30">
│   │   │         <div class="flex justify-between items-start">
│   │   │             <div>
│   │   │                 <h2 class="text-lg font-semibold text-default mb-1">{{ formulario.titulo }}</h2>
│   │   │                 <p class="text-sm text-muted">{{ formulario.descripcion|default:"Sin descripción." }}</p>
│   │   │             </div>
│   │   │             <a href="{% url 'intranet_core:formulario_llenar' formulario.id %}" target="_blank" class="text-sm btn-secondary-outline whitespace-nowrap ml-4">
│   │   │                 <i class="fas fa-eye mr-1"></i> Vista Previa
│   │   │             </a>
│   │   │         </div>
│   │   │         <div class="mt-2 text-xs text-muted">
│   │   │             <span>Creado: {{ formulario.creado_el|date:"d M Y, H:i" }}</span>
│   │   │             {% if formulario.fecha_limite %} | <span>Límite: {{ formulario.fecha_limite|date:"d M Y, H:i" }}</span>{% endif %}
│   │   │             | <span>Estado: {% if formulario.activo %}Activo{% else %}Inactivo{% endif %}</span>
│   │   │         </div>
│   │   │     </div>
│   │   │     
│   │   │     {% if messages %}
│   │   │         <div class="mb-6 space-y-3">
│   │   │         {% for message in messages %}
│   │   │             <div class="p-4 rounded-md text-sm {% if message.tags == 'success' %}bg-green-100 border border-green-300 text-green-700 dark:bg-green-800 dark:border-green-600 dark:text-green-200{% elif message.tags == 'error' %}bg-red-100 border border-red-300 text-red-700 dark:bg-red-800 dark:border-red-600 dark:text-red-200{% else %}bg-blue-100 border border-blue-300 text-blue-700 dark:bg-blue-800 dark:border-blue-600 dark:text-blue-200{% endif %}" role="alert">
│   │   │                 <i class="fas {% if message.tags == 'success' %}fa-check-circle{% elif message.tags == 'error' %}fa-exclamation-circle{% else %}fa-info-circle{% endif %} mr-2"></i>
│   │   │                 {{ message }}
│   │   │             </div>
│   │   │         {% endfor %}
│   │   │         </div>
│   │   │     {% endif %}
│   │   │     
│   │   │     <form method="POST" enctype="multipart/form-data" id="camposFormset">
│   │   │         {% csrf_token %}
│   │   │         {{ formset.management_form }}
│   │   │     
│   │   │         <div class="form-builder-container md:flex-row flex-col">
│   │   │             <div class="form-fields-palette bg-card dark:bg-gray-800 p-4 rounded-lg shadow-md mb-6 md:mb-0 md:sticky md:top-6 self-start">
│   │   │                 <h3 class="text-md font-semibold text-default mb-3 border-b border-gray-200 dark:border-gray-600 pb-2">Añadir Campo</h3>
│   │   │                 {% for value, text in campo_tipos %}
│   │   │                 <button type="button" class="palette-button add-field-from-palette" data-field-type="{{ value }}" title="Añadir campo de tipo: {{text}}">
│   │   │                     <i class="fas {% if value == 'TEXTO_CORTO' %}fa-font{% elif value == 'TEXTO_LARGO' %}fa-paragraph{% elif value == 'NUMERO' %}fa-hashtag{% elif value == 'EMAIL' %}fa-at{% elif value == 'FECHA' %}fa-calendar-alt{% elif value == 'HORA' %}fa-clock{% elif value == 'OPCION_MULTIPLE' %}fa-dot-circle{% elif value == 'CASILLAS' %}fa-check-square{% elif value == 'DESPLEGABLE' %}fa-caret-square-down{% elif value == 'ARCHIVO' %}fa-file-upload{% else %}fa-question-circle{% endif %}"></i> {{ text }}
│   │   │                 </button>
│   │   │                 {% endfor %}
│   │   │             </div>
│   │   │     
│   │   │             <div class="form-canvas flex-grow">
│   │   │                 <div id="formset-container" class="space-y-3">
│   │   │                     {% if not formset.forms and not formset.non_form_errors %}
│   │   │                     <div id="no-fields-message" class="text-center py-10 text-gray-500 dark:text-gray-400 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700/30">
│   │   │                         <i class="fas fa-hand-pointer fa-3x mb-3"></i>
│   │   │                         <p>Haz clic en un tipo de campo de la paleta para comenzar a construir tu formulario.</p>
│   │   │                     </div>
│   │   │                     {% endif %}
│   │   │     
│   │   │                     {% for form_campo in formset %}
│   │   │                     <div class="campo-form-item" data-form-id="{{ form_campo.prefix }}">
│   │   │                         {{ form_campo.id }} {# Necesario para modelformset #}
│   │   │                         {{ form_campo.orden }} {# Campo oculto para el orden #}
│   │   │     
│   │   │                         <div class="field-controls">
│   │   │                             <button type="button" class="field-control-button move-field-up" title="Mover Arriba"><i class="fas fa-arrow-up"></i></button>
│   │   │                             <button type="button" class="field-control-button move-field-down" title="Mover Abajo"><i class="fas fa-arrow-down"></i></button>
│   │   │                             {% if formset.can_delete %}
│   │   │                                 {% if form_campo.instance.pk %} {# Si el campo ya existe en la BD #}
│   │   │                                 <span class="field-delete-existing-container" title="Marcar para Eliminar">
│   │   │                                     {{ form_campo.DELETE }}
│   │   │                                     <label for="{{ form_campo.DELETE.id_for_label }}" class="field-delete-existing-label"><i class="fas fa-trash-alt ml-1"></i></label>
│   │   │                                 </span>
│   │   │                                 {% else %} {# Es un campo nuevo, no guardado aún #}
│   │   │                                 <button type="button" class="field-control-button delete-new-campo-button text-red-600 hover:text-red-700" title="Eliminar Campo"><i class="fas fa-trash-alt"></i></button>
│   │   │                                 {% endif %}
│   │   │                             {% endif %}
│   │   │                         </div>
│   │   │                         
│   │   │                         <div class="flex items-center mb-3">
│   │   │                             <span class="field-drag-handle" title="Reordenar (arrastrar)"><i class="fas fa-grip-vertical"></i></span>
│   │   │                             <h5 class="text-sm font-semibold text-default">Campo #<span class="field-number">{{ forloop.counter }}</span>: <span class="field-type-display">{{ form_campo.instance.get_tipo_campo_display|default:"Nuevo Campo" }}</span></h5>
│   │   │                         </div>
│   │   │     
│   │   │                         {% if form_campo.non_field_errors %}
│   │   │                             <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-3 rounded mb-3 text-xs" role="alert">
│   │   │                                 <strong>Errores generales para este campo:</strong>
│   │   │                                 <ul class="list-disc list-inside ml-4">{% for error in form_campo.non_field_errors %}<li>{{ error }}</li>{% endfor %}</ul>
│   │   │                             </div>
│   │   │                         {% endif %}
│   │   │                          {% for field in form_campo %}
│   │   │                             {% if field.name not in "id,orden,DELETE" %} {# No renderizar campos ocultos o el de borrar aquí explícitamente #}
│   │   │                                 <div class="mb-3 {% if field.name == 'opciones_choices' %} md:col-span-2 campo-opciones-container {% if form_campo.instance.tipo_campo not in 'OPCION_MULTIPLE,CASILLAS,DESPLEGABLE' and not form_campo.initial.tipo_campo in 'OPCION_MULTIPLE,CASILLAS,DESPLEGABLE' %}hidden{% endif %} {% elif field.name == 'etiqueta' %} md:col-span-2 {% elif field.name == 'es_obligatorio' %} md:col-span-2 flex items-center {% endif %}">
│   │   │                                     <label for="{{ field.id_for_label }}" class="block text-xs font-medium text-gray-600 dark:text-gray-400 {% if field.name == 'es_obligatorio' %}ml-2{% else %}mb-1{% endif %}">{{ field.label }} {% if field.field.required and field.name != 'es_obligatorio' %}<span class="text-red-500">*</span>{% endif %}</label>
│   │   │                                     {{ field }}
│   │   │                                     {% if field.help_text %}<p class="mt-1 text-xs text-gray-500 dark:text-gray-400">{{ field.help_text }}</p>{% endif %}
│   │   │                                     {% for error in field.errors %}<p class="mt-1 text-xs text-red-500 dark:text-red-400">{{ error }}</p>{% endfor %}
│   │   │                                 </div>
│   │   │                             {% endif %}
│   │   │                         {% endfor %}
│   │   │                     </div>
│   │   │                     {% endfor %}
│   │   │                 </div>
│   │   │             </div>
│   │   │         </div>
│   │   │     
│   │   │         <div id="empty-form-template" class="hidden">
│   │   │             {# El contenido de este div se clona con JS para añadir nuevos campos #}
│   │   │             {# Los nombres y IDs usarán el prefijo del formset y '__prefix__' que JS reemplazará #}
│   │   │             <div class="campo-form-item" data-form-id="{{ formset.empty_form.prefix }}">
│   │   │                 {{ formset.empty_form.id }} 
│   │   │                 {{ formset.empty_form.orden }} 
│   │   │                 <div class="field-controls">
│   │   │                      <button type="button" class="field-control-button move-field-up" title="Mover Arriba"><i class="fas fa-arrow-up"></i></button>
│   │   │                      <button type="button" class="field-control-button move-field-down" title="Mover Abajo"><i class="fas fa-arrow-down"></i></button>
│   │   │                      <button type="button" class="field-control-button delete-new-campo-button text-red-600 hover:text-red-700" title="Eliminar Campo"><i class="fas fa-trash-alt"></i></button>
│   │   │                 </div>
│   │   │                 <div class="flex items-center mb-3">
│   │   │                     <span class="field-drag-handle" title="Reordenar"><i class="fas fa-grip-vertical"></i></span>
│   │   │                     <h5 class="text-sm font-semibold text-default">Campo #<span class="field-number"></span>: <span class="field-type-display"></span></h5>
│   │   │                 </div>
│   │   │                 <div class="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-3">
│   │   │                     {% for field in formset.empty_form %}
│   │   │                         {% if field.name not in "id,orden,DELETE" %}
│   │   │                         <div class="mb-3 {% if field.name == 'opciones_choices' %} md:col-span-2 campo-opciones-container hidden {% elif field.name == 'etiqueta' %} md:col-span-2 {% elif field.name == 'es_obligatorio' %} md:col-span-2 flex items-center {% endif %}">
│   │   │                             <label for="{{ field.id_for_label }}" class="block text-xs font-medium text-gray-600 dark:text-gray-400 {% if field.name == 'es_obligatorio' %}ml-2{% else %}mb-1{% endif %}">{{ field.label }} {% if field.field.required and field.name != 'es_obligatorio' %}<span class="text-red-500">*</span>{% endif %}</label>
│   │   │                             {{ field }}
│   │   │                             {% if field.help_text %}<p class="mt-1 text-xs text-gray-500 dark:text-gray-400">{{ field.help_text }}</p>{% endif %}
│   │   │                         </div>
│   │   │                         {% endif %}
│   │   │                     {% endfor %}
│   │   │                 </div>
│   │   │             </div>
│   │   │         </div>
│   │   │     
│   │   │         <div class="mt-8 flex items-center justify-end space-x-3 pt-6 border-t border-gray-200 dark:border-gray-700">
│   │   │             <a href="{% url 'intranet_core:formularios' %}" class="btn-secondary-outline text-sm">Cancelar y Volver</a>
│   │   │             <button type="submit" class="btn-primary text-sm">
│   │   │                 <i class="fas fa-save mr-2"></i> Guardar Diseño del Formulario
│   │   │             </button>
│   │   │         </div>
│   │   │     </form>
│   │   │     </div>
│   │   │     
│   │   │     {% endblock %}
│   │   │     
│   │   │     {% block extra_js %}
│   │   │     <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
│   │   │     <script>
│   │   │     document.addEventListener('DOMContentLoaded', function () {
│   │   │         const formsetContainer = document.getElementById('formset-container');
│   │   │         const totalFormsInput = document.querySelector('input[name$="-TOTAL_FORMS"]'); // Más genérico para encontrarlo
│   │   │         const formsetPrefix = '{{ formset.prefix }}';
│   │   │         const emptyFormHtmlTemplate = document.getElementById('empty-form-template').innerHTML;
│   │   │         const noFieldsMessage = document.getElementById('no-fields-message');
│   │   │         
│   │   │         const campoTiposJsonString = '{{ campo_tipos_json_string|escapejs|default:"{}" }}'; // Añadido default
│   │   │         let campoTiposText = {};
│   │   │         try {
│   │   │             campoTiposText = JSON.parse(campoTiposJsonString);
│   │   │         } catch (e) {
│   │   │             console.error("Error al parsear campo_tipos_json_string:", e, "Valor recibido:", campoTiposJsonString);
│   │   │         }
│   │   │     
│   │   │         function updateFormPresentation() {
│   │   │             const campoForms = formsetContainer.querySelectorAll('.campo-form-item');
│   │   │             campoForms.forEach((form, index) => {
│   │   │                 const fieldNumberSpan = form.querySelector('.field-number');
│   │   │                 if (fieldNumberSpan) fieldNumberSpan.textContent = index + 1;
│   │   │     
│   │   │                 const orderInput = form.querySelector('input[name$="-orden"]');
│   │   │                 if (orderInput) orderInput.value = index;
│   │   │                 
│   │   │                 const upButton = form.querySelector('.move-field-up');
│   │   │                 const downButton = form.querySelector('.move-field-down');
│   │   │                 if (upButton) upButton.disabled = (index === 0);
│   │   │                 if (downButton) downButton.disabled = (index === campoForms.length - 1);
│   │   │             });
│   │   │             if (noFieldsMessage) {
│   │   │                 noFieldsMessage.style.display = campoForms.length === 0 ? 'block' : 'none';
│   │   │             }
│   │   │         }
│   │   │         
│   │   │         function updateFormElementPrefixes(formElement, newIndex) {
│   │   │             const currentPrefixMatch = formElement.dataset.formId ? formElement.dataset.formId.match(new RegExp(formsetPrefix + '-(\\d+|__prefix__)')) : null;
│   │   │             const oldIndexPattern = currentPrefixMatch ? currentPrefixMatch[1] : '__prefix__';
│   │   │     
│   │   │             formElement.dataset.formId = `${formsetPrefix}-${newIndex}`;
│   │   │             
│   │   │             formElement.querySelectorAll('[name]').forEach(input => {
│   │   │                 const oldName = input.getAttribute('name');
│   │   │                 if (oldName) {
│   │   │                     input.setAttribute('name', oldName.replace(new RegExp(`${formsetPrefix}-${oldIndexPattern}-`), `${formsetPrefix}-${newIndex}-`));
│   │   │                 }
│   │   │             });
│   │   │             formElement.querySelectorAll('[id]').forEach(el => {
│   │   │                 const oldId = el.getAttribute('id');
│   │   │                 if (oldId) {
│   │   │                      const newId = oldId.replace(new RegExp(`id_${formsetPrefix}-${oldIndexPattern}-`), `id_${formsetPrefix}-${newIndex}-`);
│   │   │                      el.setAttribute('id', newId);
│   │   │                      const label = document.querySelector(`label[for="${oldId}"]`);
│   │   │                      if(label) label.setAttribute('for', newId);
│   │   │                 }
│   │   │             });
│   │   │         }
│   │   │     
│   │   │         function reindexAllForms() {
│   │   │             const campoForms = formsetContainer.querySelectorAll('.campo-form-item');
│   │   │             totalFormsInput.value = campoForms.length; // Actualizar TOTAL_FORMS con el número actual de forms visibles
│   │   │             campoForms.forEach((form, index) => {
│   │   │                 updateFormElementPrefixes(form, index);
│   │   │             });
│   │   │             updateFormPresentation();
│   │   │         }
│   │   │         
│   │   │         function toggleOpcionesVisibility(tipoCampoSelect) {
│   │   │             const campoFormDiv = tipoCampoSelect.closest('.campo-form-item');
│   │   │             const opcionesDiv = campoFormDiv.querySelector('.campo-opciones-container');
│   │   │             const tiposConOpciones = ['OPCION_MULTIPLE', 'CASILLAS', 'DESPLEGABLE'];
│   │   │             if (opcionesDiv) {
│   │   │                 opcionesDiv.classList.toggle('hidden', !tiposConOpciones.includes(tipoCampoSelect.value));
│   │   │             }
│   │   │         }
│   │   │     
│   │   │         function addNewForm(fieldType = '', fieldLabelText = '') {
│   │   │             if (!emptyFormHtmlTemplate) {
│   │   │                 console.error("Plantilla de formulario vacío no encontrada."); return;
│   │   │             }
│   │   │             let formIdx = 0;
│   │   │             // Encontrar el próximo índice disponible basado en los existentes o TOTAL_FORMS
│   │   │             const existingForms = formsetContainer.querySelectorAll('.campo-form-item');
│   │   │             formIdx = existingForms.length; // El nuevo form será el siguiente al último actual
│   │   │     
│   │   │             const tempDiv = document.createElement('div');
│   │   │             // Reemplazar el prefijo placeholder con el nuevo índice
│   │   │             tempDiv.innerHTML = emptyFormHtmlTemplate.replace(/{{ formset.empty_form.prefix }}/g, `${formsetPrefix}-${formIdx}`);
│   │   │             const newFormElement = tempDiv.firstElementChild;
│   │   │             
│   │   │             // Actualizar el dataset para la lógica de reindexación
│   │   │             newFormElement.dataset.formId = `${formsetPrefix}-${formIdx}`;
│   │   │             
│   │   │             const tipoCampoSelect = newFormElement.querySelector(`select[name$="-tipo_campo"]`);
│   │   │             const fieldTypeDisplaySpan = newFormElement.querySelector('.field-type-display');
│   │   │     
│   │   │             if (tipoCampoSelect && fieldType) {
│   │   │                 tipoCampoSelect.value = fieldType;
│   │   │                 if (fieldTypeDisplaySpan && campoTiposText[fieldType]) {
│   │   │                     fieldTypeDisplaySpan.textContent = campoTiposText[fieldType];
│   │   │                 } else if (fieldTypeDisplaySpan) {
│   │   │                     fieldTypeDisplaySpan.textContent = "Campo";
│   │   │                 }
│   │   │             } else if (fieldTypeDisplaySpan) {
│   │   │                  fieldTypeDisplaySpan.textContent = "Nuevo Campo";
│   │   │             }
│   │   │     
│   │   │             if(fieldLabelText){
│   │   │                 const etiquetaInput = newFormElement.querySelector(`input[name$="-etiqueta"]`);
│   │   │                 if(etiquetaInput) etiquetaInput.value = fieldLabelText;
│   │   │             }
│   │   │             
│   │   │             // Asignar el campo 'orden' inicial
│   │   │             const orderInput = newFormElement.querySelector('input[name$="-orden"]');
│   │   │             if (orderInput) orderInput.value = formIdx;
│   │   │     
│   │   │     
│   │   │             formsetContainer.appendChild(newFormElement);
│   │   │             totalFormsInput.value = formIdx + 1; // Incrementar el contador de formularios totales
│   │   │             
│   │   │             initializeEventHandlersForField(newFormElement);
│   │   │             updateFormPresentation(); // Actualizar numeración y botones
│   │   │             if(tipoCampoSelect) toggleOpcionesVisibility(tipoCampoSelect);
│   │   │             
│   │   │             if (noFieldsMessage) noFieldsMessage.style.display = 'none';
│   │   │             newFormElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
│   │   │             const firstInput = newFormElement.querySelector('input[type="text"], textarea, select');
│   │   │             if (firstInput) firstInput.focus();
│   │   │         }
│   │   │     
│   │   │         document.querySelectorAll('.add-field-from-palette').forEach(button => {
│   │   │             button.addEventListener('click', function() {
│   │   │                 const fieldType = this.dataset.fieldType;
│   │   │                 const fieldLabel = campoTiposText[fieldType] || "Nuevo Campo";
│   │   │                 addNewForm(fieldType, `Pregunta para ${fieldLabel.toLowerCase()}`);
│   │   │             });
│   │   │         });
│   │   │     
│   │   │         function initializeEventHandlersForField(formElement) {
│   │   │             const deleteButton = formElement.querySelector('.delete-new-campo-button');
│   │   │             if (deleteButton) {
│   │   │                 deleteButton.addEventListener('click', function () {
│   │   │                     formElement.remove();
│   │   │                     reindexAllForms(); // Reindexar y actualizar TOTAL_FORMS
│   │   │                 });
│   │   │             }
│   │   │     
│   │   │             const tipoCampoSelect = formElement.querySelector('select[name$="-tipo_campo"]');
│   │   │             if (tipoCampoSelect) {
│   │   │                 tipoCampoSelect.addEventListener('change', function() {
│   │   │                     toggleOpcionesVisibility(this);
│   │   │                     const fieldTypeDisplay = formElement.querySelector('.field-type-display');
│   │   │                      if (fieldTypeDisplay && campoTiposText[this.value]) {
│   │   │                         fieldTypeDisplay.textContent = campoTiposText[this.value];
│   │   │                     } else if (fieldTypeDisplay) {
│   │   │                         fieldTypeDisplay.textContent = "Personalizado";
│   │   │                     }
│   │   │                 });
│   │   │             }
│   │   │             
│   │   │             formElement.querySelector('.move-field-up')?.addEventListener('click', () => moveField(formElement, 'up'));
│   │   │             formElement.querySelector('.move-field-down')?.addEventListener('click', () => moveField(formElement, 'down'));
│   │   │         }
│   │   │         
│   │   │         function moveField(fieldElement, direction) {
│   │   │             if (direction === 'up' && fieldElement.previousElementSibling) {
│   │   │                 formsetContainer.insertBefore(fieldElement, fieldElement.previousElementSibling);
│   │   │             } else if (direction === 'down' && fieldElement.nextElementSibling) {
│   │   │                 formsetContainer.insertBefore(fieldElement.nextElementSibling, fieldElement);
│   │   │             }
│   │   │             reindexAllForms(); 
│   │   │         }
│   │   │     
│   │   │         formsetContainer.querySelectorAll('.campo-form-item').forEach(form => {
│   │   │             initializeEventHandlersForField(form);
│   │   │             const tipoSelect = form.querySelector('select[name$="-tipo_campo"]');
│   │   │             if(tipoSelect) toggleOpcionesVisibility(tipoSelect);
│   │   │         });
│   │   │         
│   │   │         reindexAllForms(); 
│   │   │     
│   │   │         if (typeof Sortable !== 'undefined' && formsetContainer) {
│   │   │             new Sortable(formsetContainer, {
│   │   │                 animation: 150,
│   │   │                 handle: '.field-drag-handle',
│   │   │                 ghostClass: 'sortable-ghost',
│   │   │                 chosenClass: 'sortable-chosen',
│   │   │                 onUpdate: function () { 
│   │   │                     reindexAllForms(); 
│   │   │                 }
│   │   │             });
│   │   │         }
│   │   │     });
│   │   │     </script>
│   │   │     {% endblock %}{% endraw %}
│   │   │   --- FIN CONTENIDO (formulario_disenar.html) ---

│   │   ├── formularios.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (formularios.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Creador de Formularios{% endblock %}
│   │   │     {% block page_title_header %}Creador de Formularios{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="content-section">
│   │   │         <div class="flex justify-between items-center mb-6">
│   │   │             <h2 class="text-xl md:text-2xl font-semibold text-main-primary">Creador de Formularios Dinámicos</h2>
│   │   │             <button class="bg-main-secondary hover:bg-main-secondary-dark text-main-white font-medium py-2 px-4 rounded-md flex items-center">
│   │   │                 <i class="fas fa-plus mr-2"></i> Crear Nuevo Formulario
│   │   │             </button>
│   │   │         </div>
│   │   │         <div class="bg-card p-6 md:p-8 rounded-xl shadow-lg mb-8">
│   │   │             <h3 class="text-lg font-semibold text-default mb-4">Mis Formularios</h3>
│   │   │             <div class="overflow-x-auto">
│   │   │                 <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                     <thead class="bg-gray-50 dark:bg-gray-700">
│   │   │                         <tr>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Título</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Fecha Creación</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Estado</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Respuestas</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Acciones</th>
│   │   │                         </tr>
│   │   │                     </thead>
│   │   │                     <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                         <tr>
│   │   │                             <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-default">Encuesta de Clima Laboral</td>
│   │   │                             <td class="px-4 py-2 text-sm text-muted">10/05/2025</td>
│   │   │                             <td class="px-4 py-2"><span class="px-2 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">Activo</span></td>
│   │   │                             <td class="px-4 py-2 text-sm text-muted">152</td>
│   │   │                             <td class="px-4 py-2 whitespace-nowrap text-sm space-x-2">
│   │   │                                 <button class="text-main-primary hover:underline" title="Editar"><i class="fas fa-edit"></i></button>
│   │   │                                 <button class="text-green-600 hover:underline" title="Ver Respuestas"><i class="fas fa-poll"></i></button>
│   │   │                                 <button class="text-blue-600 hover:underline" title="Obtener Enlace"><i class="fas fa-link"></i></button>
│   │   │                                 <button class="text-gray-500 hover:underline" title="Desactivar"><i class="fas fa-toggle-off"></i></button>
│   │   │                             </td>
│   │   │                         </tr>
│   │   │                         </tbody>
│   │   │                 </table>
│   │   │             </div>
│   │   │         </div>
│   │   │         <div class="bg-card p-6 md:p-8 rounded-xl shadow-lg">
│   │   │             <h3 class="text-lg font-semibold text-default mb-4" id="form-builder-title">Crear Nuevo Formulario</h3>
│   │   │             <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md p-8 text-center">
│   │   │                 <i class="fas fa-tools fa-3x text-gray-400 mb-4"></i>
│   │   │                 <p class="text-muted">Interfaz de creación de formularios (arrastrar y soltar campos, configuración, etc.) aparecerá aquí.</p>
│   │   │                 <p class="text-sm text-muted mt-2">Esta sección requerirá una implementación de JavaScript más avanzada (ej. con librerías como FormBuilder.js o similar) para la funcionalidad de "arrastrar y soltar".</p>
│   │   │             </div>
│   │   │         </div>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (formularios.html) ---

│   │   ├── formularios_lista.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (formularios_lista.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Mis Formularios{% endblock %}
│   │   │     {% block page_title_header %}Mis Formularios{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="bg-card p-6 md:p-8 rounded-xl shadow-lg">
│   │   │         <div class="flex justify-between items-center mb-6">
│   │   │             <h2 class="text-xl md:text-2xl font-semibold text-main-primary">Mis Formularios Creados</h2>
│   │   │             <a href="{% url 'intranet_core:formulario_crear' %}" class="bg-main-secondary hover:bg-main-secondary-dark text-main-white font-medium py-2 px-4 rounded-md flex items-center">
│   │   │                 <i class="fas fa-plus mr-2"></i> Crear Nuevo Formulario
│   │   │             </a>
│   │   │         </div>
│   │   │     
│   │   │         {% if messages %}
│   │   │             {% for message in messages %}
│   │   │                 <div class="p-4 mb-4 text-sm rounded-lg {% if message.tags == 'success' %}bg-green-100 text-green-700{% elif message.tags == 'error' %}bg-red-100 text-red-700{% else %}bg-blue-100 text-blue-700{% endif %}" role="alert">
│   │   │                     {{ message }}
│   │   │                 </div>
│   │   │             {% endfor %}
│   │   │         {% endif %}
│   │   │     
│   │   │         {% if formularios %}
│   │   │             <div class="overflow-x-auto">
│   │   │                 <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                     <thead class="bg-gray-50 dark:bg-gray-700">
│   │   │                         <tr>
│   │   │                             <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Título</th>
│   │   │                             <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Creado el</th>
│   │   │                             <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Activo</th>
│   │   │                             <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Respuestas</th>
│   │   │                             <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Acciones</th>
│   │   │                         </tr>
│   │   │                     </thead>
│   │   │                     <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                         {% for formulario_obj in formularios %}
│   │   │                         <tr>
│   │   │                             <td class="px-4 py-3 whitespace-nowrap text-sm font-medium text-default">
│   │   │                                 <a href="{{ formulario_obj.get_absolute_url }}" class="text-main-primary hover:underline">{{ formulario_obj.titulo }}</a>
│   │   │                             </td>
│   │   │                             <td class="px-4 py-3 whitespace-nowrap text-sm text-muted">{{ formulario_obj.creado_el|date:"d/m/Y H:i" }}</td>
│   │   │                             <td class="px-4 py-3 whitespace-nowrap text-sm text-muted">{% if formulario_obj.activo %}Sí{% else %}No{% endif %}</td>
│   │   │                             <td class="px-4 py-3 whitespace-nowrap text-sm text-muted">{{ formulario_obj.respuestas_recibidas.count }}</td>
│   │   │                             <td class="px-4 py-3 whitespace-nowrap text-sm space-x-2">
│   │   │                                 <a href="{% url 'intranet_core:formulario_disenar' formulario_obj.id %}" class="text-yellow-600 hover:text-yellow-800" title="Diseñar Campos"><i class="fas fa-drafting-compass"></i></a>
│   │   │                                 <a href="{% url 'intranet_core:formulario_respuestas' formulario_obj.id %}" class="text-green-600 hover:text-green-800" title="Ver Respuestas"><i class="fas fa-poll-h"></i></a>
│   │   │                                 {# <a href="{% url 'intranet_core:formulario_editar' formulario_obj.id %}" class="text-blue-600 hover:text-blue-800" title="Editar Configuración"><i class="fas fa-cog"></i></a> #}
│   │   │                                 {# <a href="{% url 'intranet_core:formulario_eliminar' formulario_obj.id %}" class="text-red-600 hover:text-red-800" title="Eliminar"><i class="fas fa-trash"></i></a> #}
│   │   │                             </td>
│   │   │                         </tr>
│   │   │                         {% endfor %}
│   │   │                     </tbody>
│   │   │                 </table>
│   │   │             </div>
│   │   │         {% else %}
│   │   │             <div class="text-center py-8">
│   │   │                 <i class="fas fa-file-alt fa-3x text-gray-400 mb-4"></i>
│   │   │                 <p class="text-muted">No has creado ningún formulario todavía.</p>
│   │   │                 <a href="{% url 'intranet_core:formulario_crear' %}" class="mt-4 inline-block bg-main-primary hover:bg-main-primary-dark text-white font-medium py-2 px-4 rounded-md">
│   │   │                     Crear mi primer formulario
│   │   │                 </a>
│   │   │             </div>
│   │   │         {% endif %}
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (formularios_lista.html) ---

│   │   ├── notificaciones_page.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (notificaciones_page.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Notificaciones{% endblock %}
│   │   │     {% block page_title_header %}Notificaciones y Anuncios{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="flex justify-between items-center mb-6">
│   │   │         <h2 class="text-xl md:text-2xl font-semibold text-main-primary dark:text-blue-400">Tus Notificaciones</h2>
│   │   │         {% if notificaciones_no_leidas %}
│   │   │         <form method="POST" action="{% url 'intranet_core:marcar_todas_notificaciones_leidas' %}">
│   │   │             {% csrf_token %}
│   │   │             <button type="submit" class="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-default font-medium py-2 px-4 rounded-md text-sm">
│   │   │                 Marcar todas como leídas
│   │   │             </button>
│   │   │         </form>
│   │   │         {% endif %}
│   │   │     </div>
│   │   │     
│   │   │     {% if messages %}
│   │   │         <div class="mb-6 space-y-3">
│   │   │         {% for message in messages %}
│   │   │             <div class="p-4 rounded-md text-sm {% if message.tags == 'success' %}bg-green-100 border border-green-300 text-green-700 dark:bg-green-800 dark:border-green-600 dark:text-green-200{% elif message.tags == 'error' %}bg-red-100 border border-red-300 text-red-700 dark:bg-red-800 dark:border-red-600 dark:text-red-200{% else %}bg-blue-100 border border-blue-300 text-blue-700 dark:bg-blue-800 dark:border-blue-600 dark:text-blue-200{% endif %}" role="alert">
│   │   │                 <i class="fas {% if message.tags == 'success' %}fa-check-circle{% elif message.tags == 'error' %}fa-exclamation-circle{% else %}fa-info-circle{% endif %} mr-2"></i>
│   │   │                 {{ message }}
│   │   │             </div>
│   │   │         {% endfor %}
│   │   │         </div>
│   │   │     {% endif %}
│   │   │     
│   │   │     <div class="space-y-6">
│   │   │         {# Notificaciones No Leídas #}
│   │   │         {% if notificaciones_no_leidas %}
│   │   │         <section>
│   │   │             <h3 class="text-lg font-semibold text-default dark:text-gray-100 mb-3">Nuevas</h3>
│   │   │             <div class="bg-card dark:bg-gray-800 p-4 md:p-6 rounded-xl shadow-lg space-y-3">
│   │   │                 {% for notificacion in notificaciones_no_leidas %}
│   │   │                 <div class="p-4 rounded-md bg-blue-50 dark:bg-blue-900/50 border-l-4 border-main-primary dark:border-blue-500 flex justify-between items-center">
│   │   │                     <div>
│   │   │                         <p class="text-sm text-gray-800 dark:text-gray-200">{{ notificacion.mensaje }}</p>
│   │   │                         <span class="text-xs text-gray-500 dark:text-gray-400">{{ notificacion.fecha_creacion|date:"d M Y, H:i" }}</span>
│   │   │                     </div>
│   │   │                     <a href="{% url 'intranet_core:marcar_notificacion_leida' notificacion.id %}" class="text-xs bg-main-primary text-white hover:bg-main-primary-dark py-1 px-2 rounded-full whitespace-nowrap">
│   │   │                         {% if notificacion.url_destino %}Ver y Marcar Leída{% else %}Marcar Leída{% endif %}
│   │   │                     </a>
│   │   │                 </div>
│   │   │                 {% endfor %}
│   │   │             </div>
│   │   │         </section>
│   │   │         {% endif %}
│   │   │     
│   │   │         {# Notificaciones Leídas (Historial) #}
│   │   │         <section>
│   │   │             <h3 class="text-lg font-semibold text-default dark:text-gray-100 mb-3">Historial (Leídas)</h3>
│   │   │             {% if notificaciones_leidas %}
│   │   │             <div class="bg-card dark:bg-gray-800 p-4 md:p-6 rounded-xl shadow-lg space-y-3">
│   │   │                 {% for notificacion in notificaciones_leidas %}
│   │   │                 <div class="p-4 rounded-md bg-gray-100 dark:bg-gray-700/50 opacity-75">
│   │   │                     <p class="text-sm text-gray-700 dark:text-gray-300">{{ notificacion.mensaje }}</p>
│   │   │                     <span class="text-xs text-gray-500 dark:text-gray-400">{{ notificacion.fecha_creacion|date:"d M Y, H:i" }} - Leída</span>
│   │   │                      {% if notificacion.url_destino %}
│   │   │                         <a href="{{ notificacion.url_destino }}" class="text-xs text-main-primary hover:underline ml-2">Ir al enlace</a>
│   │   │                     {% endif %}
│   │   │                 </div>
│   │   │                 {% endfor %}
│   │   │             </div>
│   │   │             {% else %}
│   │   │                  <div class="bg-card dark:bg-gray-800 p-6 md:p-8 rounded-xl shadow-lg text-center">
│   │   │                     <p class="text-gray-500 dark:text-gray-400">No hay notificaciones leídas en tu historial reciente.</p>
│   │   │                 </div>
│   │   │             {% endif %}
│   │   │         </section>
│   │   │     
│   │   │         {% if not notificaciones_no_leidas and not notificaciones_leidas %}
│   │   │         <div class="bg-card dark:bg-gray-800 p-6 md:p-8 rounded-xl shadow-lg text-center">
│   │   │             <i class="fas fa-bell-slash fa-3x text-gray-400 dark:text-gray-500 mb-4"></i>
│   │   │             <p class="text-gray-600 dark:text-gray-400">No tienes notificaciones en este momento.</p>
│   │   │         </div>
│   │   │         {% endif %}
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (notificaciones_page.html) ---

│   │   ├── perfil.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (perfil.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Mi Perfil{% endblock %}
│   │   │     {% block page_title_header %}Mi Perfil{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="bg-card p-6 md:p-8 rounded-xl shadow-lg">
│   │   │         <h2 class="text-xl font-semibold text-main-primary mb-4">Mi Perfil</h2>
│   │   │         <p class="text-default">Aquí irá la información y configuración del perfil del usuario.</p>
│   │   │         {% if user.is_authenticated %}
│   │   │         <p class="text-default">Nombre: {{ user.get_full_name|default:user.username }}</p>
│   │   │         <p class="text-default">Email: {{ user.email }}</p>
│   │   │         {% else %}
│   │   │         <p class="text-default">Inicia sesión para ver tu perfil.</p>
│   │   │         {% endif %}
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (perfil.html) ---

│   │   ├── reservas.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (reservas.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Reserva de Recursos{% endblock %}
│   │   │     {% block page_title_header %}Reserva de Recursos{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="content-section">
│   │   │         <h2 class="text-xl md:text-2xl font-semibold text-main-primary mb-6">Reserva de Recursos</h2>
│   │   │         <div class="bg-card p-6 md:p-8 rounded-xl shadow-lg">
│   │   │             <p class="text-muted mb-4">Consulte la disponibilidad y reserve salas de reuniones, equipos y otros recursos compartidos.</p>
│   │   │             
│   │   │             <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md p-8 text-center">
│   │   │                 <i class="fas fa-calendar-check fa-3x text-gray-400 mb-4"></i>
│   │   │                 <p class="text-muted">Interfaz de calendario de reservas (similar a la de actividades, pero para recursos) y listado de recursos disponibles aparecerá aquí.</p>
│   │   │                 <p class="text-sm text-muted mt-2">Necesitará modelos para recursos, tipos de recursos, y reservas, además de una librería JS para el calendario.</p>
│   │   │             </div>
│   │   │     
│   │   │             <div class="mt-8 grid grid-cols-1 md:grid-cols-2 gap-8">
│   │   │                 <div>
│   │   │                     <h3 class="text-lg font-semibold text-default mb-4">Recursos Disponibles</h3>
│   │   │                     <ul class="space-y-2">
│   │   │                         <li class="p-3 bg-gray-50 dark:bg-gray-700 rounded-md shadow-sm">
│   │   │                             <span class="font-medium text-default">Sala de Reuniones A</span> - Capacidad: 10
│   │   │                         </li>
│   │   │                         <li class="p-3 bg-gray-50 dark:bg-gray-700 rounded-md shadow-sm">
│   │   │                             <span class="font-medium text-default">Proyector Multimedia P-100</span> - Disponible
│   │   │                         </li>
│   │   │                         <li class="p-3 bg-gray-50 dark:bg-gray-700 rounded-md shadow-sm">
│   │   │                             <span class="font-medium text-default">Vehículo Institucional V-01</span> - En uso hasta 16/05
│   │   │                         </li>
│   │   │                     </ul>
│   │   │                 </div>
│   │   │                 <div>
│   │   │                     <h3 class="text-lg font-semibold text-default mb-4">Realizar una Reserva</h3>
│   │   │                     <form class="space-y-4">
│   │   │                         <div>
│   │   │                             <label for="recurso" class="block text-sm font-medium text-muted">Recurso</label>
│   │   │                             <select id="recurso" name="recurso" class="mt-1 block w-full p-2 border-gray-300 dark:border-gray-600 dark:bg-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-main-primary focus:border-main-primary">
│   │   │                                 <option>Seleccione un recurso...</option>
│   │   │                                 <option>Sala de Reuniones A</option>
│   │   │                                 <option>Proyector Multimedia P-100</option>
│   │   │                             </select>
│   │   │                         </div>
│   │   │                         <div>
│   │   │                             <label for="fecha_reserva" class="block text-sm font-medium text-muted">Fecha</label>
│   │   │                             <input type="date" id="fecha_reserva" name="fecha_reserva" class="mt-1 block w-full p-2 border-gray-300 dark:border-gray-600 dark:bg-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-main-primary focus:border-main-primary">
│   │   │                         </div>
│   │   │                         <div>
│   │   │                             <label for="hora_inicio" class="block text-sm font-medium text-muted">Hora Inicio</label>
│   │   │                             <input type="time" id="hora_inicio" name="hora_inicio" class="mt-1 block w-full p-2 border-gray-300 dark:border-gray-600 dark:bg-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-main-primary focus:border-main-primary">
│   │   │                         </div>
│   │   │                         <div>
│   │   │                             <label for="hora_fin" class="block text-sm font-medium text-muted">Hora Fin</label>
│   │   │                             <input type="time" id="hora_fin" name="hora_fin" class="mt-1 block w-full p-2 border-gray-300 dark:border-gray-600 dark:bg-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-main-primary focus:border-main-primary">
│   │   │                         </div>
│   │   │                         <div class="flex justify-end">
│   │   │                             <button type="submit" class="bg-main-primary hover:bg-main-primary-dark text-main-white font-medium py-2 px-4 rounded-md">
│   │   │                                 Solicitar Reserva
│   │   │                             </button>
│   │   │                         </div>
│   │   │                     </form>
│   │   │                 </div>
│   │   │             </div>
│   │   │         </div>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (reservas.html) ---

│   │   ├── responsabilidades.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (responsabilidades.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Gestión de Responsabilidades{% endblock %}
│   │   │     {% block page_title_header %}Gestión de Responsabilidades{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="content-section">
│   │   │         <div class="flex justify-between items-center mb-6">
│   │   │             <h2 class="text-xl md:text-2xl font-semibold text-main-primary">Gestión de Responsabilidades</h2>
│   │   │             <button class="bg-main-secondary hover:bg-main-secondary-dark text-main-white font-medium py-2 px-4 rounded-md flex items-center">
│   │   │                 <i class="fas fa-plus mr-2"></i> Nueva Responsabilidad
│   │   │             </button>
│   │   │         </div>
│   │   │          <div class="bg-card p-6 md:p-8 rounded-xl shadow-lg">
│   │   │             <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md p-8 text-center">
│   │   │                 <i class="fas fa-sitemap fa-3x text-gray-400 mb-4"></i>
│   │   │                 <p class="text-muted py-8">Interfaz para asignar, transferir y seguir responsabilidades (organigramas, listas de tareas asignadas, etc.) aparecerá aquí.</p>
│   │   │                 <p class="text-sm text-muted mt-2">Esto implicaría modelos de datos para usuarios, tareas, roles y flujos de trabajo.</p>
│   │   │             </div>
│   │   │             <div class="mt-8">
│   │   │                 <h3 class="text-lg font-semibold text-default mb-4">Responsabilidades Asignadas</h3>
│   │   │                 <div class="overflow-x-auto">
│   │   │                     <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                         <thead class="bg-gray-50 dark:bg-gray-700">
│   │   │                             <tr>
│   │   │                                 <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Tarea</th>
│   │   │                                 <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Asignado a</th>
│   │   │                                 <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Fecha Límite</th>
│   │   │                                 <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Estado</th>
│   │   │                                 <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Acciones</th>
│   │   │                             </tr>
│   │   │                         </thead>
│   │   │                         <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                             <tr>
│   │   │                                 <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-default">Elaborar informe trimestral</td>
│   │   │                                 <td class="px-4 py-2 text-sm text-muted">Ana Pérez</td>
│   │   │                                 <td class="px-4 py-2 text-sm text-muted">30/06/2025</td>
│   │   │                                 <td class="px-4 py-2"><span class="px-2 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">En Progreso</span></td>
│   │   │                                 <td class="px-4 py-2 whitespace-nowrap text-sm space-x-2">
│   │   │                                     <button class="text-main-primary hover:underline" title="Ver Detalles"><i class="fas fa-eye"></i></button>
│   │   │                                     <button class="text-red-500 hover:underline" title="Reasignar"><i class="fas fa-random"></i></button>
│   │   │                                 </td>
│   │   │                             </tr>
│   │   │                             <tr>
│   │   │                                 <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-default">Actualizar documentación API</td>
│   │   │                                 <td class="px-4 py-2 text-sm text-muted">Carlos López</td>
│   │   │                                 <td class="px-4 py-2 text-sm text-muted">15/07/2025</td>
│   │   │                                 <td class="px-4 py-2"><span class="px-2 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Completada</span></td>
│   │   │                                 <td class="px-4 py-2 whitespace-nowrap text-sm space-x-2">
│   │   │                                     <button class="text-main-primary hover:underline" title="Ver Detalles"><i class="fas fa-eye"></i></button>
│   │   │                                 </td>
│   │   │                             </tr>
│   │   │                         </tbody>
│   │   │                     </table>
│   │   │                 </div>
│   │   │             </div>
│   │   │         </div>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (responsabilidades.html) ---

│   │   ├── responsabilidades_lista.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (responsabilidades_lista.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Gestión de Responsabilidades{% endblock %}
│   │   │     {% block page_title_header %}{{ page_title_for_header|default:"Gestión de Responsabilidades" }}{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="bg-card dark:bg-gray-800 p-6 md:p-8 rounded-xl shadow-lg">
│   │   │         <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6 gap-4">
│   │   │             <h2 class="text-2xl font-semibold text-main-primary dark:text-blue-400">{{ page_title_for_header|default:"Gestión de Responsabilidades" }}</h2>
│   │   │             <a href="{% url 'intranet_core:tarea_crear' %}" class="btn-primary text-sm">
│   │   │                 <i class="fas fa-plus mr-2"></i> Nueva Tarea
│   │   │             </a>
│   │   │         </div>
│   │   │     
│   │   │         {% if messages %}
│   │   │             <div class="mb-6 space-y-3">
│   │   │             {% for message in messages %}
│   │   │                 <div class="p-4 rounded-md text-sm {% if message.tags == 'success' %}bg-green-100 border border-green-300 text-green-700 dark:bg-green-800 dark:border-green-600 dark:text-green-200{% elif message.tags == 'error' %}bg-red-100 border border-red-300 text-red-700 dark:bg-red-800 dark:border-red-600 dark:text-red-200{% else %}bg-blue-100 border border-blue-300 text-blue-700 dark:bg-blue-800 dark:border-blue-600 dark:text-blue-200{% endif %}" role="alert">
│   │   │                     <i class="fas {% if message.tags == 'success' %}fa-check-circle{% elif message.tags == 'error' %}fa-exclamation-circle{% else %}fa-info-circle{% endif %} mr-2"></i>
│   │   │                     {{ message }}
│   │   │                 </div>
│   │   │             {% endfor %}
│   │   │             </div>
│   │   │         {% endif %}
│   │   │     
│   │   │         <div class="mb-6">
│   │   │             <div class="flex space-x-2 border-b border-gray-200 dark:border-gray-700 pb-3 mb-3">
│   │   │                 <a href="?filter=mis_tareas" class="px-3 py-2 rounded-md text-sm font-medium {% if current_filter == 'mis_tareas' %}bg-main-primary text-white{% else %}text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700{% endif %}">Mis Tareas</a>
│   │   │                 <a href="?filter=creadas_por_mi" class="px-3 py-2 rounded-md text-sm font-medium {% if current_filter == 'creadas_por_mi' %}bg-main-primary text-white{% else %}text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700{% endif %}">Creadas por Mí</a>
│   │   │                 {% if user.is_staff %}
│   │   │                 <a href="?filter=todas" class="px-3 py-2 rounded-md text-sm font-medium {% if current_filter == 'todas' %}bg-main-primary text-white{% else %}text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700{% endif %}">Todas</a>
│   │   │                 {% endif %}
│   │   │             </div>
│   │   │         </div>
│   │   │     
│   │   │         <div class="mb-8">
│   │   │             <h3 class="text-lg font-semibold text-default dark:text-gray-100 mb-4">Tareas Pendientes/En Progreso</h3>
│   │   │             {% if tareas_pendientes %}
│   │   │             <div class="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
│   │   │                 <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                     <thead class="bg-gray-50 dark:bg-gray-750">
│   │   │                         <tr>
│   │   │                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Título</th>
│   │   │                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Asignado a</th>
│   │   │                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Fecha Límite</th>
│   │   │                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Prioridad</th>
│   │   │                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Estado</th>
│   │   │                             <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Acciones</th>
│   │   │                         </tr>
│   │   │                     </thead>
│   │   │                     <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                         {% for tarea in tareas_pendientes %}
│   │   │                         <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-100">
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
│   │   │                                 <a href="{% url 'intranet_core:tarea_detalle' tarea.id %}" class="text-main-primary hover:underline">{{ tarea.titulo|truncatechars:50 }}</a>
│   │   │                             </td>
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">{{ tarea.asignado_a.get_full_name|default:tarea.asignado_a.username|default:"Sin asignar" }}</td>
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600 dark:text-gray-300">{{ tarea.fecha_limite|date:"d/m/Y"|default:"N/A" }}</td>
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-sm">
│   │   │                                 <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
│   │   │                                     {% if tarea.prioridad == tarea.PrioridadTarea.ALTA or tarea.prioridad == tarea.PrioridadTarea.URGENTE %} bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 
│   │   │                                     {% elif tarea.prioridad == tarea.PrioridadTarea.MEDIA %} bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200
│   │   │                                     {% else %} bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 {% endif %}">
│   │   │                                     {{ tarea.get_prioridad_display }}
│   │   │                                 </span>
│   │   │                             </td>
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-sm">
│   │   │                                 <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
│   │   │                                     {% if tarea.estado == tarea.EstadoTarea.EN_PROGRESO %} bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200
│   │   │                                     {% else %} bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200 {% endif %}">
│   │   │                                     {{ tarea.get_estado_display }}
│   │   │                                 </span>
│   │   │                             </td>
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
│   │   │                                 <div class="flex justify-center items-center space-x-3">
│   │   │                                     <a href="{% url 'intranet_core:tarea_detalle' tarea.id %}" class="text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300" title="Ver Detalles"><i class="fas fa-eye fa-fw"></i></a>
│   │   │                                     {% if user == tarea.creado_por or user.is_staff or user == tarea.asignado_a %}
│   │   │                                     <a href="{% url 'intranet_core:tarea_editar' tarea.id %}" class="text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-300" title="Editar"><i class="fas fa-edit fa-fw"></i></a>
│   │   │                                     {% endif %}
│   │   │                                 </div>
│   │   │                             </td>
│   │   │                         </tr>
│   │   │                         {% endfor %}
│   │   │                     </tbody>
│   │   │                 </table>
│   │   │             </div>
│   │   │             {% else %}
│   │   │             <div class="text-center py-6">
│   │   │                 <i class="fas fa-check-circle fa-3x text-green-500 mb-3"></i>
│   │   │                 <p class="text-muted">No tienes tareas pendientes o en progreso.</p>
│   │   │             </div>
│   │   │             {% endif %}
│   │   │         </div>
│   │   │     
│   │   │         <div class="mt-8">
│   │   │             <h3 class="text-lg font-semibold text-default dark:text-gray-100 mb-4">Tareas Completadas (Últimas 20)</h3>
│   │   │             {% if tareas_completadas %}
│   │   │             <div class="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
│   │   │                 <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                      <thead class="bg-gray-50 dark:bg-gray-750">
│   │   │                         <tr>
│   │   │                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Título</th>
│   │   │                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Asignado a</th>
│   │   │                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Fecha Límite</th>
│   │   │                             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Prioridad</th>
│   │   │                              <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Acciones</th>
│   │   │                         </tr>
│   │   │                     </thead>
│   │   │                     <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                         {% for tarea in tareas_completadas %}
│   │   │                          <tr class="opacity-70 hover:opacity-100 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-100">
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-700 dark:text-gray-300">
│   │   │                                 <a href="{% url 'intranet_core:tarea_detalle' tarea.id %}" class="hover:underline">{{ tarea.titulo|truncatechars:50 }}</a>
│   │   │                             </td>
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">{{ tarea.asignado_a.get_full_name|default:tarea.asignado_a.username|default:"Sin asignar" }}</td>
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">{{ tarea.fecha_limite|date:"d/m/Y"|default:"N/A" }}</td>
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400"> {{ tarea.get_prioridad_display }}</td>
│   │   │                             <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
│   │   │                                 <a href="{% url 'intranet_core:tarea_detalle' tarea.id %}" class="text-indigo-600 hover:text-indigo-800 dark:text-indigo-400 dark:hover:text-indigo-300" title="Ver Detalles"><i class="fas fa-eye fa-fw"></i></a>
│   │   │                             </td>
│   │   │                         </tr>
│   │   │                         {% endfor %}
│   │   │                     </tbody>
│   │   │                 </table>
│   │   │             </div>
│   │   │             {% else %}
│   │   │             <p class="text-muted text-center py-6">No hay tareas completadas recientemente.</p>
│   │   │             {% endif %}
│   │   │         </div>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (responsabilidades_lista.html) ---

│   │   ├── usuarios_gestion.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (usuarios_gestion.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Gestión de Usuarios{% endblock %}
│   │   │     {% block page_title_header %}Gestión de Usuarios{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="content-section">
│   │   │         <div class="flex justify-between items-center mb-6">
│   │   │             <h2 class="text-xl md:text-2xl font-semibold text-main-primary">Gestión de Usuarios</h2>
│   │   │             <button class="bg-main-secondary hover:bg-main-secondary-dark text-main-white font-medium py-2 px-4 rounded-md flex items-center">
│   │   │                 <i class="fas fa-user-plus mr-2"></i> Nuevo Usuario
│   │   │             </button>
│   │   │         </div>
│   │   │          <div class="bg-card p-6 md:p-8 rounded-xl shadow-lg">
│   │   │             <p class="text-muted mb-6">Panel para administradores: crear, editar, activar/desactivar cuentas de usuarios y asignar roles/permisos.</p>
│   │   │             
│   │   │             <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md p-8 text-center">
│   │   │                 <i class="fas fa-users-cog fa-3x text-gray-400 mb-4"></i>
│   │   │                 <p class="text-muted">Una tabla interactiva con todos los usuarios, filtros, paginación y acciones (editar, desactivar, cambiar rol) aparecerá aquí.</p>
│   │   │                 <p class="text-sm text-muted mt-2">Esto se conectaría directamente con el modelo de Usuario de Django y posiblemente un modelo de Perfil.</p>
│   │   │             </div>
│   │   │     
│   │   │             <div class="mt-8 overflow-x-auto">
│   │   │                 <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                     <thead class="bg-gray-50 dark:bg-gray-700">
│   │   │                         <tr>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Nombre</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Email</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Rol</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Estado</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Acciones</th>
│   │   │                         </tr>
│   │   │                     </thead>
│   │   │                     <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                         <tr>
│   │   │                             <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-default">Admin Intranet</td>
│   │   │                             <td class="px-4 py-2 text-sm text-muted">admin@example.com</td>
│   │   │                             <td class="px-4 py-2 text-sm text-muted">Administrador</td>
│   │   │                             <td class="px-4 py-2"><span class="px-2 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">Activo</span></td>
│   │   │                             <td class="px-4 py-2 whitespace-nowrap text-sm space-x-2">
│   │   │                                 <button class="text-main-primary hover:underline" title="Editar"><i class="fas fa-edit"></i></button>
│   │   │                                 <button class="text-red-500 hover:underline" title="Desactivar"><i class="fas fa-user-slash"></i></button>
│   │   │                             </td>
│   │   │                         </tr>
│   │   │                         <tr>
│   │   │                             <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-default">Usuario Ejemplo</td>
│   │   │                             <td class="px-4 py-2 text-sm text-muted">usuario@example.com</td>
│   │   │                             <td class="px-4 py-2 text-sm text-muted">Empleado</td>
│   │   │                             <td class="px-4 py-2"><span class="px-2 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">Inactivo</span></td>
│   │   │                             <td class="px-4 py-2 whitespace-nowrap text-sm space-x-2">
│   │   │                                 <button class="text-main-primary hover:underline" title="Editar"><i class="fas fa-edit"></i></button>
│   │   │                                 <button class="text-green-500 hover:underline" title="Activar"><i class="fas fa-user-check"></i></button>
│   │   │                             </td>
│   │   │                         </tr>
│   │   │                     </tbody>
│   │   │                 </table>
│   │   │             </div>
│   │   │         </div>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (usuarios_gestion.html) ---

│   │   ├── usuarios_gestion_lista.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (usuarios_gestion_lista.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Gestión de Usuarios{% endblock %}
│   │   │     {% block page_title_header %}Gestión de Usuarios{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="bg-card p-6 md:p-8 rounded-xl shadow-lg">
│   │   │         <div class="flex justify-between items-center mb-6">
│   │   │             <h2 class="text-xl md:text-2xl font-semibold text-main-primary">Listado de Usuarios</h2>
│   │   │             {# <a href="#" class="bg-main-secondary hover:bg-main-secondary-dark text-main-white font-medium py-2 px-4 rounded-md flex items-center">
│   │   │                 <i class="fas fa-user-plus mr-2"></i> Nuevo Usuario
│   │   │             </a> #}
│   │   │         </div>
│   │   │     
│   │   │         {% if usuarios %}
│   │   │             <div class="overflow-x-auto">
│   │   │                 <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                     <thead class="bg-gray-50 dark:bg-gray-700">
│   │   │                         <tr>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Username</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Nombre Completo</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Email</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Staff</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Activo</th>
│   │   │                             <th class="px-4 py-2 text-left text-xs font-medium text-muted uppercase">Acciones</th>
│   │   │                         </tr>
│   │   │                     </thead>
│   │   │                     <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
│   │   │                         {% for u in usuarios %}
│   │   │                         <tr>
│   │   │                             <td class="px-4 py-2 whitespace-nowrap text-sm font-medium text-default">{{ u.username }}</td>
│   │   │                             <td class="px-4 py-2 text-sm text-muted">{{ u.get_full_name|default:"N/A" }}</td>
│   │   │                             <td class="px-4 py-2 text-sm text-muted">{{ u.email }}</td>
│   │   │                             <td class="px-4 py-2 text-sm text-muted">{% if u.is_staff %}Sí{% else %}No{% endif %}</td>
│   │   │                             <td class="px-4 py-2 text-sm text-muted">{% if u.is_active %}Sí{% else %}No{% endif %}</td>
│   │   │                             <td class="px-4 py-2 whitespace-nowrap text-sm space-x-2">
│   │   │                                 <a href="{% url 'intranet_core:usuario_gestion_editar' u.id %}" class="text-main-primary hover:underline" title="Editar"><i class="fas fa-edit"></i></a>
│   │   │                                 {# Más acciones aquí #}
│   │   │                             </td>
│   │   │                         </tr>
│   │   │                         {% endfor %}
│   │   │                     </tbody>
│   │   │                 </table>
│   │   │             </div>
│   │   │         {% else %}
│   │   │             <p class="text-muted">No hay usuarios para mostrar.</p>
│   │   │         {% endif %}
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (usuarios_gestion_lista.html) ---

│   │   ├── wiki.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (wiki.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Base de Conocimiento{% endblock %}
│   │   │     {% block page_title_header %}Base de Conocimiento (Wiki){% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="content-section">
│   │   │         <h2 class="text-xl md:text-2xl font-semibold text-main-primary mb-6">Base de Conocimiento (Wiki)</h2>
│   │   │         <div class="bg-card p-6 md:p-8 rounded-xl shadow-lg">
│   │   │             <p class="text-muted mb-4">Encuentre manuales, guías, procedimientos y preguntas frecuentes de la institución.</p>
│   │   │             <div class="mb-6">
│   │   │                 <input type="text" placeholder="Buscar en la base de conocimiento..." class="w-full p-3 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-main-primary focus:border-transparent">
│   │   │             </div>
│   │   │             
│   │   │             <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-md p-8 text-center">
│   │   │                 <i class="fas fa-book-open fa-3x text-gray-400 mb-4"></i>
│   │   │                 <p class="text-muted">Artículos y categorías de la wiki (con editor de texto enriquecido para crear/editar artículos) aparecerán aquí.</p>
│   │   │                 <p class="text-sm text-muted mt-2">Una wiki funcional requiere modelos para artículos, categorías, versiones, y un buen editor WYSIWYG.</p>
│   │   │             </div>
│   │   │     
│   │   │             <div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
│   │   │                 <div>
│   │   │                     <h3 class="text-lg font-semibold text-default mb-3">Categorías Populares</h3>
│   │   │                     <ul class="space-y-2">
│   │   │                         <li><a href="#" class="text-main-primary hover:underline">Procedimientos Internos</a></li>
│   │   │                         <li><a href="#" class="text-main-primary hover:underline">Guías de Software</a></li>
│   │   │                         <li><a href="#" class="text-main-primary hover:underline">Recursos Humanos</a></li>
│   │   │                         <li><a href="#" class="text-main-primary hover:underline">Preguntas Frecuentes TI</a></li>
│   │   │                     </ul>
│   │   │                 </div>
│   │   │                 <div class="md:col-span-2">
│   │   │                     <h3 class="text-lg font-semibold text-default mb-3">Artículos Recientes</h3>
│   │   │                     <div class="space-y-4">
│   │   │                         <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-md shadow-sm">
│   │   │                             <a href="#" class="font-medium text-default hover:text-main-primary block">Cómo solicitar vacaciones</a>
│   │   │                             <p class="text-xs text-muted mt-1">Actualizado el 10/05/2025 por Admin</p>
│   │   │                         </div>
│   │   │                         <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-md shadow-sm">
│   │   │                             <a href="#" class="font-medium text-default hover:text-main-primary block">Guía de uso del nuevo CRM</a>
│   │   │                             <p class="text-xs text-muted mt-1">Actualizado el 05/05/2025 por Soporte TI</p>
│   │   │                         </div>
│   │   │                     </div>
│   │   │                 </div>
│   │   │             </div>
│   │   │         </div>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (wiki.html) ---

│   │   ├── wiki_articulo_confirm_delete.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (wiki_articulo_confirm_delete.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}Confirmar Eliminación - {{ articulo.titulo }}{% endblock %}
│   │   │     {% block page_title_header %}Confirmar Eliminación de Artículo{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="bg-card dark:bg-gray-800 p-6 md:p-8 rounded-xl shadow-lg max-w-lg mx-auto text-center">
│   │   │         <i class="fas fa-exclamation-triangle fa-3x text-red-500 mb-4"></i>
│   │   │         <h2 class="text-xl font-semibold text-default dark:text-gray-100 mb-2">
│   │   │             ¿Estás seguro de que quieres eliminar el artículo?
│   │   │         </h2>
│   │   │         <p class="text-lg text-main-primary dark:text-blue-400 mb-6">"{{ articulo.titulo }}"</p>
│   │   │         
│   │   │         <p class="text-gray-600 dark:text-gray-400 mb-6">Esta acción no se puede deshacer.</p>
│   │   │     
│   │   │         <form method="POST">
│   │   │             {% csrf_token %}
│   │   │             <div class="flex justify-center space-x-4">
│   │   │                 <a href="{{ articulo.get_absolute_url }}" class="px-6 py-2 bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-md hover:bg-gray-300 dark:hover:bg-gray-500">
│   │   │                     Cancelar
│   │   │                 </a>
│   │   │                 <button type="submit" class="px-6 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
│   │   │                     Sí, Eliminar
│   │   │                 </button>
│   │   │             </div>
│   │   │         </form>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (wiki_articulo_confirm_delete.html) ---

│   │   ├── wiki_articulo_detalle.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (wiki_articulo_detalle.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}{{ articulo.titulo }} - Wiki{% endblock %}
│   │   │     {% block page_title_header %}{{ articulo.titulo }}{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="bg-card dark:bg-gray-800 p-6 md:p-8 rounded-xl shadow-lg">
│   │   │         <div class="prose dark:prose-invert max-w-none">
│   │   │             {# El contenido se renderiza como HTML si usaste la librería markdown en la vista #}
│   │   │             {# Si no, ajusta para mostrar articulo.contenido directamente o como <pre> #}
│   │   │             {{ html_content|safe }}
│   │   │         </div>
│   │   │     
│   │   │         <div class="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700 text-sm text-gray-600 dark:text-gray-400">
│   │   │             <p>Autor: {{ articulo.autor.get_full_name|default:articulo.autor.username|default:"Desconocido" }}</p>
│   │   │             <p>Última actualización: {{ articulo.actualizado_el|date:"d M Y, H:i" }} (Creado: {{ articulo.creado_el|date:"d M Y, H:i" }})</p>
│   │   │         </div>
│   │   │     
│   │   │         {# Solo mostrar botones de editar/eliminar al autor o staff #}
│   │   │         {% if user == articulo.autor or user.is_staff %}
│   │   │         <div class="mt-8 flex space-x-4">
│   │   │             <a href="{% url 'intranet_core:wiki_editar_articulo' slug=articulo.slug %}" class="bg-yellow-500 hover:bg-yellow-600 text-white font-medium py-2 px-4 rounded-md text-sm flex items-center">
│   │   │                 <i class="fas fa-edit mr-2"></i> Editar Artículo
│   │   │             </a>
│   │   │             <a href="{% url 'intranet_core:wiki_eliminar_articulo' slug=articulo.slug %}" class="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-md text-sm flex items-center">
│   │   │                 <i class="fas fa-trash-alt mr-2"></i> Eliminar Artículo
│   │   │             </a>
│   │   │         </div>
│   │   │         {% endif %}
│   │   │         
│   │   │         <div class="mt-8">
│   │   │             <a href="{% url 'intranet_core:wiki' %}" class="text-main-primary hover:underline dark:text-blue-400">&larr; Volver a la lista de la Wiki</a>
│   │   │         </div>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │     
│   │   │     {% block extra_css %}
│   │   │     {# Si usas codehilite de Markdown para sintaxis de código #}
│   │   │     <link rel="stylesheet" href="{% static 'css/code_highlight_styles.css' %}"> {# Necesitarás crear este CSS si quieres estilos personalizados #}
│   │   │     <style>
│   │   │     /* Estilos básicos para prose si no usas el plugin de Tailwind Typography */
│   │   │     .prose h1 { font-size: 2em; margin-bottom: 0.5em; margin-top: 1em; font-weight: 600; }
│   │   │     .prose h2 { font-size: 1.5em; margin-bottom: 0.4em; margin-top: 1em; font-weight: 600; }
│   │   │     .prose h3 { font-size: 1.25em; margin-bottom: 0.3em; margin-top: 1em; font-weight: 600; }
│   │   │     .prose p { margin-bottom: 1em; line-height: 1.6; }
│   │   │     .prose ul, .prose ol { margin-bottom: 1em; margin-left: 1.5em; }
│   │   │     .prose li { margin-bottom: 0.5em; }
│   │   │     .prose pre { background-color: #f5f5f5; padding: 1em; border-radius: 0.375rem; overflow-x: auto; margin-bottom: 1em;}
│   │   │     .prose code { font-family: monospace; }
│   │   │     .prose a { color: var(--main-primary-text, #0033A0); text-decoration: underline; }
│   │   │     .prose img { max-width: 100%; height: auto; border-radius: 0.375rem; margin-bottom: 1em;}
│   │   │     .prose table { width: 100%; border-collapse: collapse; margin-bottom: 1em; }
│   │   │     .prose th, .prose td { border: 1px solid #ddd; padding: 0.5em; text-align: left; }
│   │   │     .prose th { background-color: #f9f9f9; }
│   │   │     
│   │   │     .dark .prose-invert h1, .dark .prose-invert h2, .dark .prose-invert h3 { color: #e5e7eb; }
│   │   │     .dark .prose-invert p, .dark .prose-invert li { color: #d1d5db; }
│   │   │     .dark .prose-invert pre { background-color: #374151; color: #e5e7eb;}
│   │   │     .dark .prose-invert a { color: var(--main-primary-text-dark, #7dd3fc); } /* Ajustar color para modo oscuro */
│   │   │     .dark .prose-invert th, .dark .prose-invert td { border-color: #4b5563; }
│   │   │     .dark .prose-invert th { background-color: #374151; }
│   │   │     
│   │   │     /* Para la extensión codehilite de Markdown (si la usas) */
│   │   │     .codehilite pre { padding: 1em; border-radius: 4px; overflow: auto; }
│   │   │     /* Más estilos para codehilite se pueden añadir o referenciar de un archivo CSS de Pygments */
│   │   │     </style>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (wiki_articulo_detalle.html) ---

│   │   ├── wiki_articulo_form.html
│   │   │   📄 CONTENIDO DEL ARCHIVO (wiki_articulo_form.html):
│   │   │     {% extends "base.html" %}
│   │   │     {% load static %}
│   │   │     
│   │   │     {% block title_tag %}{% if edit_mode %}Editar Artículo{% else %}Crear Artículo{% endif %} - Wiki{% endblock %}
│   │   │     {% block page_title_header %}{% if edit_mode %}Editar Artículo: {{ articulo.titulo }}{% else %}Crear Nuevo Artículo en la Wiki{% endif %}{% endblock %}
│   │   │     
│   │   │     {% block content %}
│   │   │     <div class="bg-card dark:bg-gray-800 p-6 md:p-8 rounded-xl shadow-lg max-w-3xl mx-auto">
│   │   │         <form method="POST" class="space-y-6">
│   │   │             {% csrf_token %}
│   │   │     
│   │   │             {% if form.non_field_errors %}
│   │   │                 <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 dark:bg-red-800 dark:border-red-600 dark:text-red-200" role="alert">
│   │   │                     <p class="font-bold">Error general:</p>
│   │   │                     <ul class="mt-1 list-disc list-inside text-sm">
│   │   │                     {% for error in form.non_field_errors %}
│   │   │                         <li>{{ error }}</li>
│   │   │                     {% endfor %}
│   │   │                     </ul>
│   │   │                 </div>
│   │   │             {% endif %}
│   │   │     
│   │   │             {# Título #}
│   │   │             <div>
│   │   │                 <label for="{{ form.titulo.id_for_label }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{{ form.titulo.label }}</label>
│   │   │                 {{ form.titulo }}
│   │   │                 {% if form.titulo.help_text %}<p class="mt-2 text-xs text-gray-500 dark:text-gray-400">{{ form.titulo.help_text }}</p>{% endif %}
│   │   │                 {% for error in form.titulo.errors %}<p class="mt-1 text-xs text-red-600 dark:text-red-400"><i class="fas fa-exclamation-triangle mr-1"></i>{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │     
│   │   │             {# Contenido #}
│   │   │             <div>
│   │   │                 <label for="{{ form.contenido.id_for_label }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{{ form.contenido.label }}</label>
│   │   │                 {{ form.contenido }}
│   │   │                 {% if form.contenido.help_text %}<p class="mt-2 text-xs text-gray-500 dark:text-gray-400">{{ form.contenido.help_text }}</p>{% endif %}
│   │   │                 {% for error in form.contenido.errors %}<p class="mt-1 text-xs text-red-600 dark:text-red-400"><i class="fas fa-exclamation-triangle mr-1"></i>{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │             
│   │   │             {# Slug (generalmente oculto o solo para usuarios avanzados) #}
│   │   │             <div>
│   │   │                 <label for="{{ form.slug.id_for_label }}" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{{ form.slug.label }}</label>
│   │   │                 {{ form.slug }}
│   │   │                 {% if form.slug.help_text %}<p class="mt-2 text-xs text-gray-500 dark:text-gray-400">{{ form.slug.help_text }}</p>{% endif %}
│   │   │                 {% for error in form.slug.errors %}<p class="mt-1 text-xs text-red-600 dark:text-red-400"><i class="fas fa-exclamation-triangle mr-1"></i>{{ error }}</p>{% endfor %}
│   │   │             </div>
│   │   │     
│   │   │             <div class="pt-4 flex items-center space-x-4">
│   │   │                 <button type="submit" class="bg-main-primary hover:bg-main-primary-dark text-main-white font-semibold py-2 px-5 rounded-md text-sm">
│   │   │                     <i class="fas {% if edit_mode %}fa-save{% else %}fa-plus-circle{% endif %} mr-2"></i> 
│   │   │                     {% if edit_mode %}Guardar Cambios{% else %}Crear Artículo{% endif %}
│   │   │                 </button>
│   │   │                 <a href="{% if edit_mode %}{{ articulo.get_absolute_url }}{% else %}{% url 'intranet_core:wiki' %}{% endif %}" class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100 text-sm">
│   │   │                     Cancelar
│   │   │                 </a>
│   │   │             </div>
│   │   │         </form>
│   │   │     </div>
│   │   │     {% endblock %}
│   │   │   --- FIN CONTENIDO (wiki_articulo_form.html) ---

│   │   └── wiki_lista.html
│   │       📄 CONTENIDO DEL ARCHIVO (wiki_lista.html):
│   │         {% extends "base.html" %}
│   │         {% load static %}
│   │         
│   │         {% block title_tag %}Wiki - Base de Conocimiento{% endblock %}
│   │         {% block page_title_header %}Base de Conocimiento (Wiki){% endblock %}
│   │         
│   │         {% block content %}
│   │         <div class="flex flex-col md:flex-row justify-between items-center mb-6 gap-4">
│   │             <form method="GET" action="{% url 'intranet_core:wiki' %}" class="flex-grow md:mr-4">
│   │                 <div class="relative">
│   │                     <input type="search" name="q" value="{{ search_query|default:'' }}" placeholder="Buscar artículos en la Wiki..." class="w-full p-3 pl-10 text-sm text-gray-700 bg-gray-100 dark:bg-gray-700 dark:text-gray-200 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-main-primary focus:border-main-primary">
│   │                     <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
│   │                         <i class="fas fa-search text-gray-400"></i>
│   │                     </div>
│   │                 </div>
│   │             </form>
│   │             <a href="{% url 'intranet_core:wiki_crear_articulo' %}" class="bg-main-primary hover:bg-main-primary-dark text-main-white font-medium py-2.5 px-5 rounded-md flex items-center text-sm whitespace-nowrap">
│   │                 <i class="fas fa-plus mr-2"></i> Crear Artículo
│   │             </a>
│   │         </div>
│   │         
│   │         <div class="bg-card dark:bg-gray-800 p-6 md:p-8 rounded-xl shadow-lg">
│   │             {% if articulos %}
│   │                 <ul class="space-y-4">
│   │                     {% for articulo in articulos %}
│   │                     <li class="border-b border-gray-200 dark:border-gray-700 pb-4 last:border-b-0 last:pb-0">
│   │                         <a href="{{ articulo.get_absolute_url }}" class="text-lg font-semibold text-main-primary hover:underline dark:text-blue-400 dark:hover:text-blue-300">
│   │                             {{ articulo.titulo }}
│   │                         </a>
│   │                         <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
│   │                             Autor: {{ articulo.autor.get_full_name|default:articulo.autor.username|default:"Desconocido" }} | Actualizado: {{ articulo.actualizado_el|date:"d M Y, H:i" }}
│   │                         </p>
│   │                         <p class="text-sm text-gray-700 dark:text-gray-300 mt-2 line-clamp-2">
│   │                             {{ articulo.contenido|striptags|truncatewords:30 }}
│   │                         </p>
│   │                     </li>
│   │                     {% endfor %}
│   │                 </ul>
│   │             {% else %}
│   │                 {% if search_query %}
│   │                 <p class="text-center text-gray-600 dark:text-gray-400 py-8">No se encontraron artículos que coincidan con tu búsqueda.</p>
│   │                 {% else %}
│   │                 <p class="text-center text-gray-600 dark:text-gray-400 py-8">Aún no hay artículos en la wiki. ¡Sé el primero en <a href="{% url 'intranet_core:wiki_crear_articulo' %}" class="text-main-primary hover:underline">crear uno</a>!</p>
│   │                 {% endif %}
│   │             {% endif %}
│   │         </div>
│   │         {% endblock %}
│   │       --- FIN CONTENIDO (wiki_lista.html) ---


│   └── registration
│       └── login.html
│           📄 CONTENIDO DEL ARCHIVO (login.html):
│             {# Ubicación: /workspaces/intranet_gem/templates/registration/login.html #}
│             {% extends "base.html" %}
│             {% load static %}
│             
│             {% block title_tag %}Iniciar Sesión{% endblock %}
│             
│             {% block page_title_header %}Iniciar Sesión{% endblock %}
│             
│             {% block content %}
│             <div class="flex justify-center items-center py-10">
│                 <div class="bg-card p-8 rounded-xl shadow-lg w-full max-w-md">
│                     <h2 class="text-2xl font-semibold text-main-primary text-center mb-6">Acceso a la Intranet</h2>
│             
│                     {% if form.errors %}
│                         <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
│                             <strong class="font-bold">Error:</strong>
│                             <span class="block sm:inline">Tu nombre de usuario y contraseña no coinciden. Por favor, inténtalo de nuevo.</span>
│                         </div>
│                     {% endif %}
│             
│                     {% if next %}
│                         {% if user.is_authenticated %}
│                             <p class="text-center text-muted mb-4">Ya has iniciado sesión como {{ user.username }}. ¿Quieres acceder con otra cuenta?</p>
│                         {% else %}
│                             <p class="text-center text-muted mb-4">Por favor, inicia sesión para ver esta página.</p>
│                         {% endif %}
│                     {% endif %}
│             
│                     <form method="post" action="{% url 'login' %}" class="space-y-6">
│                         {% csrf_token %}
│             
│                         <div>
│                             <label for="id_username" class="block text-sm font-medium text-muted">Nombre de Usuario:</label>
│                             <input type="text" name="username" autofocus autocapitalize="none" autocomplete="username" maxlength="150" required id="id_username" class="mt-1 block w-full p-3 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-main-primary focus:border-transparent">
│                         </div>
│             
│                         <div>
│                             <label for="id_password" class="block text-sm font-medium text-muted">Contraseña:</label>
│                             <input type="password" name="password" autocomplete="current-password" required id="id_password" class="mt-1 block w-full p-3 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-main-primary focus:border-transparent">
│                         </div>
│             
│                         <input type="hidden" name="next" value="{{ next|default:request.GET.next|default_if_none:'' }}">
│                                      <div>
│             <button type="submit" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm 1  font-medium text-main-white bg-main-primary hover:bg-main-primary-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-main-primary">
│             Iniciar Sesión
│             </button>
│             </div>
│             </form>
│             <p class="mt-4 text-center text-sm">
│             <a href="#" class="font-medium text-main-primary hover:text-main-primary-dark">¿Olvidaste tu contraseña?</a>
│             {# Puedes implementar la funcionalidad de reseteo de contraseña más adelante #}
│             </p>
│             </div>
│             </div>
│             {% endblock %}   
│           --- FIN CONTENIDO (login.html) ---




============================================
Fin del listado.
